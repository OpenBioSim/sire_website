Search.setIndex({"docnames": ["acknowledgements", "api/base", "api/cas", "api/convert", "api/index", "api/index_base", "api/index_cas", "api/index_convert", "api/index_io", "api/index_maths", "api/index_mm", "api/index_mol", "api/index_morph", "api/index_restraints", "api/index_search", "api/index_stream", "api/index_system", "api/index_units", "api/index_utils", "api/index_vol", "api/io", "api/io_parser", "api/maths", "api/mm", "api/mol", "api/morph", "api/restraints", "api/search", "api/sire", "api/sire_modules", "api/stream", "api/system", "api/units", "api/utils", "api/vol", "changelog", "cheatsheet/index", "cheatsheet/openmm", "cheatsheet/search", "cheatsheet/trajectory", "cheatsheet/units", "cheatsheet/view", "code_of_conduct", "contributing/codestyle", "contributing/development", "contributing/index", "contributing/packaging", "contributing/roadmap", "contributors", "features", "index", "install", "quickstart/index", "support", "tutorial/index", "tutorial/index_part01", "tutorial/index_part02", "tutorial/index_part03", "tutorial/index_part04", "tutorial/index_part05", "tutorial/index_part06", "tutorial/part01/01_importing_sire", "tutorial/part01/02_loading_a_molecule", "tutorial/part01/03_simple_indexing", "tutorial/part01/04_saving_a_molecule", "tutorial/part01/05_loading_from_multiple_files", "tutorial/part01/06_trajectories", "tutorial/part01/07_supported_file_formats", "tutorial/part02/01_indexing_atoms", "tutorial/part02/02_indexing_residues", "tutorial/part02/03_indexing_chains", "tutorial/part02/04_indexing_segments", "tutorial/part02/05_indexing_molecules", "tutorial/part02/06_indexing_bonds", "tutorial/part02/07_indexing_angles", "tutorial/part02/08_indexing_dihedrals", "tutorial/part02/09_indexing_impropers", "tutorial/part02/10_searching", "tutorial/part03/01_atom_properties", "tutorial/part03/02_cursors", "tutorial/part03/03_residue_properties", "tutorial/part03/04_molecule_properties", "tutorial/part03/05_bond_properties", "tutorial/part03/06_angle_properties", "tutorial/part03/07_dihedral_properties", "tutorial/part03/08_improper_properties", "tutorial/part04/01_measure", "tutorial/part04/02_trajectory", "tutorial/part04/03_energies", "tutorial/part04/04_energy_trajectories", "tutorial/part04/05_movement", "tutorial/part04/06_move_internals", "tutorial/part05/01_convert", "tutorial/part05/02_view", "tutorial/part05/03_smiles", "tutorial/part05/04_smarts", "tutorial/part05/05_dynamics", "tutorial/part06/01_merge", "tutorial/part06/02_alchemical_dynamics", "tutorial/part06/03_restraints", "tutorial/part06/04_alchemical_restraints"], "filenames": ["acknowledgements.rst", "api/base.rst", "api/cas.rst", "api/convert.rst", "api/index.rst", "api/index_base.rst", "api/index_cas.rst", "api/index_convert.rst", "api/index_io.rst", "api/index_maths.rst", "api/index_mm.rst", "api/index_mol.rst", "api/index_morph.rst", "api/index_restraints.rst", "api/index_search.rst", "api/index_stream.rst", "api/index_system.rst", "api/index_units.rst", "api/index_utils.rst", "api/index_vol.rst", "api/io.rst", "api/io_parser.rst", "api/maths.rst", "api/mm.rst", "api/mol.rst", "api/morph.rst", "api/restraints.rst", "api/search.rst", "api/sire.rst", "api/sire_modules.rst", "api/stream.rst", "api/system.rst", "api/units.rst", "api/utils.rst", "api/vol.rst", "changelog.rst", "cheatsheet/index.rst", "cheatsheet/openmm.rst", "cheatsheet/search.rst", "cheatsheet/trajectory.rst", "cheatsheet/units.rst", "cheatsheet/view.rst", "code_of_conduct.rst", "contributing/codestyle.rst", "contributing/development.rst", "contributing/index.rst", "contributing/packaging.rst", "contributing/roadmap.rst", "contributors.rst", "features.rst", "index.rst", "install.rst", "quickstart/index.rst", "support.rst", "tutorial/index.rst", "tutorial/index_part01.rst", "tutorial/index_part02.rst", "tutorial/index_part03.rst", "tutorial/index_part04.rst", "tutorial/index_part05.rst", "tutorial/index_part06.rst", "tutorial/part01/01_importing_sire.rst", "tutorial/part01/02_loading_a_molecule.rst", "tutorial/part01/03_simple_indexing.rst", "tutorial/part01/04_saving_a_molecule.rst", "tutorial/part01/05_loading_from_multiple_files.rst", "tutorial/part01/06_trajectories.rst", "tutorial/part01/07_supported_file_formats.rst", "tutorial/part02/01_indexing_atoms.rst", "tutorial/part02/02_indexing_residues.rst", "tutorial/part02/03_indexing_chains.rst", "tutorial/part02/04_indexing_segments.rst", "tutorial/part02/05_indexing_molecules.rst", "tutorial/part02/06_indexing_bonds.rst", "tutorial/part02/07_indexing_angles.rst", "tutorial/part02/08_indexing_dihedrals.rst", "tutorial/part02/09_indexing_impropers.rst", "tutorial/part02/10_searching.rst", "tutorial/part03/01_atom_properties.rst", "tutorial/part03/02_cursors.rst", "tutorial/part03/03_residue_properties.rst", "tutorial/part03/04_molecule_properties.rst", "tutorial/part03/05_bond_properties.rst", "tutorial/part03/06_angle_properties.rst", "tutorial/part03/07_dihedral_properties.rst", "tutorial/part03/08_improper_properties.rst", "tutorial/part04/01_measure.rst", "tutorial/part04/02_trajectory.rst", "tutorial/part04/03_energies.rst", "tutorial/part04/04_energy_trajectories.rst", "tutorial/part04/05_movement.rst", "tutorial/part04/06_move_internals.rst", "tutorial/part05/01_convert.rst", "tutorial/part05/02_view.rst", "tutorial/part05/03_smiles.rst", "tutorial/part05/04_smarts.rst", "tutorial/part05/05_dynamics.rst", "tutorial/part06/01_merge.rst", "tutorial/part06/02_alchemical_dynamics.rst", "tutorial/part06/03_restraints.rst", "tutorial/part06/04_alchemical_restraints.rst"], "titles": ["Acknowledgements", "Public API", "Public API", "Public API", "Documentation", "sire.base", "sire.cas", "sire.convert", "sire.io", "sire.maths", "sire.mm", "sire.mol", "sire.morph", "sire.restraints", "sire.search", "sire.stream", "sire.system", "sire.units", "sire.utils", "sire.vol", "Public API", "Public API", "Public API", "Public API", "Public API", "Public API", "Public API", "Public API", "sire module", "Sub-modules", "Public API", "Public API", "Public API", "Public API", "Public API", "Changelog", "Detailed Guides", "OpenMM Integration", "Searching", "Trajectories", "Units", "Viewing Molecules", "Code of Conduct", "Coding Style", "Developer\u2019s guide", "Contributing", "Packaging releases", "Roadmap", "Contributors", "Features", "OpenBioSim | Sire", "Installation", "Quick Start Guide", "How to ask for help", "Tutorial", "Part 1 - Loading and Saving", "Part 2 - Indexing and Searching", "Part 3 - Molecular Properties", "Part 4 - Measurement, Trajectories and Movement", "Part 5 - Interconverting with other Packages", "Part 6 - Morphs and Alchemical Free Energies", "Importing sire", "Loading a molecule", "Simple indexing", "Saving a molecule", "Loading from multiple files", "Loading and saving trajectories", "Supported file formats", "Indexing Atoms", "Indexing Residues", "Indexing Chains", "Indexing Segments", "Indexing Molecules", "Indexing Bonds", "Indexing Angles", "Indexing Dihedrals", "Indexing Impropers", "Searching", "Atom Properties", "Cursors and Editing Properties", "Residue, Chain and Segment Properties", "Molecule Properties", "Bond Views and Properties", "Angle Views and Properties", "Dihedral Views and Properties", "Improper Views and Properties", "Measuring Distances and Angles", "Measuring Trajectories", "Measuring Energies", "Measuring Energies Across Trajectories", "Moving Atoms and Molecules", "Moving Bonds, Angles and Dihedrals", "Converting Molecules", "Viewing Molecules in 2D", "Creating Molecules from Smiles Strings", "Searching for Fragments using Smarts Strings", "Molecular Dynamics and Minimisation", "Merged Molecules", "Alchemical Dynamics", "Restraints", "Alchemical Restraints"], "terms": {"we": [0, 21, 24, 28, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 53, 56, 57, 61, 62, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "give": [0, 28, 35, 38, 39, 40, 41, 45, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 87, 89, 91, 95, 100], "huge": 0, "thank": [0, 35, 43, 45], "everyon": [0, 42, 43, 45, 47, 53], "who": [0, 42, 44, 47], "ha": [0, 2, 21, 22, 23, 24, 28, 31, 33, 34, 35, 38, 39, 40, 41, 43, 46, 51, 52, 57, 60, 62, 64, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 96, 97, 98, 99, 100], "contribut": [0, 42, 44, 48, 51, 92, 93], "sire": [0, 1, 2, 3, 4, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "develop": [0, 35, 43, 45, 46, 48, 50, 51], "whether": [0, 1, 2, 21, 22, 23, 24, 28, 31, 33, 34, 35, 37, 38, 41, 92, 96], "directli": [0, 4, 23, 24, 30, 35, 38, 39, 41, 43, 51, 57, 62, 64, 68, 78, 87, 88, 90, 98, 99], "form": [0, 2, 22, 24, 34, 35, 38, 40, 44], "write": [0, 1, 4, 21, 24, 28, 30, 33, 35, 39, 41, 45, 46, 51, 64, 67, 77, 79, 92], "code": [0, 1, 20, 21, 23, 24, 28, 32, 33, 37, 39, 40, 41, 45, 46, 47, 50, 53, 56, 79, 87, 92, 93, 94, 98], "test": [0, 25, 28, 35, 45, 46, 47, 51, 53, 54], "document": [0, 34, 35, 39, 43, 45, 46, 47, 50, 53], "indirectli": 0, "via": [0, 4, 23, 24, 28, 31, 33, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 51, 52, 57, 62, 63, 65, 68, 69, 70, 71, 72, 77, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99], "support": [0, 3, 4, 21, 28, 33, 34, 35, 36, 41, 44, 46, 47, 51, 52, 54, 55, 60, 66, 69, 70, 72, 77, 79, 87, 91], "discuss": [0, 38, 45, 53, 93], "submit": [0, 45, 46, 47, 48], "issu": [0, 35, 37, 38, 42, 43, 45, 46, 47, 53, 92], "bug": [0, 35, 39, 44, 45, 46, 47, 53], "report": [0, 21, 35, 42, 82, 83, 84, 85], "gratefulli": 0, "fund": [0, 45], "from": [0, 1, 2, 3, 4, 21, 22, 23, 24, 25, 26, 28, 30, 31, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 56, 57, 59, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100], "epsrc": 0, "bbsrc": 0, "initi": [0, 2, 35, 47, 98, 100], "ar": [0, 1, 2, 4, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 51, 52, 53, 55, 56, 57, 58, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "also": [0, 1, 23, 24, 28, 31, 33, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 52, 57, 58, 59, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100], "ucb": 0, "cresset": [0, 35], "exscientia": 0, "evotec": 0, "have": [0, 2, 21, 22, 23, 24, 26, 28, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99], "all": [0, 1, 2, 4, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 51, 52, 53, 56, 57, 58, 63, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "either": [0, 1, 3, 20, 22, 23, 24, 25, 28, 31, 35, 38, 41, 43, 46, 53, 62, 68, 78, 79, 80, 81, 85, 86, 87, 90, 91, 97, 98], "research": 0, "sustain": 0, "institut": 0, "mani": [0, 1, 24, 35, 37, 38, 39, 43, 44, 46, 48, 57, 62, 63, 66, 67, 68, 69, 71, 78, 86, 87, 92, 94, 96, 97, 98, 99], "us": [0, 1, 2, 3, 4, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 96, 97, 98], "univers": 0, "bristol": [0, 35], "edinburgh": [0, 35], "provid": [0, 1, 4, 22, 23, 24, 25, 28, 31, 33, 34, 35, 37, 41, 44, 50, 53, 77, 79, 82, 83, 84, 88, 92, 94, 95, 96, 97, 98, 99], "time": [0, 22, 23, 24, 28, 31, 32, 33, 35, 37, 39, 40, 41, 43, 44, 46, 47, 52, 66, 68, 69, 70, 71, 72, 78, 87, 89, 91, 96, 98], "member": [0, 23, 24, 41, 42], "staff": 0, "": [0, 22, 23, 24, 28, 31, 35, 38, 39, 40, 41, 42, 45, 50, 51, 52, 56, 57, 62, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 98], "ccp": [0, 35], "biosim": [0, 35], "guidanc": [0, 51], "encourag": [0, 44, 45, 46, 51], "dure": [0, 23, 24, 28, 31, 34, 35, 44, 72, 85, 87, 98, 99, 100], "thi": [0, 1, 2, 3, 4, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "wa": [0, 21, 22, 23, 24, 25, 31, 33, 35, 37, 38, 39, 41, 44, 51, 52, 54, 55, 60, 64, 77, 79, 81, 87, 89, 90, 91, 92, 93, 96, 97, 98], "gener": [0, 2, 22, 24, 25, 28, 34, 35, 38, 39, 41, 44, 49, 52, 77, 87, 89, 90, 91, 92, 97, 98], "sphinx": [0, 35, 43, 44], "modifi": [0, 25, 35, 37, 43, 44, 46, 57, 87], "version": [0, 4, 20, 23, 24, 31, 33, 35, 40, 42, 46, 47, 51, 53, 55, 72, 73, 97], "furo": [0, 44], "theme": [0, 33, 43], "i": [0, 1, 2, 4, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "github": [0, 43, 44, 45, 46, 47, 48, 51, 53, 92], "make": [0, 2, 21, 24, 25, 31, 34, 35, 36, 39, 40, 42, 44, 46, 47, 51, 55, 58, 65, 73, 74, 75, 76, 79, 81, 82, 83, 84, 85, 87, 89, 92, 93, 96, 97, 98, 99, 100], "extens": [0, 21, 28, 39, 41, 43, 50, 64, 66, 93], "its": [0, 3, 24, 26, 34, 35, 38, 40, 41, 42, 44, 47, 52, 68, 69, 70, 71, 72, 77, 79, 87, 88, 90, 95, 97], "excel": [0, 51, 92, 95, 96], "featur": [0, 35, 45, 46, 47, 50, 51, 59, 68, 85], "includ": [0, 4, 23, 24, 28, 31, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 51, 58, 60, 68, 73, 74, 75, 76, 87, 88, 89, 94, 95, 97, 99], "page": [0, 44, 45, 47, 51, 53, 68, 95], "action": [0, 35, 42, 44, 46, 51], "ci": [0, 35, 44, 47], "cd": [0, 44, 47, 51, 68, 70, 77], "binari": [0, 4, 21, 30, 35, 39, 51, 67, 97], "packag": [0, 33, 35, 36, 44, 45, 47, 49, 50, 54, 68, 71, 92, 93, 96], "conda": [0, 33, 35, 44, 46, 53, 87, 92], "forg": [0, 35, 44, 46, 51, 92], "contain": [0, 1, 2, 4, 21, 22, 23, 24, 26, 28, 31, 32, 33, 34, 35, 37, 38, 39, 41, 44, 46, 47, 52, 56, 57, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "docker": [0, 35, 46, 51], "hub": [0, 51], "The": [0, 1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 51, 52, 54, 56, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "notebook": [0, 23, 24, 31, 41, 44, 46, 51, 61, 62, 87, 89, 90, 93], "servic": [0, 51], "jupyterhub": [0, 51], "cluster": 0, "built": [0, 2, 35, 38, 39, 40, 43, 44, 46, 51, 60, 77, 81, 87, 92, 93], "follow": [0, 1, 2, 35, 38, 39, 40, 41, 42, 43, 44, 46, 47, 51, 53, 54, 55, 62], "instruct": [0, 23, 24, 35, 46, 51, 54, 55, 62, 68], "zero": [0, 2, 22, 23, 24, 31, 35, 38, 41, 72, 79, 88, 89, 97, 99], "kubernet": 0, "microsoft": [0, 51], "azur": [0, 35], "lot": [0, 25, 35, 38, 39, 41, 44, 49, 51, 52, 57, 60, 62, 80, 82, 83, 84, 85, 87, 93, 98, 99], "detail": [0, 35, 37, 38, 42, 44, 46, 47, 49, 52, 53, 66, 68, 77, 79, 81, 87, 92, 96, 99], "licens": [0, 45], "which": [0, 2, 4, 22, 23, 24, 26, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 51, 54, 55, 56, 57, 62, 65, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 87, 90, 91, 92, 94, 95, 97, 98, 99], "can": [0, 1, 2, 4, 22, 23, 24, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "found": [0, 1, 28, 35, 37, 38, 44, 46, 68, 76, 96, 99], "below": [0, 28, 37, 38, 40, 43, 44, 48], "instal": [0, 28, 33, 35, 41, 43, 44, 50, 53, 54, 55, 62, 87, 92, 93], "automat": [0, 1, 2, 20, 23, 24, 28, 31, 34, 35, 37, 39, 40, 41, 44, 46, 47, 49, 51, 56, 64, 65, 71, 87, 88, 90, 91, 92, 93, 94, 96, 98], "part": [0, 2, 23, 24, 28, 34, 35, 36, 38, 39, 40, 41, 43, 44, 47, 50, 54, 77, 93, 99, 100], "so": [0, 2, 4, 23, 24, 25, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 51, 52, 53, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100], "you": [0, 1, 2, 4, 20, 21, 22, 23, 24, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "shouldn": [0, 28, 46], "t": [0, 1, 4, 20, 22, 23, 24, 28, 31, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 51, 53, 54, 65, 68, 69, 73, 80, 81, 83, 84, 85, 89, 91, 92, 94, 96, 97, 98, 99], "do": [0, 24, 28, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 56, 58, 59, 62, 66, 68, 69, 70, 71, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99], "anyth": [0, 22, 23, 24, 28, 31, 33, 35, 46, 53, 73, 74, 75, 76], "yourself": [0, 1, 2, 4, 28, 41, 78, 89, 90, 97], "itself": [0, 23, 24, 35, 40, 51, 68, 69, 70, 71, 79, 87, 91, 96], "distribut": [0, 22, 25, 35, 50, 51, 91], "under": [0, 36, 45, 61, 93], "term": [0, 23, 35, 38, 41, 71, 73, 77, 95, 97], "gpl": 0, "3": [0, 20, 22, 23, 24, 31, 34, 37, 38, 39, 40, 44, 46, 47, 50, 52, 54, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "ani": [0, 1, 2, 4, 20, 21, 23, 24, 28, 31, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98], "later": [0, 21, 35, 38, 40, 45, 68, 79], "sourc": [0, 1, 3, 20, 22, 24, 25, 26, 28, 30, 31, 32, 33, 35, 43, 44, 46, 50], "link": [0, 23, 24, 25, 35, 46, 85, 97], "gpl3": 0, "e": [0, 1, 2, 3, 4, 21, 22, 23, 24, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "g": [0, 1, 2, 3, 4, 22, 23, 24, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 51, 52, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "mean": [0, 1, 21, 22, 24, 28, 34, 35, 38, 40, 41, 43, 47, 57, 61, 66, 67, 68, 69, 70, 71, 72, 73, 77, 86, 87, 89, 91, 98, 99, 100], "entir": [0, 24, 35, 38, 80, 91, 92], "top": [0, 24, 28, 35, 37, 39, 40, 41, 50, 51, 52, 57, 65, 66, 67, 72, 73, 74, 75, 76, 77, 80, 81, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99], "core": [0, 28, 51, 56, 98], "lgpl": 0, "2": [0, 2, 22, 23, 24, 25, 26, 31, 34, 37, 38, 39, 40, 41, 44, 47, 50, 52, 54, 57, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "doe": [0, 2, 23, 24, 33, 35, 38, 40, 44, 68, 71, 79, 88, 92, 98], "allow": [0, 1, 2, 4, 24, 28, 35, 37, 51, 77, 87, 92, 98, 99], "both": [0, 24, 25, 26, 28, 35, 38, 39, 40, 41, 42, 65, 68, 69, 70, 71, 72, 77, 86, 87, 89, 91, 97, 98], "commerci": 0, "non": [0, 23, 24, 31, 34, 35, 37, 38, 71, 79, 81, 89, 96, 97], "without": [0, 28, 35, 39, 42, 51, 54, 69, 70, 79, 98], "fee": 0, "find": [0, 1, 20, 24, 31, 35, 36, 37, 41, 44, 45, 46, 52, 53, 65, 66, 68, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 94, 96], "out": [0, 28, 32, 35, 38, 39, 40, 41, 43, 45, 46, 66, 67, 68, 72, 77, 87, 93, 94], "more": [0, 2, 21, 24, 35, 38, 39, 40, 41, 44, 45, 47, 49, 51, 52, 66, 68, 69, 71, 77, 78, 79, 82, 87, 90, 91, 92, 94, 96, 98, 99], "about": [0, 22, 23, 24, 35, 38, 42, 44, 47, 68, 87, 90, 91, 92, 94, 99], "here": [0, 21, 23, 24, 35, 36, 38, 39, 40, 41, 44, 47, 51, 52, 54, 55, 62, 66, 68, 73, 74, 75, 76, 78, 79, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "wrap": [0, 1, 5, 23, 24, 31, 33, 35, 36, 39, 40, 44, 87], "up": [0, 2, 22, 24, 33, 35, 37, 39, 40, 41, 43, 45, 46, 47, 51, 56, 57, 60, 68, 71, 72, 73, 74, 75, 76, 77, 80, 86, 88, 90, 99, 100], "made": [0, 24, 28, 33, 34, 35, 37, 47, 82, 83, 84, 85, 89, 91], "avail": [0, 21, 28, 33, 35, 37, 41, 42, 44, 46, 47, 51, 62, 66, 68, 69, 70, 71, 79, 92, 96, 98], "within": [0, 2, 21, 24, 33, 34, 35, 37, 38, 39, 41, 42, 44, 57, 63, 68, 69, 70, 71, 73, 74, 75, 76, 78, 82, 83, 84, 87, 88, 89, 91, 92, 95, 98, 99], "psf": [0, 8, 21, 67, 71, 80], "compat": [0, 28, 35, 39, 40, 45, 46, 47, 51, 82, 83, 84, 85, 87, 97], "gplv3": [0, 45], "compon": [0, 22, 24, 34, 35, 50, 52, 78, 86, 89, 90, 92, 96], "particular": [0, 38, 39, 41, 44, 66, 79, 87, 99], "modul": [0, 1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 44, 49, 50, 61, 92, 94, 99], "gplc3": 0, "auto": [0, 2, 24, 35, 40, 44, 65], "wrapper": [0, 1, 35, 40, 43, 51, 98], "gccxml": 0, "castxml": [0, 35], "tool": [0, 35, 43, 51], "affect": [0, 2, 35, 38, 77, 98, 99], "read": [0, 4, 21, 31, 34, 35, 39, 43, 49, 51, 65, 66, 67, 92], "system": [0, 3, 4, 21, 23, 24, 28, 29, 31, 34, 35, 37, 39, 40, 41, 44, 47, 49, 50, 51, 52, 53, 55, 57, 60, 62, 65, 66, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 96, 97, 98, 99, 100], "As": [0, 24, 34, 35, 38, 41, 44, 61, 67, 68, 71, 85, 86, 88, 89, 90, 91, 99], "specif": [0, 22, 24, 33, 38, 41, 42, 44, 82, 87], "mambaforg": [0, 44], "simplifi": [0, 2, 35, 41, 79, 90, 94], "manag": [0, 2, 28, 35, 44, 46, 51], "variou": [0, 4, 35, 36, 37, 47, 56, 88], "miniconda": [0, 35, 44, 54, 55], "open": [0, 38, 41, 42, 43, 49, 50, 51, 66, 68], "project": [0, 35, 42, 50], "explicitli": [0, 2, 22, 94, 100], "them": [0, 2, 4, 24, 28, 33, 35, 39, 40, 41, 44, 45, 46, 49, 51, 58, 66, 77, 87, 92, 96, 97, 99, 100], "an": [0, 1, 2, 3, 4, 21, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 47, 49, 50, 52, 55, 56, 61, 63, 66, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 82, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100], "node": 0, "parallelis": [0, 35], "apach": [0, 45], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "some": [0, 1, 2, 22, 23, 24, 28, 32, 33, 35, 36, 37, 44, 47, 51, 65, 77, 81, 92, 98], "routin": [0, 35], "v3": 0, "inform": [0, 21, 23, 24, 28, 34, 39, 41, 42, 43, 44, 49, 51, 56, 57, 65, 67, 68, 77, 87, 99], "amber": [0, 23, 34, 35, 37, 39, 49, 57, 66, 67, 81, 92], "file": [0, 4, 20, 21, 24, 28, 30, 31, 33, 34, 35, 36, 37, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 66, 68, 71, 72, 79, 82, 83, 84, 85, 87, 90, 92, 93, 96, 97], "openli": 0, "bsd": [0, 45], "style": [0, 23, 24, 28, 31, 32, 33, 35, 40, 45, 50, 79], "perform": [0, 2, 22, 23, 24, 25, 28, 31, 34, 35, 38, 39, 40, 41, 44, 58, 59, 72, 73, 79, 89, 90, 91, 92, 94, 96, 98, 99, 100], "acceler": [0, 23, 24, 31, 35, 92, 96], "dynam": [0, 11, 23, 24, 25, 31, 34, 35, 36, 41, 49, 52, 54, 59, 60, 66, 87, 92, 100], "somd": [0, 35], "program": [0, 24, 35, 39, 44, 72], "mit": [0, 45], "least": [0, 38, 46, 72, 77, 91], "squar": [0, 2, 22, 34, 40, 87, 91, 98], "polynomi": 0, "eigenvector": [0, 22], "eigenmatrix": 0, "calcul": [0, 4, 22, 24, 28, 31, 34, 35, 36, 38, 41, 49, 52, 58, 60, 78, 80, 81, 82, 83, 84, 85, 86, 87, 97, 98, 99], "connelli": 0, "barn": 0, "public": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 35, 42, 44], "domain": [0, 2], "deriv": [0, 1, 23, 37, 38, 40, 44, 49, 56, 57, 80, 85, 93, 94], "java": 0, "matrix": [0, 9, 22, 24, 34, 35, 90], "jama": 0, "richard": 0, "wagner": 0, "random": [0, 22, 25, 34, 35, 41, 98], "number": [0, 2, 21, 22, 23, 24, 25, 26, 28, 31, 34, 35, 36, 37, 39, 40, 41, 46, 47, 49, 51, 52, 56, 62, 63, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 94, 96, 98, 99], "shown": [0, 38, 41, 57, 73, 74, 75, 76, 93, 98], "class": [0, 1, 2, 4, 21, 22, 23, 24, 25, 28, 31, 33, 34, 35, 38, 40, 44, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 86, 88, 92, 97, 98], "mtrand": 0, "base": [0, 1, 2, 4, 23, 24, 26, 28, 29, 31, 34, 35, 37, 38, 39, 40, 41, 43, 46, 47, 49, 52, 57, 65, 67, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 93, 96, 98], "makoto": 0, "matsumoto": 0, "takuji": 0, "nishimura": 0, "shawn": 0, "coku": 0, "j": [0, 2, 22, 32, 40, 43, 88], "v1": [0, 34], "15": [0, 24, 37, 38, 40, 52, 57, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 98, 99], "mai": [0, 2, 21, 22, 24, 28, 34, 41, 42, 47, 51, 58, 62, 79, 87, 88, 91, 92, 93, 95, 99], "2003": 0, "rjwagner": 0, "writem": 0, "com": [0, 35, 46, 51], "algorithm": [0, 41, 77, 91, 93], "It": [0, 24, 28, 31, 33, 35, 37, 38, 39, 40, 44, 46, 47, 50, 51, 53, 62, 65, 68, 69, 70, 71, 73, 77, 79, 82, 83, 84, 85, 87, 88, 92, 96, 98, 99], "design": [0, 4, 24, 34, 35, 39, 41, 44, 54, 55, 60, 67, 92, 97], "consider": 0, "flaw": 0, "other": [0, 1, 2, 4, 21, 22, 23, 24, 25, 28, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 50, 51, 53, 54, 56, 68, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99], "period": [0, 23, 24, 28, 31, 34, 35, 37, 38, 39, 41, 47, 87, 96], "19937": 0, "1": [0, 2, 21, 22, 23, 24, 25, 26, 31, 32, 34, 37, 38, 39, 40, 41, 42, 44, 46, 47, 50, 52, 54, 57, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "order": [0, 2, 21, 22, 23, 24, 25, 31, 35, 38, 39, 40, 41, 44, 49, 54, 66, 68, 70, 79, 80, 82, 87, 94, 95], "equidistribut": 0, "623": [0, 99], "dimens": [0, 4, 22, 23, 24, 32, 34, 35, 38, 40, 86, 87], "far": [0, 35, 44, 68, 86, 97, 98], "greater": [0, 38, 77, 96], "fast": [0, 34, 35, 44, 51, 96], "avoid": [0, 28, 34, 35, 38, 43, 44, 91], "multipl": [0, 2, 23, 24, 28, 34, 35, 36, 38, 41, 49, 52, 54, 55, 58, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 87, 89, 94, 96, 99], "divis": [0, 40], "benefit": [0, 87], "cach": [0, 28, 35], "pipelin": [0, 35], "For": [0, 4, 23, 24, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 52, 57, 62, 66, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "see": [0, 22, 23, 24, 31, 34, 35, 38, 39, 40, 41, 42, 43, 44, 47, 51, 53, 57, 58, 62, 72, 86, 87, 88, 93, 94, 96, 97, 98, 100], "inventor": 0, "web": [0, 41, 44], "http": [0, 21, 23, 24, 28, 31, 35, 42, 46, 51, 56, 62, 65, 71], "www": [0, 21, 42], "math": [0, 4, 22, 24, 25, 28, 29, 35, 78, 86, 90, 98], "keio": 0, "ac": [0, 39, 52, 57, 62, 65, 71, 72, 73, 74, 75, 76, 79, 81, 89, 92], "jp": 0, "matumoto": 0, "emt": 0, "html": [0, 21, 23, 24, 31, 42, 44], "refer": [0, 22, 23, 24, 25, 31, 37, 39, 41, 72, 77, 87, 97, 98], "m": [0, 2, 28, 32, 35, 37, 40, 44, 46, 57, 62, 65, 71, 79, 94, 95, 96], "A": [0, 1, 2, 22, 23, 24, 25, 26, 28, 31, 34, 35, 38, 39, 40, 41, 44, 49, 63, 68, 70, 71, 72, 73, 74, 75, 76, 87, 92, 95, 97, 99], "dimension": [0, 22, 34, 35, 40, 41, 59, 93], "uniform": 0, "pseudo": 0, "acm": 0, "transact": 0, "model": [0, 50, 59, 64, 92, 98], "comput": [0, 4, 28, 35, 40, 45, 46, 51, 53, 62, 81, 99, 100], "simul": [0, 23, 24, 31, 32, 34, 35, 37, 40, 41, 49, 51, 60, 66, 85, 87, 92, 96, 97, 98, 99, 100], "vol": [0, 4, 29, 34, 37], "8": [0, 24, 35, 38, 39, 41, 51, 52, 57, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "No": [0, 68], "januari": [0, 47], "1998": 0, "pp": 0, "30": [0, 52, 68, 69, 70, 72, 73, 74, 77, 87, 91, 95, 98], "copyright": 0, "1997": 0, "2002": [0, 95], "2000": 0, "right": [0, 22, 34, 35, 37, 40, 42, 44, 68, 91], "reserv": 0, "redistribut": 0, "modif": 0, "permit": 0, "condit": [0, 4, 21, 28, 34, 43], "met": [0, 69, 72, 77], "must": [0, 22, 24, 26, 28, 32, 38, 40, 46, 51, 66, 68, 87, 88, 91, 99], "retain": 0, "abov": [0, 1, 22, 23, 24, 31, 35, 38, 39, 41, 44, 46, 51, 53, 57, 58, 65, 74, 75, 76, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99], "notic": [0, 71, 85, 86, 87, 91, 93, 98], "list": [0, 2, 3, 20, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 57, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 80, 81, 86, 87, 90, 91, 92, 96, 99], "disclaim": 0, "reproduc": [0, 22, 35, 53], "materi": 0, "name": [0, 1, 2, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 35, 38, 39, 40, 41, 44, 45, 48, 51, 57, 62, 65, 66, 69, 72, 73, 74, 75, 76, 77, 78, 79, 82, 86, 87, 88, 89, 92, 97, 99], "contributor": [0, 42, 43, 45, 50], "endors": 0, "promot": 0, "product": [0, 2, 35, 44, 46, 51], "prior": 0, "written": [0, 1, 28, 30, 31, 35, 44, 51, 55, 64, 66, 78, 79, 85, 92], "permiss": [0, 42, 45], "BY": 0, "THE": [0, 46], "holder": 0, "AND": 0, "AS": 0, "express": [0, 2, 6, 23, 24, 28, 38, 42, 65, 78, 79, 80, 81, 82, 83, 84, 85, 95], "OR": 0, "impli": [0, 85, 93], "warranti": 0, "BUT": 0, "NOT": [0, 47], "limit": [0, 31, 34, 35, 51, 53, 87], "TO": 0, "OF": 0, "merchant": 0, "FOR": 0, "purpos": [0, 58], "IN": 0, "NO": 0, "event": [0, 41, 42], "shall": 0, "owner": 0, "BE": 0, "liabl": 0, "direct": [0, 28, 34, 58, 94], "indirect": 0, "incident": 0, "special": [0, 40, 79], "exemplari": 0, "consequenti": 0, "damag": 0, "procur": 0, "substitut": [0, 2], "good": [0, 37, 40, 42, 45, 46, 47, 96, 98, 99], "loss": 0, "data": [0, 4, 21, 23, 24, 28, 30, 31, 33, 34, 35, 39, 41, 49, 51, 58, 66, 67, 97], "profit": 0, "busi": 0, "interrupt": 0, "howev": [0, 35, 46, 78, 97, 98, 100], "caus": [0, 25, 35, 38, 51, 82, 83, 84, 85, 94, 98, 99], "ON": 0, "theori": 0, "liabil": 0, "contract": [0, 36], "strict": [0, 43, 44], "tort": 0, "neglig": 0, "otherwis": [0, 22, 24, 26, 30, 31, 41, 42, 87], "aris": 0, "wai": [0, 24, 35, 38, 39, 40, 41, 44, 45, 47, 49, 51, 52, 63, 68, 69, 70, 71, 72, 78, 79, 80, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98], "even": [0, 24, 35, 41, 43, 51, 52, 58, 66, 68, 72, 74, 75, 76, 77, 82, 83, 84, 85, 90, 94, 99], "IF": 0, "advis": 0, "possibl": [0, 2, 22, 28, 34, 38, 43, 44, 47, 67, 68, 72, 94], "SUCH": 0, "origin": [0, 2, 20, 28, 34, 35, 38, 44, 46, 60, 79, 86, 90, 96], "when": [0, 20, 21, 22, 23, 24, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 51, 68, 69, 70, 71, 72, 77, 78, 87, 89, 90, 91, 93, 94, 96, 97, 98, 99], "send": [0, 35], "email": 0, "appropri": [0, 30, 32, 35, 39, 42, 46, 71], "your": [0, 1, 28, 35, 37, 38, 40, 41, 43, 45, 46, 47, 48, 49, 53, 62, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 92, 98], "work": [0, 1, 24, 25, 28, 31, 33, 34, 35, 40, 41, 44, 45, 46, 47, 50, 51, 53, 54, 57, 59, 72, 74, 75, 76, 78, 80, 86, 87, 91, 94, 97, 98], "would": [0, 1, 2, 23, 24, 31, 32, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 51, 57, 63, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99], "nice": [0, 96], "cc": 0, "washington": 0, "edu": 0, "rememb": [0, 38, 40, 41, 44, 48, 53, 92], "vectoris": [0, 35], "intrins": 0, "function": [0, 1, 2, 4, 22, 23, 24, 25, 28, 31, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 47, 50, 52, 57, 59, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "processor": [0, 44, 51], "sse": 0, "These": [0, 4, 22, 23, 24, 26, 31, 35, 37, 38, 39, 40, 41, 44, 46, 47, 51, 56, 62, 66, 77, 78, 81, 86, 87, 91, 97, 98, 99], "were": [0, 21, 35, 37, 38, 47, 52, 65, 66, 68, 72, 91, 96, 99], "julien": 0, "pommier": 0, "releas": [0, 22, 35, 44, 45, 50, 51, 53, 92], "zlib": 0, "given": [0, 2, 23, 24, 35, 37, 38, 77], "2007": 0, "In": [0, 1, 2, 28, 32, 34, 35, 37, 38, 39, 40, 41, 42, 44, 51, 57, 62, 64, 66, 68, 69, 70, 71, 72, 76, 77, 78, 80, 81, 85, 87, 90, 91, 93, 95, 96, 97, 98, 99, 100], "author": [0, 1, 2, 21, 22, 23, 24, 34, 43], "held": [0, 22, 24, 38, 40, 57, 72, 78, 82, 83, 84, 85, 98, 99], "grant": 0, "anyon": [0, 24, 43, 53], "applic": 0, "alter": 0, "freeli": 0, "subject": [0, 99], "restrict": [0, 28, 35], "misrepres": 0, "claim": 0, "wrote": 0, "If": [0, 2, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 37, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 62, 65, 72, 73, 74, 75, 76, 78, 86, 87, 89, 90, 91, 92, 94, 98, 99], "appreci": [0, 43], "requir": [0, 23, 24, 28, 31, 35, 37, 44, 51, 72], "plainli": 0, "mark": [0, 44, 79], "being": [0, 24, 28, 31, 34, 35, 37, 38, 40, 41, 44, 46, 47, 68, 91, 92, 96, 97, 99, 100], "remov": [0, 2, 20, 22, 24, 31, 35, 37, 41, 42, 43, 51, 65, 79, 87, 93], "avx": [0, 35], "inspir": 0, "extend": [0, 35, 57, 99], "giovanni": 0, "garberoglio": 0, "implement": [0, 4, 24, 35, 38, 44, 68, 69, 70, 71, 72, 88, 92, 97, 99], "sin": [0, 2], "co": [0, 35, 57, 81], "sinco": 0, "exp": 0, "log": [0, 33, 51], "h": [0, 23, 24, 31, 35, 37, 38, 44, 51, 52, 57, 64, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 90, 91, 94, 95, 97], "gruntthepeon": 0, "free": [0, 35, 42, 43, 44, 46, 47, 50, 51, 54, 92, 97, 98, 100], "fr": 0, "ssemath": 0, "2012": 0, "interdisciplinari": 0, "laboratori": 0, "scienc": 0, "lisc": 0, "fondazion": 0, "bruno": 0, "kessler": 0, "trento": 0, "sommar": 0, "18": [0, 24, 52, 57, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 98, 99], "38123": 0, "itali": 0, "convert": [0, 3, 4, 17, 22, 24, 28, 29, 31, 32, 35, 36, 37, 49, 52, 54, 59, 71, 72, 82, 83, 84, 85, 87, 90, 93, 94, 96, 98, 99], "hand": [0, 44, 47], "sse2": 0, "arm": 0, "neon": 0, "amazingli": 0, "well": [0, 23, 24, 26, 34, 35, 37, 51, 88, 98, 99], "sincer": 0, "produc": [0, 22, 35, 51, 98], "header": [0, 30, 33, 35], "onli": [0, 2, 4, 22, 23, 24, 25, 28, 31, 32, 33, 35, 37, 38, 39, 40, 41, 44, 46, 47, 51, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 86, 87, 91, 93, 94, 95, 98, 99], "own": [0, 1, 2, 35, 37, 38, 40, 41, 43, 44, 47, 49, 53, 68, 69, 70, 71, 72, 77, 80, 82, 83, 84, 85, 88, 89, 98, 100], "solv": [0, 38, 68], "freewar": 0, "l": [0, 40, 100], "peter": 0, "deutsch": 0, "1999": 0, "aladdin": 0, "enterpris": 0, "ghost": [0, 23, 24, 25, 31, 35, 37, 97], "align": [0, 9, 22, 23, 24, 31, 34, 35, 36, 42, 87, 92], "calculate_rmsd": 0, "script": [0, 28, 35, 41, 44, 51, 57, 72, 86, 92], "jimmi": 0, "charnlei": 0, "kromann": 0, "lar": 0, "bratholm": 0, "rmsd": [0, 24, 35, 39, 91], "2013": [0, 68], "dk": 0, "_infer_bo_and_charg": 0, "describ": [0, 21, 22, 24, 28, 34, 35, 37, 38, 39, 41, 43, 44, 46, 51, 53, 62, 68, 87], "matteo": 0, "ferla": 0, "bundl": [0, 35, 44, 51], "draw": 0, "graph": [0, 58, 89, 96], "9": [0, 24, 35, 38, 39, 41, 51, 52, 57, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99], "fouesneau": 0, "chang": [0, 1, 2, 24, 34, 35, 36, 38, 39, 41, 43, 44, 46, 47, 51, 60, 66, 79, 82, 86, 88, 90, 91, 92, 94, 98], "ve": [0, 51, 96], "run": [0, 2, 21, 23, 24, 31, 33, 35, 36, 41, 43, 45, 46, 49, 52, 53, 54, 60, 62, 72, 87, 92, 93, 94, 96, 98, 99, 100], "through": [0, 24, 35, 39, 41, 46, 54, 87, 91, 98], "2to3": 0, "simpl": [0, 22, 23, 24, 26, 28, 33, 34, 35, 38, 39, 41, 46, 54, 55, 72, 79, 86, 87, 90, 91, 93, 98], "la": 0, "matplotlib": [0, 87], "imri": 0, "goldberg": 0, "plotter": 0, "pypi": 0, "org": [0, 23, 24, 28, 31, 42, 46, 47, 51, 56, 62, 65, 71], "At": [0, 37, 38, 51, 72, 90, 98], "enoi": 0, "secur": [0, 35], "me": [0, 24], "access": [0, 24, 28, 33, 35, 37, 41, 46, 51, 56, 57, 63, 66, 69, 70, 71, 72, 77, 80, 81, 82, 86, 94, 95, 97, 98], "my": [0, 44], "thu": [0, 22, 33, 40, 44, 64, 70, 77, 100], "quickli": [0, 24, 35, 43, 44, 46, 47, 87], "figur": 0, "look": [0, 23, 24, 33, 34, 38, 43, 46, 49, 51, 52, 68, 72, 73, 74, 75, 76, 77, 88, 92, 94, 99], "how": [0, 2, 23, 24, 31, 35, 37, 38, 39, 40, 41, 44, 45, 46, 50, 51, 56, 57, 58, 59, 60, 61, 62, 64, 68, 69, 71, 72, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98], "could": [0, 26, 31, 35, 37, 38, 39, 41, 42, 44, 47, 51, 52, 53, 58, 65, 68, 69, 72, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99], "quick": [0, 24, 49, 77, 87], "dirti": 0, "But": [0, 38, 44, 47, 83, 84, 85, 96], "someth": [0, 28, 32, 35, 37, 43, 68, 73, 86, 89], "want": [0, 1, 2, 20, 21, 23, 24, 28, 31, 33, 34, 37, 38, 39, 40, 41, 47, 51, 53, 57, 58, 64, 66, 68, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100], "just": [0, 2, 22, 23, 24, 31, 33, 34, 35, 37, 38, 39, 40, 44, 51, 52, 56, 66, 73, 74, 75, 76, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 96, 97, 98, 99], "standard": [0, 2, 4, 22, 23, 24, 31, 34, 35, 38, 39, 40, 44, 72, 79, 89, 95, 97, 98], "ish": 0, "numpi": [0, 20, 35, 44, 51, 87], "scipi": 0, "came": 0, "after": [0, 20, 25, 33, 35, 43, 44, 51, 66, 90, 91], "iter": [0, 23, 24, 31, 35, 79], "ad": [0, 2, 23, 24, 28, 35, 37, 41, 43, 44, 45, 46, 47, 64, 66, 79, 80, 87, 89, 90, 98, 100], "show": [0, 23, 24, 35, 38, 41, 42, 61, 62, 66, 86, 93, 97, 98], "curv": [0, 23], "one": [0, 21, 22, 23, 24, 25, 28, 31, 33, 34, 35, 38, 41, 43, 47, 57, 60, 62, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 91, 93, 97, 98, 100], "differ": [0, 4, 22, 23, 24, 25, 26, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 58, 60, 65, 69, 71, 72, 90, 91, 92, 93, 96, 97, 98, 99, 100], "marker": 0, "And": [0, 39, 52, 69, 73, 87, 92], "usag": [0, 33, 35, 40], "close": [0, 34, 35, 41], "hist": 0, "hist2d": 0, "imshow": 0, "todo": 0, "axi": [0, 22, 24, 34, 86, 90], "yet": [0, 35, 41, 44, 46, 47, 92], "correct": [0, 35, 37, 39, 41, 42, 43, 51], "lazi": [0, 35], "load": [0, 4, 15, 21, 22, 24, 28, 30, 31, 33, 35, 36, 37, 41, 44, 49, 50, 52, 54, 56, 57, 58, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "consol": [0, 18, 33, 35, 61], "output": [0, 4, 20, 24, 28, 32, 33, 35, 39, 40, 44, 66, 69, 99], "print": [0, 20, 28, 32, 33, 35, 37, 38, 39, 40, 41, 51, 56, 57, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "datafram": [0, 2, 22, 24, 28, 35, 52, 87, 89, 98], "easili": [0, 35, 39, 41, 49, 51, 73, 74, 75, 76, 77, 88], "oper": [0, 23, 24, 35, 36, 40, 44, 51, 53, 68, 69, 70, 71, 72, 77, 79, 80, 91, 95], "explor": [0, 35, 47, 51, 77], "user": [0, 1, 24, 35, 37, 46, 51, 71], "2023": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "dev": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "view": [1, 2, 3, 4, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 49, 50, 52, 54, 56, 57, 59, 62, 63, 71, 80, 81, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100], "index": [1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 38, 39, 44, 50, 52, 54, 55, 80, 82, 83, 84, 85, 87, 88, 91, 95, 97, 99], "propertymap": [1, 5, 21, 23, 24, 35], "hold": [1, 2, 4, 21, 22, 23, 24, 25, 26, 31, 34, 35, 39, 40, 76, 80, 81, 86, 99], "collect": [1, 4, 23, 24, 35, 37, 38, 39, 41, 44, 63, 69, 70, 71, 72, 78, 82, 83, 84, 85, 90, 92, 93, 94, 96, 98], "suppli": [1, 2, 22, 23, 24, 28, 31, 35, 39, 87, 89], "option": [1, 2, 20, 23, 24, 25, 28, 31, 33, 35, 36, 38, 39, 41, 51, 56, 62, 91, 92, 93, 94, 96, 98, 99], "properti": [1, 3, 4, 20, 21, 23, 24, 25, 28, 31, 35, 36, 37, 39, 41, 43, 49, 50, 54, 87, 90, 95, 96, 97, 98], "locat": [1, 23, 34, 35, 44, 51], "cljff": 1, "add": [1, 2, 23, 24, 28, 31, 33, 35, 41, 43, 44, 45, 48, 51, 59, 60, 77, 79, 80, 82, 87, 92, 93, 98, 99], "mol": [1, 4, 20, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 37, 38, 39, 40, 41, 43, 44, 52, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "set": [1, 2, 4, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 51, 60, 66, 68, 69, 70, 71, 72, 77, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 96, 97, 98, 99, 100], "charg": [1, 2, 31, 32, 35, 36, 40, 41, 49, 57, 78, 79, 81, 93, 94, 97, 98], "chg": 1, "lj": [1, 23, 37, 39, 52, 57, 78, 79, 81, 89], "ljparam": 1, "propertymappropertynam": 1, "kwarg": [1, 22, 23, 24, 25, 26, 28, 31, 33], "like": [1, 35, 37, 38, 39, 41, 43, 44, 47, 51, 57, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 92, 93, 95, 96, 99], "interfac": [1, 23, 24, 28, 31, 49, 79], "c": [1, 2, 4, 21, 22, 23, 24, 27, 28, 32, 34, 35, 36, 37, 38, 39, 41, 45, 46, 49, 52, 57, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99], "inde": [1, 33, 35, 38, 40], "python": [1, 4, 24, 28, 35, 36, 45, 46, 49, 51, 54, 55, 57, 59, 61, 64, 68, 77, 78, 79, 92, 98], "should": [1, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 37, 38, 40, 44, 46, 47, 51, 61, 67, 72, 91, 92, 96, 97, 98, 99], "christoph": [1, 2, 21, 22, 23, 24, 34], "wood": [1, 2, 21, 22, 23, 24, 34], "add_prefix": 1, "addprefix": 1, "arg1": [1, 2, 21, 22, 23, 24, 34], "object": [1, 2, 3, 4, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 44, 57, 58, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99], "prefix": [1, 35, 36, 44], "pass": [1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 47, 52, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 86, 87, 90, 91, 92, 94, 95, 96, 98, 99], "onto": [1, 2, 23, 31, 44, 92], "return": [1, 2, 3, 4, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 44, 52, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 96, 98, 99], "new": [1, 22, 25, 28, 31, 35, 38, 39, 44, 45, 46, 47, 49, 53, 79, 80, 90, 92, 98], "map": [1, 3, 4, 20, 21, 23, 24, 25, 26, 28, 31, 34, 35, 37, 38, 39, 41, 51, 87, 96, 98, 99], "kei": [1, 4, 22, 23, 24, 30, 31, 37, 50, 68, 71, 79, 87, 91, 96, 98, 99], "x": [1, 2, 6, 28, 34, 35, 38, 39, 41, 44, 67, 68, 73, 77, 78, 86, 87, 89, 90], "prefixkei": 1, "signatur": [1, 2, 21, 22, 23, 24, 27, 32, 34], "sirebas": [1, 21, 23, 24, 34, 79], "lvalu": [1, 2, 21, 22, 23, 24, 34], "qstring": [1, 2, 21, 22, 23, 24, 27, 34], "qstringlist": [1, 2, 21, 22, 23, 24], "add_suffix": 1, "addsuffix": 1, "suffix": [1, 21, 28, 97], "keysuffix": 1, "assign": [1, 2, 21, 22, 23, 24, 34, 35, 41, 44, 49, 57, 68, 69, 70, 71, 72, 79], "clone": [1, 2, 21, 22, 23, 24, 31, 34, 35, 47, 51], "is_default": [1, 38], "isdefault": 1, "bool": [1, 2, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34], "default": [1, 2, 3, 22, 23, 24, 25, 26, 28, 31, 32, 35, 36, 37, 38, 39, 41, 44, 67, 70, 77, 78, 79, 80, 82, 86, 87, 88, 90, 91, 93, 94, 96, 98, 99, 100], "doesnt": [1, 34], "specifi": [1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 34, 35, 38, 39, 41, 51, 64, 77, 78, 79, 86, 87, 90, 91, 95, 96, 99], "merg": [1, 35, 44, 46, 47, 54, 60, 98], "combin": [1, 23, 35, 36, 38, 39, 44, 47, 68, 69, 70, 71, 72, 77, 78, 87, 98], "take": [1, 2, 22, 28, 39, 40, 41, 42, 44, 49, 51, 52, 54, 57, 77, 87, 96, 99], "preced": [1, 38], "over": [1, 23, 24, 31, 32, 34, 35, 39, 41, 46, 63, 79, 80, 82, 83, 84, 85, 88, 89, 91, 96, 98, 99], "str": [1, 2, 3, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 71], "valu": [1, 2, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 96, 97, 98, 100], "call": [1, 2, 4, 22, 23, 24, 28, 31, 32, 33, 35, 37, 38, 39, 40, 41, 44, 46, 51, 52, 62, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 100], "char": [1, 2, 21, 22, 23, 24, 34], "const": [1, 2, 21, 22, 23, 24, 34], "propertynam": [1, 23, 24], "to_dict": 1, "todict": 1, "raw": [1, 35, 39, 79], "underli": [1, 24, 35, 98], "dictionari": [1, 23, 24, 31, 35, 37, 41, 57, 68, 79, 87, 88, 96], "qhash": [1, 22, 23, 24], "to_str": [1, 2, 21, 22, 23, 24, 33, 34], "tostr": [1, 2, 21, 22, 23, 24, 34], "string": [1, 2, 21, 22, 23, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 49, 52, 54, 59, 68, 69, 70, 71, 73, 74, 75, 76, 79, 87, 92, 93, 99], "represent": [1, 2, 21, 22, 23, 24, 31, 34, 35, 36, 40, 42, 49, 50, 92], "typenam": [1, 2, 21, 22, 23, 24, 34], "what": [1, 2, 21, 22, 23, 24, 34, 37, 42, 44, 47, 49, 50, 52, 67, 77, 79, 87, 89, 92, 95, 96, 98], "create_map": [1, 5, 35], "extra": [1, 35, 41, 43, 44, 46, 51, 96, 98], "none": [1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 41], "construct": [1, 21, 24, 28, 40, 42, 56, 73, 74, 75, 76, 79, 80, 86, 98], "let": [1, 24, 35, 41, 49, 51, 53, 56, 60, 62, 71, 73, 74, 75, 76, 77, 80, 82, 86, 87, 89, 90, 91, 96, 98], "normal": [1, 2, 21, 22, 23, 24, 28, 31, 38, 79, 91, 97, 98], "wouldn": 1, "instead": [1, 28, 33, 35, 37, 40, 41, 43, 44, 66, 81, 82, 83, 84, 85, 86, 92, 93, 97], "creat": [1, 4, 22, 24, 26, 28, 31, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 49, 53, 54, 57, 58, 59, 65, 68, 69, 70, 71, 72, 77, 79, 80, 89, 92, 93, 96, 97, 98, 99, 100], "energi": [1, 4, 22, 23, 24, 25, 31, 32, 35, 36, 40, 49, 50, 52, 54, 58, 82, 83, 84, 85, 91, 92, 96, 97, 99, 100], "cutoff": [1, 23, 24, 31, 34, 35, 37, 96], "5": [1, 2, 24, 35, 37, 38, 39, 40, 41, 43, 47, 50, 52, 54, 57, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "angstrom": [1, 17, 22, 32, 34, 35, 37, 40, 77, 82, 86, 87, 90, 91], "equival": [1, 3, 23, 24, 37, 38, 43, 77, 92], "case": [1, 2, 24, 28, 32, 34, 35, 37, 38, 40, 41, 44, 47, 51, 52, 62, 64, 65, 66, 68, 71, 72, 73, 76, 77, 78, 80, 81, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "coordin": [1, 2, 20, 21, 23, 24, 26, 28, 31, 34, 35, 37, 38, 39, 41, 43, 49, 57, 60, 65, 67, 68, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 96, 97, 98, 99], "my_coord": 1, "rather": [1, 24, 34, 35, 37, 77, 79, 92], "than": [1, 2, 21, 24, 34, 35, 37, 38, 40, 44, 66, 68, 69, 77, 79, 86, 87, 92, 96, 98], "recurs": 1, "item": [1, 21, 28, 31, 46, 68, 77, 79, 86], "note": [1, 2, 20, 22, 23, 24, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 61, 64, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99], "don": [1, 4, 23, 24, 28, 31, 35, 38, 39, 40, 41, 44, 46, 51, 69, 80, 83, 84, 85, 91, 97, 98], "need": [1, 2, 4, 20, 22, 23, 24, 28, 31, 32, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 51, 52, 57, 64, 65, 69, 70, 71, 79, 87, 89, 92, 93, 94, 96, 97, 98, 99, 100], "handl": [1, 24, 33, 35, 40, 41, 43, 45, 48, 98], "ca": [2, 4, 23, 24, 29, 31, 38, 52, 57, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 87, 89, 91, 94, 95, 98, 99, 100], "algebra": [2, 4, 81, 82, 83, 84, 85], "entiti": [2, 34], "ex": 2, "sireca": [2, 23], "float": [2, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 38, 87, 98], "val": [2, 24, 31, 32, 69, 70, 72, 77], "doubl": [2, 22, 23, 24, 27, 31, 32, 34, 37, 40, 41, 53, 82, 83, 84, 85, 86], "complex": [2, 38, 41, 49, 73, 74, 75, 76, 79], "siremath": [2, 22, 24, 34, 35], "expressionbas": 2, "children": [2, 35], "child": [2, 33, 35], "conjug": 2, "cube": 2, "diff": [2, 43], "symbol": [2, 6, 23, 24, 33, 35, 38, 40, 68], "int": [2, 21, 22, 23, 24, 27, 28, 31, 33, 34, 43], "level": [2, 28, 31, 32, 33, 35, 36, 42, 50, 77, 92, 96], "synonym": [2, 23, 24, 26, 86, 99], "differenti": 2, "respect": [2, 34, 42, 53], "result": [2, 4, 22, 23, 24, 28, 31, 35, 37, 38, 39, 41, 42, 44, 46, 52, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 85, 87, 88, 89, 91, 92, 94, 96, 97, 98], "throw": [2, 22, 23, 24, 34, 35], "unavailable_differenti": 2, "divid": [2, 40, 41, 63, 87, 91], "z": [2, 22, 24, 34, 38, 78, 86, 90], "evalu": [2, 23, 24, 25, 31, 35, 37, 40, 78, 80, 86, 87, 98, 100], "numer": [2, 22, 35, 38, 79], "unidentifi": 2, "assum": [2, 22, 23, 24, 26, 30, 31, 34, 37, 39, 47, 51, 54, 55, 72, 92, 100], "equal": [2, 22, 24, 35, 38, 40, 77, 88, 91, 98, 99], "real": [2, 22, 24, 35, 85], "arithmet": [2, 23, 37, 57, 81], "except": [2, 23, 24, 28, 33, 34, 35, 39, 68, 71, 82, 91, 94, 97], "thrown": [2, 44], "domain_error": 2, "complexvalu": 2, "expand": [2, 4, 23, 24, 28, 33, 35, 37, 38, 39, 41, 52, 57, 65, 66, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "factor": [2, 40, 81], "power": [2, 4, 23, 24, 28, 31, 35, 36, 37, 49, 59, 68, 77, 87, 92, 95], "attempt": [2, 23, 24, 31, 33, 38], "rearrang": 2, "equat": [2, 98, 100], "n": [2, 21, 22, 24, 28, 35, 38, 40, 51, 52, 57, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 87, 91, 94, 95, 96, 98], "constant": [2, 23, 26, 35, 47, 99], "etc": [2, 23, 24, 28, 31, 35, 36, 39, 40, 41, 44, 46, 49, 51, 56, 57, 63, 64, 66, 72, 77, 79, 86, 87, 88, 92, 96, 97, 98], "fail": [2, 28, 35, 38, 51, 94], "rearrangement_error": 2, "qlist": [2, 21, 23, 24, 34], "hash": [2, 23, 24, 35, 51], "unsign": [2, 22, 23, 24, 34], "integ": [2, 22, 24, 35, 38, 40, 68, 69, 70, 71, 72, 98], "integr": [2, 35, 36, 38, 46, 47, 50, 52, 60, 92, 96, 98, 99], "unavailable_integr": 2, "invert": [2, 22, 23, 24, 35], "is_complex": 2, "iscomplex": 2, "is_compound": 2, "iscompound": 2, "compound": 2, "singl": [2, 22, 23, 24, 25, 26, 28, 31, 34, 35, 37, 38, 39, 41, 43, 44, 66, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 86, 87, 89, 91, 92, 96, 97, 98, 99], "sum": [2, 33, 38, 88], "powerfunct": 2, "is_const": 2, "isconst": 2, "is_funct": 2, "isfunct": 2, "is_zero": [2, 22], "iszero": [2, 22], "multipli": [2, 35, 40], "negat": 2, "neg": [2, 34, 38, 40, 77, 93, 94], "pow": 2, "rais": [2, 21, 23, 24, 28, 33, 34, 35, 36, 39, 43, 44, 45, 47, 68, 69, 71, 73, 74, 75, 76, 82, 91, 92, 94, 97], "expresss": 2, "ration": 2, "root": [2, 46, 87, 91], "nth": [2, 36], "seri": [2, 35, 37, 39, 47], "expans": [2, 36, 65], "try": [2, 33, 35, 39, 41, 44, 46, 51, 64, 71, 89, 93, 94, 96], "ident": [2, 22, 24, 37, 42, 43, 46, 72, 80, 92, 98, 99], "unsafe_complex_simplif": 2, "necessarili": [2, 22], "true": [2, 20, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 37, 38, 39, 41, 43, 52, 79, 86, 87, 91, 93, 94, 95, 97, 98], "arcsin": 2, "wherebi": [2, 35], "been": [2, 21, 22, 24, 28, 33, 34, 35, 41, 44, 46, 47, 51, 52, 53, 62, 64, 66, 68, 71, 72, 77, 81, 82, 83, 84, 85, 86, 87, 90, 94, 96, 98], "subtract": 2, "to_open_m_m_str": 2, "toopenmmstr": 2, "openmm": [2, 3, 23, 24, 31, 34, 35, 36, 49, 50, 52, 59, 60, 96, 98, 99], "syntax": [2, 38, 68, 77, 91], "lambdaschedul": [2, 6, 23, 24, 31, 35, 37, 98, 100], "schedul": [2, 23, 24, 31, 37, 100], "paramet": [2, 3, 20, 23, 24, 25, 26, 28, 31, 35, 37, 40, 41, 44, 49, 52, 57, 67, 72, 78, 79, 81, 85, 92, 96, 98, 99, 100], "accord": [2, 23, 24, 31, 34, 39, 47, 91], "global": [2, 22, 25, 30, 35, 98], "lambda": [2, 22, 23, 24, 25, 31, 35, 37, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 98], "broken": [2, 21, 24, 31, 41, 51], "sub": [2, 23, 24, 28, 33, 35, 39, 41, 44, 49, 50, 77, 81, 92, 93, 94], "lever": [2, 35, 98, 100], "stage": [2, 23, 24, 35, 41, 46, 98, 100], "add_charge_scale_stag": [2, 98], "addchargescalestag": 2, "scale": [2, 23, 24, 31, 32, 34, 35, 37, 40, 57, 81, 98, 100], "sandwich": [2, 98], "current": [2, 3, 22, 24, 26, 28, 31, 32, 33, 36, 38, 44, 46, 51, 65, 77, 86, 90, 92, 98, 99], "descal": 2, "prepend": [2, 28, 98], "down": [2, 24, 34, 87, 98, 100], "gamma": [2, 34], "where": [2, 21, 23, 24, 25, 26, 34, 35, 38, 40, 41, 44, 46, 49, 51, 75, 77, 86, 97, 98, 99, 100], "exis": 2, "final": [2, 35, 37, 41, 44, 45, 46, 91, 98, 100], "rescal": [2, 25], "append": [2, 23, 24, 98, 99], "void": [2, 21, 22, 23, 24, 27, 34, 43], "decharge_nam": 2, "recharge_nam": 2, "add_lev": 2, "addlev": 2, "plot": [2, 89, 98, 100], "perturb": [2, 12, 23, 24, 25, 31, 35, 37, 49, 60, 97, 100], "dont": [2, 21], "manual": [2, 33, 35, 37, 46, 87, 89, 96, 97], "add_morph_stag": [2, 98], "addmorphstag": 2, "morph": [2, 4, 23, 24, 25, 29, 31, 35, 50, 54, 97, 98, 100], "each": [2, 4, 21, 22, 23, 24, 26, 28, 31, 34, 35, 38, 39, 40, 41, 44, 47, 53, 56, 57, 66, 68, 69, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 95, 96, 98, 99], "forcefield": [2, 4, 23, 24, 31, 35, 37, 49, 52, 57, 79, 81, 85, 92, 98], "add_stag": [2, 100], "addstag": 2, "end": [2, 23, 24, 25, 31, 33, 37, 43, 44, 47, 51, 64, 68, 96, 98], "custom": [2, 36, 41, 79, 87, 89], "append_stag": [2, 98], "appendstag": 2, "static": [2, 21, 22, 23, 24, 31, 33, 34, 35, 89], "charge_scaled_morph": 2, "repres": [2, 4, 21, 22, 23, 24, 34, 35, 39, 40, 41, 42, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 86, 90, 94, 97, 98], "central": [2, 34, 41, 74, 75, 76, 85, 91, 94, 97], "between": [2, 4, 22, 23, 24, 25, 26, 28, 31, 34, 35, 37, 38, 39, 40, 41, 46, 58, 59, 60, 68, 73, 74, 75, 76, 81, 87, 89, 91, 92, 96, 97, 98, 99, 100], "first": [2, 23, 24, 25, 28, 31, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 47, 51, 52, 56, 57, 62, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100], "finish": [2, 28, 44, 47], "recharg": [2, 98], "restor": [2, 34, 40], "back": [2, 23, 24, 26, 31, 40, 44, 46, 47, 51, 72, 78, 79, 85, 88, 92, 96], "clamp": 2, "lambda_valu": [2, 23, 24, 25, 31, 37, 98, 100], "valid": [2, 23, 24, 31, 34, 35, 37, 38, 44, 47, 73, 74, 75, 76, 91], "rang": [2, 24, 34, 35, 38, 44, 51, 63, 68, 69, 70, 72, 87, 88, 90, 91], "typic": [2, 3, 21, 24, 39, 41, 51, 58, 66, 68, 69, 70, 71, 76, 77, 79, 98], "inclus": [2, 42], "clear": [2, 31, 32, 33, 40, 43, 44], "complet": [2, 4, 24, 31, 35, 38, 39, 44, 45, 46, 47, 51, 65, 78, 88, 92, 96, 98], "get_const": 2, "getconst": 2, "get_constant_symbol": 2, "getconstantsymbol": 2, "get": [2, 22, 23, 24, 34, 35, 37, 38, 39, 40, 41, 44, 46, 51, 52, 56, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99], "get_equ": 2, "getequ": 2, "control": [2, 23, 24, 31, 35, 37, 39, 40, 41, 44, 72, 87, 91, 92, 93, 94, 99, 100], "els": [2, 28, 32, 35, 51, 53, 68], "get_lambda_in_stag": 2, "getlambdainstag": 2, "local": [2, 20, 24, 44, 98], "correspond": [2, 20, 23, 34, 35, 38, 51, 74, 75, 76, 78, 79, 86, 87, 88, 98], "get_lever_stag": 2, "getleverstag": 2, "match": [2, 22, 23, 24, 28, 31, 35, 36, 39, 41, 44, 51, 52, 69, 71, 72, 73, 74, 75, 76, 77, 79, 94, 99], "qvector": [2, 22, 23, 24, 34], "num_lambda": 2, "101": [2, 39, 87], "nvalu": 2, "get_lever_valu": [2, 98, 100], "to_panda": [2, 22, 24, 31, 87, 98], "start": [2, 23, 24, 28, 31, 33, 35, 38, 41, 43, 44, 46, 51, 54, 61, 87, 98, 100], "go": [2, 44, 46, 51, 66, 70, 71, 72, 91, 97, 98], "panda": [2, 22, 24, 28, 35, 52, 89, 98], "retriev": [2, 38, 57], "get_lev": 2, "getlev": 2, "get_stag": 2, "getstag": 2, "thei": [2, 20, 22, 23, 24, 26, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 44, 46, 47, 66, 68, 69, 70, 71, 72, 78, 79, 80, 87, 90, 93, 94, 95, 96, 98, 99, 100], "insert_stag": 2, "insertstag": 2, "insert": 2, "posit": [2, 13, 23, 24, 26, 34, 35, 38, 40, 42, 77, 78, 90, 100], "is_nul": [2, 22, 23, 24, 33], "isnul": [2, 22, 23, 24], "lam": [2, 6, 98, 100], "per": [2, 23, 24, 26, 38, 40, 41, 47, 57, 78, 79, 80, 82, 83, 84, 85, 88, 96], "variabl": [2, 23, 24, 33, 35, 38, 41, 44, 65], "goe": [2, 98], "lever_nam": 2, "point": [2, 4, 22, 23, 24, 28, 31, 34, 35, 38, 40, 41, 43, 47, 77, 87, 89, 96, 98], "There": [2, 24, 35, 38, 40, 41, 46, 47, 51, 52, 62, 63, 68, 69, 72, 74, 75, 76, 77, 79, 86, 89, 91, 92, 95, 96, 98], "overload": [2, 34], "round": [2, 22, 34, 38, 40], "nearest": [2, 24], "num_lev": 2, "nlever": 2, "num_stag": 2, "nstage": 2, "prepend_stag": [2, 98], "prependstag": 2, "remove_equ": 2, "removeequ": 2, "now": [2, 22, 30, 34, 35, 39, 44, 46, 51, 67, 77, 79, 80, 87, 89, 90, 92, 96, 97, 100], "remove_lev": 2, "removelev": 2, "impact": [2, 23, 24, 31, 35, 98], "miss": [2, 35, 41, 93, 94], "re": [2, 35, 38, 39, 41, 44, 63, 69, 78, 80, 86, 91, 92, 96, 98], "set_const": 2, "setconst": 2, "set_default_equ": 2, "setdefaultequ": 2, "set_equ": [2, 98, 100], "setequ": 2, "standard_morph": [2, 23, 24, 31], "everi": [2, 23, 24, 31, 35, 37, 38, 39, 40, 41, 47, 52, 66, 72, 79, 87, 88, 89, 90, 96, 98], "y": [2, 6, 34, 38, 44, 51, 73, 78, 86, 87, 90], "symid": 2, "sym": 2, "present": [2, 35, 41, 49], "id": [2, 23, 24, 31, 43, 44, 68, 69, 73, 74, 75, 76], "uniqu": [2, 21, 24, 35, 87], "definit": [2, 34, 35, 38], "arg0": [2, 24], "null": [2, 22, 23, 24, 28, 33, 35, 38, 72, 77, 98], "exist": [2, 20, 24, 31, 33, 35, 38, 43, 44, 46, 65, 68, 79, 97, 98], "\u03bb": [2, 25, 35, 37, 100], "biosimspace_to_sir": [3, 7], "obj": [3, 23, 24, 30, 31, 68, 71], "biosimspac": [3, 35, 36, 44, 46, 49, 50, 51, 59, 97], "molecul": [3, 4, 11, 20, 21, 23, 24, 25, 28, 31, 34, 35, 36, 37, 43, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 63, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 96, 98, 99, 100], "openmm_to_sir": [3, 7], "rdkit_to_sir": [3, 7], "rdkit": [3, 24, 28, 35, 38, 41, 49, 50, 51, 52, 59, 93, 94], "sire_to_biosimspac": [3, 7], "sire_to_openmm": [3, 7], "sire_to_rdkit": [3, 7], "supported_format": [3, 4, 7, 21, 28, 67, 92], "format": [3, 4, 21, 24, 28, 30, 35, 36, 37, 38, 41, 43, 44, 46, 49, 54, 55, 59, 64, 66, 77, 82, 83, 84, 85, 87, 93, 97], "convers": [3, 32, 35, 36, 47, 59, 92], "selectormol": [3, 11, 23, 24, 31, 35, 52, 72, 77, 92], "input": [3, 4, 28, 31, 34, 35, 40, 44, 49, 51, 52, 53, 57, 65, 68, 69, 71, 87, 90, 92, 96], "to_biosimspac": [3, 7], "to_openmm": [3, 7], "to_rdkit": [3, 7, 24], "to_sir": [3, 7], "primari": [4, 28], "submodul": 4, "import": [4, 24, 25, 28, 33, 35, 37, 39, 40, 41, 44, 51, 52, 54, 55, 56, 57, 66, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 96, 97, 98, 99, 100], "sr": [4, 24, 28, 35, 37, 39, 40, 41, 44, 51, 52, 54, 56, 57, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "main": [4, 35, 44, 46, 47, 51, 71, 87], "gatewai": 4, "mostli": [4, 35, 85], "rare": [4, 24], "exampl": [4, 23, 24, 25, 28, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 51, 52, 53, 56, 57, 62, 66, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "parser": [4, 21, 29, 35, 39, 40, 51, 67], "defin": [4, 24, 34, 35, 38, 42, 44, 45, 71, 76, 85], "io": [4, 20, 21, 29, 33, 39, 92], "manipul": [4, 24, 35, 41, 49, 50, 55, 92, 97], "search": [4, 23, 24, 27, 29, 31, 35, 36, 41, 44, 49, 50, 52, 54, 59, 62, 74, 75, 76, 82, 83, 84, 85, 87, 92, 99], "behind": [4, 44], "unit": [4, 20, 22, 23, 24, 28, 29, 32, 34, 35, 36, 37, 38, 44, 46, 47, 49, 50, 53, 77, 79, 82, 83, 84, 85, 86, 88, 90, 91, 96, 98], "physic": [4, 34, 35, 40, 42, 49, 82, 83, 84, 85], "quantiti": [4, 24, 32, 35, 40], "proper": [4, 35], "space": [4, 22, 23, 24, 28, 31, 34, 35, 37, 38, 39, 40, 42, 60, 77, 87, 92, 98, 99], "vector": [4, 9, 22, 24, 28, 34, 35, 38, 40, 78, 86, 90, 91], "sphere": [4, 9, 22, 41, 80, 99], "flexibli": 4, "interact": [4, 31, 37, 39, 41, 61, 81, 89, 96, 98], "forc": [4, 23, 26, 35, 39, 40, 41, 46, 67, 98, 99], "atom": [4, 11, 21, 22, 23, 24, 25, 26, 28, 31, 32, 34, 35, 36, 37, 39, 40, 41, 43, 49, 52, 54, 56, 57, 58, 60, 62, 63, 64, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 97], "molecular": [4, 21, 23, 24, 28, 31, 34, 35, 37, 40, 41, 49, 50, 52, 54, 55, 56, 59, 60, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 97, 98, 99], "mm": [4, 23, 24, 29, 31, 37, 57, 81, 82, 83, 84, 86, 88], "mechan": [4, 35, 76, 81, 85, 88], "enabl": [4, 21, 24, 33, 35, 38, 41, 77, 79, 86, 91], "rapidli": 4, "associ": [4, 20, 21, 24, 31, 35, 40, 44, 49, 57, 82, 83, 84, 85, 92], "type": [4, 22, 23, 24, 25, 28, 31, 35, 36, 37, 39, 40, 41, 44, 51, 54, 61, 62, 65, 73, 74, 75, 76, 78, 79, 82, 85, 87, 92, 97, 99], "layer": [4, 35, 40], "stream": [4, 29, 30, 35, 66, 97], "pickl": [4, 35], "cross": [4, 35], "platform": [4, 24, 37, 46, 47, 92, 98, 99], "volum": [4, 34], "distanc": [4, 13, 26, 28, 34, 35, 36, 40, 41, 49, 54, 58, 77, 87, 96, 100], "boundari": [4, 24, 28, 31, 34, 35, 38, 41], "util": [4, 29, 33, 35], "miscellan": 4, "fit": [4, 22, 24], "neatli": 4, "api": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 35, 36, 44, 53, 98], "atomid": [4, 23, 24, 28, 68, 73, 74, 75, 76], "chainid": [4, 23, 24, 28, 70], "get_max_num_thread": [4, 28], "load_test_fil": [4, 28], "match_atom": [4, 28, 39], "measur": [4, 23, 28, 34, 35, 49, 50, 54, 93], "minimum_dist": [4, 28, 34, 35], "molid": [4, 23, 24, 28, 72], "save": [4, 15, 23, 24, 28, 30, 31, 33, 35, 36, 44, 49, 50, 54, 58, 65, 79, 91, 93, 96, 97, 98], "save_to_str": [4, 28, 35, 64], "segid": [4, 23, 24, 28, 71], "set_default_num_thread": [4, 28], "set_max_num_thread": [4, 28], "smart": [4, 23, 24, 28, 31, 35, 36, 49, 52, 54, 59, 94], "smile": [4, 23, 24, 28, 31, 35, 36, 49, 52, 54, 59, 92, 93, 95], "u": [4, 22, 24, 28, 35, 39, 40, 43, 53, 92], "use_mixed_api": [4, 28, 35], "use_new_api": [4, 28, 35], "use_old_api": [4, 28, 35], "tutorial_url": [4, 24, 28, 37, 39, 41, 52, 57, 65, 66, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "restraint": [4, 23, 24, 26, 29, 31, 35, 37, 54, 60], "get_coords_arrai": [8, 20], "resolve_path": [8, 20], "dcd": [8, 21, 35, 39, 66, 67, 87], "g87": [8, 21], "gtop": [8, 21], "mol2": [8, 21, 28, 35, 64, 67, 97], "pdb": [8, 20, 21, 24, 28, 35, 39, 52, 56, 64, 66, 67, 87, 97], "prm": [8, 21, 35, 39, 66, 67], "rst": [8, 21, 35, 39, 46, 66, 67], "rst7": [8, 21, 35, 67], "sdf": [8, 21, 24, 28, 35, 39, 62, 65, 67, 82, 97], "traj": [8, 21, 35, 39, 41, 52, 66, 67, 89], "trr": [8, 21, 35, 39, 66, 67], "xtc": [8, 21, 35, 39, 66, 67], "energytrajectori": [9, 22, 35, 98], "rangener": [9, 22, 25, 34], "torsion": [9, 22, 26, 28, 34, 35, 58, 75, 86], "transform": [9, 22, 24], "triangl": [9, 22], "create_quaternion": [9, 22], "get_align": [9, 11, 22, 24], "kabasch": [9, 22], "kabasch_fit": [9, 22], "pi": [9, 22], "amberangl": [10, 23], "amberbond": [10, 23], "amberdihpart": [10, 23], "amberdihedr": [10, 23], "angl": [10, 17, 22, 23, 24, 26, 28, 31, 32, 34, 35, 37, 39, 40, 49, 52, 54, 56, 57, 58, 79, 81, 82, 84, 85, 88, 89, 96], "bond": [10, 13, 23, 24, 25, 26, 28, 31, 35, 36, 37, 39, 41, 49, 52, 54, 56, 57, 58, 72, 77, 79, 81, 83, 84, 85, 86, 88, 89, 93, 94, 95, 96], "bondrestraint": [10, 23, 99, 100], "dihedr": [10, 22, 23, 24, 28, 31, 35, 37, 39, 49, 52, 54, 56, 57, 58, 76, 79, 81, 82, 83, 85, 86, 88, 89], "improp": [10, 22, 23, 24, 28, 31, 35, 39, 52, 54, 56, 57, 79, 81, 86, 88, 89, 91], "ljparamet": [10, 23], "selectorangl": [10, 23, 74, 83, 87], "selectorbond": [10, 23, 35, 52, 73, 77, 82, 87, 95], "selectordihedr": [10, 23, 75, 84], "selectorimprop": [10, 23, 35, 76, 85], "selectormangl": [10, 23, 74], "selectormbond": [10, 23, 35, 52, 73], "selectormdihedr": [10, 23], "selectormimprop": [10, 23], "atomidx": [11, 23, 24, 38, 68, 72, 73, 74, 75, 76], "atommap": [11, 23, 24, 31, 35, 39], "atommatch": [11, 24, 38, 52, 94, 95], "atommatchm": [11, 24, 38, 95], "atomnam": [11, 24, 38, 43, 68, 69, 70, 71, 73, 74, 75, 76, 91], "atomnum": [11, 24, 38, 68, 73, 74, 75, 76], "bondord": [11, 24, 35, 82], "chain": [11, 23, 24, 28, 31, 36, 54, 56, 57, 63, 69, 73, 74, 75, 76, 77, 82], "chainidx": [11, 24, 38, 70, 73, 74, 75, 76], "chainnam": [11, 24, 38, 70], "cursor": [11, 23, 24, 31, 35, 54, 57, 80, 82, 83, 84, 85, 91], "cursorsm": [11, 24], "element": [11, 22, 24, 35, 36, 39, 41, 52, 57, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97, 99], "minimis": [11, 23, 24, 31, 35, 40, 49, 51, 52, 54, 59, 91, 92, 98, 100], "molidx": [11, 24, 35, 38, 39, 41, 72, 89, 100], "molnam": [11, 24, 38, 72], "molnum": [11, 24, 38, 52, 72, 73, 74, 77, 99], "residx": [11, 24, 38, 41, 69, 72, 73, 74, 75, 76, 88, 93, 94], "resnam": [11, 24, 38, 41, 69, 70, 71, 72, 91, 99], "resnum": [11, 24, 38, 69, 73, 77, 78, 82, 83, 84], "residu": [11, 23, 24, 28, 31, 35, 36, 41, 54, 56, 57, 58, 62, 63, 68, 77, 78, 81, 82, 83, 84, 86, 87, 88, 89, 92, 93, 94, 95, 99], "segidx": [11, 24, 38, 71], "segnam": [11, 24, 38, 71], "segment": [11, 23, 24, 28, 31, 35, 38, 54, 56, 57, 63, 73, 74, 75, 76, 77, 82], "stereochemistri": [11, 24, 35, 41, 49, 82, 93], "trajectoryiter": [11, 24, 35, 39, 66, 87], "is_wat": [11, 24, 35], "selection_to_atom": [11, 24], "replica_exchang": [12, 25], "shrink_ghost_atom": [12, 25], "boresch": [13, 26, 35], "approx_equ": [14, 27, 38], "approx_great": [14, 27, 38], "approx_greater_equ": [14, 27, 38], "approx_less": [14, 27, 38], "approx_less_equ": [14, 27, 38], "approx_not_equ": [14, 27, 38], "delete_all_token": [14, 27, 38], "delete_token": [14, 27, 38, 77], "get_approx_epsilon": [14, 27, 38, 77], "get_min_protein_residu": [14, 27, 38, 72, 77], "get_protein_residue_nam": [14, 27, 38, 72, 77], "get_token": [14, 27, 38, 77], "has_token": [14, 27, 38], "set_approx_epsilon": [14, 27, 38, 77], "set_min_protein_residu": [14, 27, 38, 72, 77], "set_protein_residue_nam": [14, 27, 38, 72, 77], "set_token": [14, 27, 38, 77], "get_data_head": [15, 30], "get_header_properti": [15, 30], "set_header_properti": [15, 30], "forcefieldinfo": [16, 31, 35, 37], "clear_default_unit": [17, 32, 40], "length": [17, 20, 23, 24, 25, 26, 31, 32, 34, 35, 38, 40, 82, 86, 90, 91], "set_default_unit": [17, 32, 35, 40], "set_energy_unit": [17, 32, 40, 82, 88], "set_internal_unit": [17, 32, 35, 40, 82, 86, 87, 88], "set_length_unit": [17, 32, 82, 86, 87, 90], "set_mass_unit": [17, 32, 40], "set_quantity_unit": [17, 32], "set_si_unit": [17, 32, 35, 40, 82, 86, 88], "set_time_unit": [17, 32], "picomet": [17, 32, 35, 38, 40, 82, 86, 87], "nullprofil": [18, 33], "profil": [18, 33], "tabl": [18, 33, 38], "assert_import": [18, 33], "have_import": [18, 33], "try_import": [18, 33, 35], "try_import_from": [18, 33], "cartesian": [19, 28, 34, 37], "coordgroup": [19, 34], "periodicbox": [19, 34, 37], "triclinicbox": [19, 34, 35], "arrai": [20, 22, 24, 30, 34, 35, 87], "shape": 20, "natom": [20, 21, 23, 24, 28, 39, 57, 81, 92], "path": [20, 28, 35, 41, 44, 46, 51, 62, 64, 93], "directori": [20, 28, 33, 35, 39, 44, 46, 51, 65, 66], "auto_unzip": 20, "silent": [20, 28, 38, 39, 52], "fals": [20, 22, 23, 24, 28, 31, 33, 34, 35, 37, 38, 39, 41, 43, 79, 87, 91, 93, 94, 98], "resolv": [20, 41, 44, 46, 94], "download": [20, 28, 44, 51, 56, 62, 65, 71], "url": [20, 28, 35, 44, 46, 51, 52, 62, 65, 92], "place": [20, 23, 24, 28, 31, 34, 35, 38, 39, 40, 44, 51, 53, 68, 72, 78, 86, 87, 91, 92, 100], "full": [20, 23, 24, 31, 35, 38, 40, 41, 44, 46, 51, 62, 64, 68, 81, 82, 86, 91, 93, 98], "bzip2": 20, "doesn": [20, 23, 28, 35, 38, 40, 43, 44, 51, 65, 68, 73, 83, 84, 85, 96], "alphafold": 20, "structur": [20, 21, 35, 41, 44, 49, 52, 56, 59, 62, 67, 87, 92, 93, 94, 95], "unzip": [20, 28, 56, 62, 65, 71], "compress": [20, 21, 28, 39, 65, 67], "zip": 20, "silenc": [20, 28, 35], "screen": [20, 33, 35, 87, 93], "filenam": [20, 21, 28, 30, 31, 39, 41, 62, 64, 65, 93], "reader": [21, 35], "k": [21, 23, 26, 32, 40, 99, 100], "uiuc": 21, "eduresearchvmdpluginsmolfiledcdplugin": 21, "sireio": [21, 35, 39], "propptr": [21, 23, 24, 34], "moleculepars": [21, 35], "line": [21, 22, 23, 24, 28, 41, 44, 51, 62, 64, 65, 68, 69, 71, 79, 87, 96], "siresystem": 21, "count": [21, 22, 23, 24, 31, 35, 36, 72, 87, 93], "disable_parallel": 21, "disableparallel": 21, "disabl": [21, 23, 24, 28, 35, 37, 41, 42, 91], "pars": [21, 32, 35, 40, 44], "parallel": [21, 28, 35, 36], "happen": [21, 51], "serial": [21, 35], "enable_parallel": 21, "enableparallel": 21, "error_report": 21, "errorreport": 21, "error": [21, 22, 24, 33, 35, 38, 39, 40, 44, 51, 54, 65, 68, 69, 71, 79, 82, 83, 84, 85, 91, 94, 99], "isnt": [21, 34], "empti": [21, 22, 23, 24, 34, 73, 74, 75, 76, 79], "format_descript": 21, "formatdescript": 21, "descript": [21, 22, 24, 39, 46], "format_nam": 21, "formatnam": 21, "identifi": [21, 23, 24, 26, 28, 31, 36, 77, 87, 89, 97], "format_suffix": 21, "formatsuffix": 21, "get_fram": [21, 39], "getfram": 21, "frame": [21, 23, 24, 28, 31, 35, 36, 41, 49, 52, 58, 87, 91, 96, 98], "siremol": [21, 23, 24, 34, 52, 57, 68, 69, 70, 71, 72, 77, 79, 80, 94, 95, 97, 99], "has_warn": 21, "haswarn": 21, "warn": [21, 28, 33, 35, 41, 62, 93], "is_binary_fil": 21, "isbinaryfil": 21, "is_broken": 21, "isbroken": 21, "is_empti": [21, 22, 23, 24, 34], "isempti": [21, 22, 23, 24, 34], "is_fram": 21, "isfram": 21, "is_supplementari": 21, "issupplementari": 21, "supplementari": 21, "is_text_fil": 21, "istextfil": 21, "text": [21, 28, 33, 35, 39, 43, 46, 67, 94], "is_topologi": 21, "istopologi": 21, "topologi": [21, 28, 35, 39, 65, 67, 87, 98], "num_atom": [21, 23, 24, 28, 31, 39, 52, 56, 62, 63, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 87, 92, 97, 98, 99], "whose": [21, 23, 24, 31, 38, 41, 44, 73, 77], "restart": [21, 35, 39, 67, 92], "num_fram": [21, 23, 24, 31, 39, 52, 66, 87], "nframe": [21, 23, 24, 39], "set_use_parallel": 21, "setuseparallel": 21, "size": [21, 22, 23, 24, 31, 35, 37, 38, 39, 41, 42, 52, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 94, 95, 97, 98, 99, 100], "supportedformat": 21, "human": [21, 40], "readabl": [21, 40], "to_system": 21, "tosystem": 21, "two": [21, 23, 25, 26, 28, 34, 35, 38, 39, 40, 41, 44, 59, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 86, 87, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100], "earlier": [21, 46, 79], "overwritten": 21, "uses_parallel": 21, "usesparallel": 21, "depend": [21, 24, 28, 35, 38, 39, 44, 47, 51, 69, 72, 86, 91, 92, 96], "thread": [21, 22, 28, 35, 37, 41], "worth": [21, 44, 65, 98], "check": [21, 23, 28, 35, 40, 44, 46, 53, 66, 98], "last": [21, 34, 38, 41, 44, 46, 51, 68, 69, 71, 72, 82, 83, 84, 87, 89, 95, 99], "write_to_fil": 21, "writetofil": 21, "alia": [21, 23, 61], "gro87": [21, 35, 64, 67], "grotop": [21, 35, 39, 67], "pdb2": [21, 35], "amberprm": [21, 35], "charmmpsf": [21, 35], "amberrst": [21, 35, 39], "amberrst7": 21, "extract": [21, 23, 24, 35, 37, 38, 43, 44, 52, 82, 83, 84, 85, 92, 95, 96, 97], "necessari": [21, 42], "total": [21, 24, 31, 33, 38, 39, 52, 63, 77, 78, 82, 83, 84, 85, 88, 89, 91], "num_molecul": [21, 23, 24, 31, 39, 62, 65, 66, 72, 92, 97], "nmolecul": [21, 23, 24, 92], "parse_warn": 21, "parsewarn": 21, "ambertraj": [21, 39], "gromac": [21, 28, 34, 35, 39, 49, 66, 67, 92], "xdr": [21, 39, 67], "trajectori": [21, 22, 23, 24, 28, 31, 35, 36, 37, 49, 50, 52, 54, 55, 67, 96], "organis": [22, 35], "timestep": [22, 23, 24, 31, 35, 37, 52, 96, 98, 99, 100], "record": [22, 33, 35], "kinet": [22, 24, 98], "potenti": [22, 23, 24, 26, 31, 35, 37, 38, 41, 81, 92], "window": [22, 24, 35, 37, 44, 51, 53, 98], "row": [22, 24, 33, 39, 87, 89], "column": [22, 28, 33, 35, 39, 41, 68, 89], "same": [22, 23, 24, 25, 26, 31, 34, 35, 38, 39, 40, 41, 51, 66, 67, 68, 71, 72, 73, 77, 79, 80, 82, 86, 87, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100], "intern": [22, 24, 35, 40, 82, 88, 91, 97, 98], "generalunit": [22, 23, 24, 28, 32, 35, 36], "energy_unit": 22, "fro": 22, "sireunit": [22, 23, 24, 32, 34], "time_unit": [22, 24, 87], "sort": [22, 34, 35], "earliest": [22, 47], "latest": [22, 35, 47, 51, 53], "3x3": [22, 24], "3d": [22, 28, 34, 35, 36, 40, 86, 87, 93], "checked_offset": 22, "checkedoffset": 22, "offset": 22, "sireerror": [22, 23, 24, 34, 68, 82], "invalid_index": [22, 23, 24, 34, 68], "column0": 22, "column1": 22, "column2": 22, "covari": 22, "p": [22, 24, 33, 34, 35, 37, 38, 39, 40, 51, 57, 66, 79, 87, 92, 96, 98], "q": [22, 32, 40], "against": [22, 23, 24, 31, 35, 38, 39, 41, 44, 47, 87, 91], "min": [22, 38, 87], "len": [22, 68, 69], "determin": [22, 24, 39, 41, 42, 87, 93], "diagon": 22, "diagonalis": 22, "eigenvalu": 22, "boost": [22, 34, 35], "tupl": [22, 34, 86, 90], "null_typ": [22, 34], "enforce_symmetr": 22, "enforcesymmetr": 22, "ensur": [22, 28, 34, 35, 38, 39, 43, 44, 45, 47, 51, 68, 72, 82, 83, 84, 85, 91, 92, 98], "symmetr": [22, 23, 34], "done": [22, 87, 89], "copi": [22, 24, 31, 34, 35, 41, 44, 47, 72, 79, 97, 99], "upper": 22, "lower": [22, 35, 39, 78, 92], "left": [22, 34, 40, 41, 91, 94], "realli": [22, 39, 40, 41, 43, 44, 53, 98], "matrici": 22, "know": [22, 35, 38, 44, 53, 68, 71, 83, 84, 85], "lost": [22, 35, 43, 51, 67, 93], "symmetri": 22, "due": [22, 35], "get_principal_ax": 22, "getprincipalax": 22, "obtain": [22, 82, 83, 84, 85, 88, 92], "princip": 22, "ax": [22, 87], "highest": [22, 39, 40], "lowest": 22, "invers": [22, 24, 34, 37], "math_error": 22, "cannot": [22, 32, 33, 37, 38, 66, 94], "is_diagon": 22, "isdiagon": 22, "is_ident": 22, "isident": 22, "is_symmetr": 22, "issymmetr": 22, "row0": 22, "row1": 22, "row2": 22, "set_to_ident": 22, "settoident": 22, "single_value_decomposit": 22, "singlevaluedecomposit": 22, "decomposit": [22, 35], "v": [22, 39, 40, 41, 44, 51, 86], "svd": 22, "trace": [22, 23, 24, 41, 91], "transpos": 22, "xx": [22, 97], "xy": 22, "xz": 22, "yx": 22, "yy": 22, "yz": 22, "zx": 22, "zy": 22, "zz": 22, "safe": [22, 28, 35], "copyabl": 22, "streamabl": 22, "guarante": [22, 24, 68, 72], "sequenc": [22, 66, 93], "accident": [22, 44, 51], "repeat": [22, 77], "detach": 22, "share": [22, 28, 31, 34, 35, 44, 51, 53], "storag": [22, 24, 34, 39, 51, 97], "get_stat": 22, "getstat": [22, 92], "state": [22, 23, 24, 25, 31, 37, 39, 41, 49, 69, 92, 97, 98, 100], "truli": [22, 34], "wish": [22, 37, 39, 46, 99], "lock": 22, "while": [22, 23, 24, 31, 35, 38, 39, 40, 41, 44, 46, 47, 51, 52, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 97, 98, 99, 100], "locked_rand": 22, "maxval": 22, "minval": 22, "locked_rand_norm": 22, "locked_randnorm": 22, "deviat": [22, 87, 91], "varianc": 22, "locked_vector_on_spher": 22, "locked_vectoronspher": 22, "radiu": [22, 24, 38, 79, 80, 99], "nrand": 22, "fill": [22, 41], "replac": [22, 35, 44, 51], "nrand_norm": 22, "nrandnorm": 22, "drawn": 22, "nvector_on_spher": 22, "nvectoronspher": 22, "rand": 22, "rand53": 22, "high": [22, 28, 41, 77, 82, 83, 84, 85, 92, 99], "precis": [22, 23, 24, 31, 34, 35, 37, 39, 40, 82, 83, 84, 85, 86], "rand_bool": 22, "randbool": 22, "rand_int": 22, "randint": 22, "32bit": 22, "32": [22, 52, 57, 68, 69, 70, 73, 74, 77, 78, 81, 83, 87, 88, 91, 94, 95], "rand_int64": 22, "randint64": 22, "64bit": 22, "64": [22, 44, 51, 52, 68, 69, 70, 71, 72, 77, 87], "long": [22, 23, 24, 35, 40, 44, 96, 97], "rand_norm": 22, "randnorm": 22, "seed": [22, 35], "anoth": [22, 24, 34, 35, 38, 51, 59, 60, 67, 68, 69, 70, 71, 72, 73, 77, 78, 87, 90, 94, 95, 96], "explicit": [22, 38, 42], "seed_glob": 22, "seedglob": 22, "set_stat": 22, "setstat": 22, "incompatible_error": [22, 23, 24, 34, 82], "unlock": 22, "vector_on_spher": 22, "vectoronspher": 22, "arg": [22, 23, 24, 25, 26, 28, 31, 33, 38, 41, 69, 72, 77, 87], "three": [22, 24, 26, 28, 34, 38, 40, 41, 52, 74, 75, 76, 83, 85, 86, 88, 90, 99, 100], "four": [22, 28, 34, 35, 47, 70, 75, 76, 84, 85, 86], "ly": [22, 69, 70, 72, 77], "plane": [22, 34, 76], "imagin": [22, 39, 76], "am": [22, 34], "happi": [22, 44, 45, 53], "welcom": [22, 42, 43, 44, 45], "suggest": [22, 45, 92], "around": [22, 34, 35, 40, 41, 75, 84, 85, 90, 91, 93, 98, 99], "physunit": [22, 23, 24, 34, 40], "improper_angl": [22, 28, 86], "improperangl": 22, "acut": [22, 34], "line03": 22, "line12": 22, "triangle1": 22, "point0": [22, 34], "point1": [22, 34], "point2": [22, 34], "triangle2": 22, "point3": [22, 34], "vector03": 22, "vector12": 22, "everyth": [22, 24, 35, 38, 51, 53, 54], "appli": [22, 23, 24, 25, 28, 31, 35, 42, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 96, 99], "amount": [22, 23, 24, 31, 33, 41, 61, 67, 78, 91, 96], "translat": [22, 24, 34, 35, 41, 58, 91], "togeth": [22, 34, 35, 38, 39, 40, 41, 44, 47, 53, 82, 83, 84, 85, 99], "center": [22, 23, 24, 31, 33, 34, 36, 37, 38, 39, 74, 78, 80, 85, 86, 87, 90, 91, 99], "rotat": [22, 24, 34, 35, 41, 58, 91], "revers": [22, 38, 39, 41, 68, 70, 98], "rotation_cent": 22, "rotationcent": 22, "rotation_matrix": [22, 34], "rotationmatrix": [22, 34], "rotation_quaternion": 22, "rotationquaternion": 22, "quaternion": [22, 24, 90], "translation_delta": 22, "translationdelta": 22, "angle0": 22, "angle1": 22, "angle2": 22, "line0": 22, "line1": 22, "line2": 22, "vector0": [22, 34], "vector1": [22, 34], "vector2": [22, 34], "ignor": [22, 23, 24, 28, 31, 35, 37, 51, 77, 94, 98], "argument": [22, 23, 24, 28, 31, 32, 33, 35, 37, 38, 39, 41, 44, 51, 56, 57, 62, 64, 65, 68, 69, 70, 71, 72, 78, 87, 90, 92, 93, 98, 99], "interpret": [22, 24, 28, 35, 40, 49], "degre": [22, 24, 34, 40, 90, 91], "radian": [22, 24, 32, 40, 83, 84, 85, 90], "supersed": [22, 24], "getalign": [22, 24], "kabaschfit": 22, "\u03c0": 22, "141592653589793": 22, "siremm": [23, 57], "theta": [23, 57, 81], "theta0": [23, 26], "to_express": 23, "toexpress": 23, "r": [23, 57, 81], "r0": [23, 26, 35, 99, 100], "phi": [23, 57, 81], "phase": [23, 34, 35, 37], "assert_contain": [23, 24], "assertcontain": [23, 24], "moleculeview": [23, 24, 28, 31, 56, 57], "assert": [23, 24, 33, 34, 44], "missing_atom": [23, 24, 68], "assert_has_metadata": [23, 24], "asserthasmetadata": [23, 24], "metakei": [23, 24], "metadata": [23, 24, 35, 77, 92, 98], "missing_properti": [23, 24, 79], "assert_has_properti": [23, 24], "asserthasproperti": [23, 24], "assert_same_molecul": [23, 24], "assertsamemolecul": [23, 24], "albeit": [23, 24], "perhap": [23, 24, 47, 72], "moleculedata": [23, 24, 35], "atom0": [23, 82, 83, 84, 85], "atom1": [23, 82, 83, 84, 85], "atom2": [23, 83, 84, 85], "selector_atom_": [23, 24, 68, 69, 72], "selector": [23, 24, 38, 52, 68, 69, 70, 71, 72, 77, 79, 94, 95], "slice": [23, 24, 63, 66, 68, 69, 70, 73, 74, 75, 76, 77, 82, 87], "selector_chain_": [23, 24, 70], "involv": [23, 24, 25, 35, 37, 38, 73, 74, 75, 76, 82, 83, 84, 85, 91, 95, 96, 99], "missing_chain": [23, 24, 71], "duplicate_chain": [23, 24], "const_data": [23, 24], "constdata": [23, 24], "edit": [23, 24, 31, 34, 35, 39, 42, 43, 44, 49, 51, 54, 57, 82, 90, 91], "cutgroup": [23, 24, 34], "cgid": [23, 24], "missing_cutgroup": [23, 24], "duplicate_cutgroup": [23, 24], "selector_cutgroup_": [23, 24], "delete_all_fram": [23, 24, 31], "deleteallfram": [23, 24], "delete_fram": [23, 24, 31, 87], "deletefram": [23, 24], "get_link": [23, 24], "getlink": [23, 24], "has_link": [23, 24], "haslink": [23, 24], "has_metadata": [23, 24], "hasmetadata": [23, 24], "has_properti": [23, 24, 31], "hasproperti": [23, 24], "angleid": [23, 74], "is_link": [23, 24], "islink": [23, 24], "is_same_molecul": [23, 24], "issamemolecul": [23, 24], "is_selector": [23, 24], "isselector": [23, 24], "help": [23, 24, 35, 38, 39, 43, 44, 45, 46, 47, 50, 51, 71, 72, 82, 83, 84, 85, 92, 93], "distinguish": [23, 24], "load_fram": [23, 24, 31, 35, 66], "loadfram": [23, 24], "lazyevalu": [23, 24, 35], "metadata_kei": [23, 24], "metadatakei": [23, 24], "metadata_typ": [23, 24], "metadatatyp": [23, 24], "idx": [23, 24, 28, 38, 68, 70, 71], "auto_reduc": [23, 34], "befor": [23, 24, 35, 38, 43, 44, 45, 46, 47, 68, 89, 90, 91, 92, 94, 95, 99], "move": [23, 24, 25, 31, 34, 35, 37, 39, 44, 47, 49, 54, 58, 66, 72, 98, 99], "mover_angle_": 23, "mover": [23, 24], "num_chain": [23, 24, 31, 56], "nchain": [23, 24], "num_cutgroup": [23, 24], "ncutgroup": [23, 24], "num_residu": [23, 24, 31, 39, 52, 56, 62, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 92, 97], "nresidu": [23, 24, 92], "num_seg": [23, 24, 31, 56], "nsegment": [23, 24], "num_view": [23, 24], "nview": [23, 24], "most": [23, 24, 35, 37, 38, 39, 40, 44, 46, 51, 54, 68, 69, 71, 72, 82, 83, 84, 85, 87, 90, 91, 98], "viewsofmol": [23, 24, 35], "property_kei": [23, 24, 31, 57, 81, 82], "propertykei": [23, 24], "property_typ": [23, 24], "propertytyp": [23, 24], "selector_residue_": [23, 24, 69], "resid": [23, 24, 69, 70], "missing_residu": [23, 24], "save_fram": [23, 24, 31, 90, 91], "savefram": [23, 24], "selector_segment_": [23, 24, 71], "missing_seg": [23, 24], "select_al": [23, 24], "selectal": [23, 24], "select_all_atom": [23, 24], "selectallatom": [23, 24], "select_all_chain": [23, 24], "selectallchain": [23, 24], "select_all_cutgroup": [23, 24], "selectallcutgroup": [23, 24], "select_all_residu": [23, 24], "selectallresidu": [23, 24], "select_all_seg": [23, 24], "selectallseg": [23, 24], "selected_al": [23, 24], "selectedal": [23, 24], "select": [23, 24, 31, 35, 37, 39, 41, 51, 52, 66, 73, 90, 99], "atomselect": [23, 24], "to_list": [23, 24], "tolist": [23, 24], "to_molecul": [23, 24], "tomolecul": [23, 24], "to_selector": [23, 24], "toselector": [23, 24], "bondid": [23, 24, 73], "mover_bond_": 23, "centroid": 23, "group": [23, 24, 34, 35, 38, 41, 46, 73, 93, 94, 95], "atoms0": [23, 24, 26, 99, 100], "restrain": [23, 35, 99], "atoms1": [23, 24, 26, 99, 100], "is_atom_restraint": 23, "isatomrestraint": 23, "is_centroid_restraint": 23, "iscentroidrestraint": 23, "act": [23, 31, 37, 42, 72, 98, 99], "width": [23, 26, 33, 35, 41, 93, 99], "harmon": [23, 26, 35, 37, 57, 81, 99], "molecu": [23, 35], "pair": [23, 26, 37, 38, 44, 73, 81, 87, 88, 96, 99], "particl": [23, 96, 99], "restaint": 23, "spheric": [23, 99], "ith": [23, 31], "atom_restraint": 23, "atomrestraint": 23, "centroid_restraint": 23, "centroidrestraint": 23, "has_atom_restraint": 23, "hasatomrestraint": 23, "has_centroid_restraint": 23, "hascentroidrestraint": 23, "is_restraint": 23, "isrestraint": 23, "num_atom_restraint": 23, "natomrestraint": 23, "num_centroid_restraint": 23, "ncentroidrestraint": 23, "num_restraint": 23, "nrestraint": 23, "set_nam": [23, 24], "setnam": 23, "atom3": [23, 84, 85], "dihedralid": [23, 75], "mover_dihedral_": 23, "improperid": [23, 76], "mover_improper_": 23, "lennard": [23, 78, 98], "jone": [23, 78, 98], "sigma": [23, 57, 78, 79], "epsilon": [23, 38, 57, 77, 78, 79], "b": [23, 34, 35, 43, 44, 70], "combiningrul": 23, "rule": [23, 33, 35, 38, 40], "combine_arithmet": 23, "combinearithmet": 23, "combine_geometr": 23, "combinegeometr": 23, "geometr": [23, 38], "combining_rul": [23, 37, 57, 81], "dummi": [23, 35, 38, 72, 77, 97], "cljparamet": 23, "from_and_b": 23, "fromaandb": 23, "12": [23, 24, 38, 39, 52, 57, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 94, 95, 98, 99], "6": [23, 24, 25, 35, 38, 39, 40, 44, 50, 52, 54, 57, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "from_r_min_and_epsilon": 23, "fromrminandepsilon": 23, "rmin": 23, "minimum": [23, 28, 34, 35, 38, 72, 77], "depth": 23, "epilson": 23, "sigmar": 23, "16": [23, 24, 38, 39, 52, 57, 63, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 95, 98, 99], "from_sigma_and_epsilon": 23, "fromsigmaandepsilon": 23, "is_dummi": 23, "isdummi": 23, "sqrt_epsilon": 23, "sqrtepsilon": 23, "sqrt_sigma": 23, "sqrtsigma": 23, "clj": 23, "zero_l_j": 23, "zerolj": 23, "__len__": [23, 24], "parent": [23, 24, 33, 35, 68, 69, 70, 71, 72], "intersect": [23, 24], "mover_selectorangle_": 23, "no_default": [23, 24, 41], "orthograph": [23, 24, 41], "protein": [23, 24, 35, 36, 41, 56, 67, 68, 69, 70, 71, 72, 77, 80, 87, 93, 99], "water": [23, 24, 35, 36, 39, 41, 52, 72, 77, 86, 88, 89, 93, 94, 97, 99], "ion": [23, 24, 35, 38, 41, 77, 93], "rest": [23, 24, 41, 90], "ball_and_stick": [23, 24, 41], "cartoon": [23, 24, 35, 41], "hyperbal": [23, 24, 41], "licoric": [23, 24, 35, 41], "ribbon": [23, 24, 41], "rocket": [23, 24, 41], "rope": [23, 24, 41], "spacefil": [23, 24, 35, 41], "surfac": [23, 24, 41], "tube": [23, 24, 41], "smooth": [23, 24, 31, 35, 36, 87, 98], "stage_paramet": [23, 24, 41], "nglview": [23, 24, 31, 35, 36, 62], "viewer": [23, 24, 31, 41, 79], "jupyt": [23, 24, 31, 41, 51, 61, 62, 87, 89, 90, 93], "captur": [23, 24], "nglviewer": [23, 24, 49, 62], "displai": [23, 24, 41], "cheatsheet": [23, 24, 31, 87], "openbiosim": [23, 24, 28, 31, 42, 44, 45, 46, 51, 62, 65, 71], "By": [23, 24, 28, 35, 37, 40, 41, 44, 78, 87, 93, 96, 98, 99, 100], "box": [23, 24, 28, 31, 34, 35, 36, 39, 87, 97], "choos": [23, 24, 31, 35, 36, 38, 39, 46, 49, 51, 92, 96, 97, 98], "averag": [23, 24, 31, 39, 41, 87], "recommend": [23, 24, 31, 35, 39, 41, 43, 44, 51, 93], "perspect": [23, 24, 41, 81], "accept": [23, 24, 25, 35, 42, 43, 44, 45, 46, 47, 62, 91], "color": [23, 24, 35, 36, 79], "dict": [23, 24, 31], "mover_selectorbond_": 23, "mover_selectordihedral_": 23, "mover_selectorimproper_": 23, "multi": [23, 24, 38, 41, 49, 72, 73], "func": [23, 24], "actual": [23, 24, 28, 38, 39, 41, 82, 86, 92, 100], "keyword": [23, 24, 35, 38, 41, 44, 90], "self": [23, 24, 34], "apply_reduc": [23, 24, 31, 35, 78, 88], "reduction_func": [23, 24], "reduc": [23, 24, 31, 34, 35, 44, 61, 65, 78, 82, 83, 84, 85, 96], "reduct": [23, 24, 31, 34, 35, 78], "isn": [23, 24, 28, 31, 53, 92], "selectorm_cutgroup_": [23, 24], "selectorm": [23, 24, 35, 72, 77, 99], "cutoff_typ": [23, 24, 31, 37, 96], "save_frequ": [23, 24, 31, 37, 52, 96, 98], "energy_frequ": [23, 24, 31, 37, 98], "frame_frequ": [23, 24, 31, 37, 98], "save_veloc": [23, 24, 31, 37], "constraint": [23, 24, 31, 34, 37, 96, 99], "swap_end_st": [23, 24, 31, 37, 98], "ignore_perturb": [23, 24, 31, 37, 98], "temperatur": [23, 24, 25, 31, 32, 35, 37, 40, 98, 99, 100], "pressur": [23, 24, 31, 35, 37], "shift_delta": [23, 24, 31, 37, 98], "coulomb_pow": [23, 24, 31, 37, 98], "fix": [23, 24, 31, 34, 35, 37, 38, 39, 44, 45, 46, 47, 51, 53, 60, 85, 89], "devic": [23, 24, 31, 37], "pme": [23, 24, 31, 35, 37, 96], "rf": [23, 24, 31, 37], "overridden": [23, 24, 31], "individu": [23, 24, 31, 35, 38, 39, 40, 41, 42, 44, 47, 66, 78, 79, 82, 86, 87, 89, 94, 95], "overrid": [23, 24, 31, 37, 41, 96], "veloc": [23, 24, 25, 31, 35, 37, 39, 57, 67, 79, 81, 87, 92, 96, 98], "aren": [23, 24, 31, 35, 37, 41, 43, 91], "often": [23, 24, 31, 35, 41, 44, 63, 65, 68, 71, 76, 77, 88], "guess": [23, 24, 28, 31, 33, 64, 96], "swap": [23, 24, 25, 31, 35, 37, 98], "microcanon": [23, 24, 31, 37], "nve": [23, 24, 31, 37], "canon": [23, 24, 31, 37], "nvt": [23, 24, 31, 37, 99], "electrostat": [23, 24, 31, 41, 98], "van": [23, 24, 31, 98], "der": [23, 24, 31, 98], "waal": [23, 24, 31, 98], "soften": [23, 24, 31, 35, 37], "creation": [23, 24, 31, 35, 59, 98], "delet": [23, 24, 31, 35, 38, 51, 66, 77, 98], "coulomb": [23, 24, 31, 32, 37, 39, 40, 52, 57, 81, 89], "parmet": [23, 24, 31], "gpu": [23, 24, 31, 37, 92, 96], "cuda_device_id": [23, 24, 31], "similar": [23, 24, 31, 39, 41, 46, 53, 62, 63, 68, 69, 77, 89, 90, 91, 99], "cuda": [23, 24, 31, 37], "desir": [23, 24, 31, 37, 41, 44, 51, 86, 87], "mix": [23, 24, 31, 37, 39, 41, 68, 73, 74, 75, 76, 82, 83, 84, 85], "addit": [23, 24, 31, 33, 35, 39, 40, 41, 44, 51, 66, 70, 78, 82, 83, 84, 85, 87, 90, 91, 96, 98], "evaluatorm": [23, 24], "search_str": [23, 24], "selectresult": [23, 24], "as_search": [23, 24, 94, 95], "include_hydrogen": [23, 24, 31, 41, 93, 94, 95], "hydrogen": [23, 24, 28, 31, 35, 38, 41, 52, 57, 72, 73, 74, 75, 76, 77, 78, 82, 83, 86, 90, 91, 93, 94, 95, 96, 97], "to_molecule_group": [23, 24, 31], "tomoleculegroup": [23, 24], "moleculegroup": [23, 24, 31, 35], "to_select_result": [23, 24], "toselectresult": [23, 24], "updat": [23, 24, 25, 31, 33, 35, 44, 46, 51, 79, 89, 90, 97, 98], "moldata": [23, 24], "assert_contains_metadata": 24, "assertcontainsmetadata": 24, "atomproperti": [24, 35, 78], "piec": [24, 46, 53], "assert_contains_properti": 24, "assertcontainsproperti": 24, "cg_atom_idx": 24, "cgatomidx": 24, "atomeditor": 24, "editor": [24, 34, 35, 79], "second": [24, 25, 32, 34, 40, 44, 47, 66, 72, 73, 75, 76, 78, 85, 87, 90, 93, 95, 98, 100], "attach": [24, 28], "is_within_chain": 24, "iswithinchain": 24, "is_within_residu": 24, "iswithinresidu": 24, "is_within_seg": 24, "iswithinseg": 24, "mover_atom_": 24, "property_as_properti": 24, "propertyasproperti": 24, "propertyptr": 24, "property_as_vari": 24, "propertyasvari": 24, "qvariant": 24, "whole": [24, 31, 34, 35, 41, 58, 71, 81, 90, 93, 96], "molinfo": 24, "build": [24, 28, 35, 39, 44, 46, 47, 55, 77], "selectorm_atom_": [24, 72], "partialmolecul": 24, "num_group": [24, 94, 95], "ngroup": [24, 57, 81], "to_unit": [24, 32], "tounit": 24, "selectorm_chain_": 24, "selectorm_residue_": 24, "selectorm_segment_": 24, "molview": 24, "Be": [24, 51, 53, 68, 69, 70, 71, 99], "care": [24, 35, 68, 69, 70, 71, 99], "confus": [24, 38], "fifth": [24, 75], "whatev": [24, 41, 71, 73], "aromatic_bond": 24, "aromaticbond": 24, "aromat": [24, 41], "double_bond": [24, 82], "doublebond": 24, "from_rdkit": 24, "fromrdkit": 24, "from_s_d_f": 24, "fromsdf": 24, "is_defin": 24, "isdefin": 24, "is_doubl": 24, "isdoubl": 24, "is_singl": 24, "issingl": 24, "is_tripl": 24, "istripl": 24, "tripl": [24, 41, 74], "isromat": 24, "isaromat": 24, "single_bond": 24, "singlebond": 24, "tordkit": 24, "to_s_d_f": 24, "tosdf": 24, "triple_bond": 24, "triplebond": 24, "undefined_bond": 24, "undefinedbond": 24, "undefin": [24, 66], "value_as_doubl": 24, "valueasdoubl": 24, "chainproperti": 24, "atom_idx": 24, "indici": [24, 38, 68, 72, 73, 74, 75, 76, 99], "appear": [24, 42, 44, 47, 68, 82, 94, 98], "chaineditor": 24, "mover_chain_": 24, "res_idx": 24, "navig": [24, 51], "intend": [24, 40, 44], "commit": [24, 25, 35, 37, 42, 45, 46, 52, 79, 80, 82, 83, 84, 85, 90, 91, 96, 97, 98, 99, 100], "newli": [24, 35], "get_index": 24, "get_nam": 24, "get_numb": 24, "is_angl": 24, "is_atom": 24, "is_bond": 24, "is_chain": 24, "is_dihedr": 24, "is_improp": 24, "is_intern": 24, "is_molecul": 24, "is_residu": 24, "is_same_editor": 24, "seen": [24, 43, 44, 79, 86, 92, 95], "is_seg": 24, "make_whol": [24, 31, 34, 35], "won": [24, 46, 94, 99], "across": [24, 28, 31, 33, 34, 35, 36, 38, 41, 44, 46, 49, 52, 54, 57, 58, 72, 73, 79], "suitabl": 24, "renumb": [24, 35], "distinct": 24, "idenfi": 24, "randomli": 24, "alreadi": [24, 31, 32, 44, 46, 47, 51, 53, 62, 72, 77, 79, 86, 94], "henc": [24, 47, 68, 88, 96, 98, 99], "mass": [24, 31, 32, 35, 36, 37, 40, 57, 78, 79, 80, 81, 86, 87, 90, 91, 95, 99], "set_numb": 24, "underpin": 24, "conveni": [24, 25, 35, 69, 82, 83, 84, 85, 93, 94, 96], "easier": [24, 25, 35, 36, 39, 41, 43, 44, 46, 47, 55, 58, 72, 87, 88, 96, 97, 98], "abl": [24, 35, 51, 79, 99], "plu": [24, 25, 35, 66, 88, 92, 96, 99], "reflect": 24, "date": [24, 35, 46], "constrain": [24, 96, 99], "current_energi": 24, "current_kinetic_energi": 24, "current_potential_energi": 24, "request": [24, 35, 37, 43, 44, 45, 46, 47, 48, 68, 77], "current_spac": 24, "current_step": 24, "step": [24, 35, 37, 38, 46, 51, 68, 90, 92, 94, 96, 98], "current_tim": 24, "elapsed_tim": 24, "elaps": 24, "energy_trajectori": [24, 31, 37, 98], "ensembl": [24, 37], "get_lambda": [24, 98], "noth": [24, 33, 38], "get_schedul": [24, 98], "info": [24, 33, 37, 39, 40, 43, 51, 68, 69, 71, 79, 82], "max_iter": 24, "10000": 24, "maximum": [24, 28, 34, 35, 38, 41, 78, 92], "lambda_window": [24, 37, 98], "auto_fix_minimis": 24, "picosecond": [24, 32, 37, 39, 40, 66, 96, 98], "femtosecond": [24, 37, 96, 98], "5000": 24, "50": [24, 38, 39, 40, 41, 57, 68, 71, 72, 77, 81, 87, 89, 91, 96], "frequenc": [24, 37, 41], "alwai": [24, 35, 38, 40, 47, 51, 67, 68, 72, 86, 100], "interest": [24, 41, 42, 44, 46, 87], "exit": [24, 92], "few": [24, 37, 38, 51, 57, 72, 82, 91, 98], "Such": 24, "failur": [24, 35, 51], "indic": [24, 35, 38, 39, 44, 47], "minims": 24, "set_ensembl": 24, "fundement": 24, "set_lambda": [24, 25, 98], "context": [24, 35, 37, 92, 98, 99], "set_schedul": [24, 98], "step_spe": 24, "speed": [24, 35, 39, 40, 41, 44, 96, 98], "time_spe": 24, "elapsed_unit": 24, "nanosecond": [24, 33, 96], "dai": [24, 40, 96, 98], "walltim": 24, "runtim": [24, 35], "much": [24, 35, 40, 41, 43, 44, 46, 53, 67, 88, 95, 96, 98], "consum": [24, 35], "chemic": [24, 36, 72, 73, 74, 75, 76, 85, 95], "easi": [24, 28, 35, 39, 44, 79, 82, 83, 84, 85, 92, 93], "veri": [24, 31, 35, 37, 39, 40, 41, 44, 68, 78, 79, 90, 98], "low": [24, 41], "pointer": [24, 35], "privat": [24, 35, 42, 44], "elementdata": 24, "declar": 24, "elementdb": 24, "cpp": [24, 35, 44], "actinid": 24, "alkali_earth_met": 24, "alkaliearthmet": 24, "alkali": 24, "earth": 24, "metal": [24, 37], "alkali_met": 24, "alkalimet": 24, "biolog": [24, 38], "nobl": [24, 38], "ga": [24, 34, 37], "halogen": [24, 38], "preclud": 24, "iron": 24, "potassium": 24, "calcium": 24, "biological_el": 24, "biologicalel": 24, "coupl": 24, "proton": [24, 35, 38, 40, 69], "blue": [24, 41], "colour": [24, 35], "bond_order_radiu": 24, "bondorderradiu": 24, "rgb": [24, 41], "255": [24, 41, 69, 87], "color_nam": [24, 79], "covalent_radiu": [24, 79], "covalentradiu": 24, "coval": [24, 79], "element_with_mass": 24, "elementwithmass": 24, "closest": [24, 34, 35, 36], "green": [24, 41], "iupac": [24, 38], "lanthanid": 24, "too": [24, 31, 35, 38, 40, 49, 51, 52, 69, 70, 71, 72, 86, 87, 96], "big": 24, "problem": [24, 35, 45, 46, 53, 54, 89], "surpris": 24, "hear": 24, "hex_color": 24, "hex": [24, 41], "max_bond": 24, "maxbond": 24, "simultan": [24, 39], "languag": [24, 42], "noble_ga": 24, "noblega": 24, "num_proton": 24, "nproton": 24, "7": [24, 35, 37, 39, 44, 52, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "rare_earth": 24, "rareearth": 24, "red": [24, 41], "transition_met": 24, "transitionmet": 24, "transit": 24, "vdw_radiu": 24, "vdwradiu": 24, "molgroup": 24, "molgroupsbas": 24, "get_unique_numb": 24, "getuniquenumb": 24, "orer": 24, "therebi": [24, 28, 35, 49, 60], "keep": [24, 34, 44, 45, 47, 76, 85, 99, 100], "small": [24, 28, 35, 44, 53, 93, 99], "renam": [24, 33, 38, 66], "43": [24, 35, 39, 52, 68, 69, 70, 72, 76, 77, 79, 87, 89, 91, 94, 95, 99], "ala": [24, 28, 38, 39, 41, 52, 57, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99], "subgroup": 24, "ala49": 24, "49": [24, 39, 68, 69, 70, 72, 73, 74, 75, 77, 79, 80, 87, 89, 91, 94, 99], "ala49_0": 24, "all_ala49": 24, "seg": [24, 38, 80], "moleditor": 24, "posses": 24, "moleculeinfo": 24, "layout": [24, 68], "is_perturb": [24, 38, 97], "join": [24, 36, 44, 46, 53], "mover_molecule_": 24, "although": [24, 44], "sai": [24, 25, 35, 81], "reseditor": 24, "resproperti": 24, "mover_residue_": 24, "segproperti": 24, "segeditor": 24, "mover_segment_": 24, "indexerror": [24, 44, 68], "mol_num": 24, "stereoscopi": [24, 82], "is_down": 24, "isdown": 24, "is_not_stereo": 24, "isnotstereo": 24, "stereo": [24, 82], "is_up": 24, "isup": 24, "not_stereo": 24, "notstereo": 24, "process": [24, 34, 35, 38, 39, 44, 46, 47, 79, 90, 96], "frame_index": 24, "match_al": 24, "overwrit": 24, "autowrap": 24, "view0": 24, "view1": 24, "map0": [24, 28], "map1": [24, 28], "matcher": 24, "selectorm_atoms_": 24, "crd": [24, 28, 39, 41, 52, 57, 65, 67, 72, 73, 74, 75, 76, 80, 81, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99], "54": [24, 52, 68, 69, 70, 72, 76, 79, 87, 89, 91, 94, 95, 99], "03": [24, 52, 68, 69, 70, 76, 77, 79, 94, 95, 98, 99], "81": [24, 52, 63, 68, 76, 77, 79, 87, 94, 95, 99], "10": [24, 34, 35, 37, 38, 39, 40, 41, 43, 44, 51, 52, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99], "17": [24, 39, 52, 57, 63, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99], "22": [24, 35, 39, 51, 52, 57, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 90, 91, 92, 94, 99], "31": [24, 52, 57, 68, 69, 70, 74, 77, 80, 81, 83, 87, 91, 95, 99], "14": [24, 35, 38, 39, 52, 57, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 93, 94, 95, 98, 99], "71": [24, 68, 70, 77, 78, 87], "68": [24, 68, 69, 70, 77, 79, 87, 94], "62": [24, 52, 69, 70, 71, 77, 79, 87, 89, 94, 95], "29": [24, 35, 39, 52, 63, 68, 69, 70, 72, 73, 74, 77, 79, 87, 89, 90, 94, 95, 96, 98, 99], "59": [24, 52, 68, 70, 72, 77, 79, 87, 89, 94, 96], "cb": [24, 52, 57, 68, 69, 70, 71, 73, 75, 77, 79, 81, 82, 83, 84, 87, 89, 95, 99], "11": [24, 35, 39, 40, 43, 51, 52, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99], "05": [24, 40, 52, 68, 69, 70, 72, 79, 85, 86, 87, 91, 94, 95, 96, 99], "39": [24, 52, 57, 68, 69, 70, 72, 73, 74, 75, 77, 79, 81, 84, 87, 91, 95, 99], "26": [24, 52, 63, 68, 69, 71, 72, 73, 74, 77, 79, 87, 89, 90, 91, 95, 97, 99, 100], "hb1": [24, 73, 75, 77], "63": [24, 52, 68, 69, 70, 71, 72, 77, 79, 87, 94, 99], "98": [24, 39, 52, 63, 68, 69, 70, 72, 73, 74, 75, 77, 79, 87, 95, 98, 99], "07": [24, 40, 52, 68, 69, 70, 85, 94, 98, 99], "hb2": [24, 73, 75, 83], "13": [24, 35, 39, 52, 57, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 98, 99], "90": [24, 68, 69, 77, 87], "89": [24, 68, 77, 87, 88, 96], "80": [24, 57, 68, 70, 72, 77, 79, 81, 87, 91, 94, 96, 99], "hb3": [24, 73, 75, 79, 83, 94], "24": [24, 40, 52, 63, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 87, 89, 90, 91, 94, 95, 96, 97, 100], "55": [24, 52, 68, 69, 70, 72, 77, 79, 87, 91, 94, 95, 98, 99], "37": [24, 39, 44, 52, 57, 68, 69, 70, 74, 75, 76, 77, 79, 81, 84, 87, 89, 91, 94, 95, 99], "19": [24, 52, 57, 63, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 98, 99], "o": [24, 35, 38, 39, 52, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 94, 95, 97, 99], "94": [24, 52, 68, 69, 70, 72, 79, 87, 91, 94, 95, 98], "88": [24, 57, 68, 69, 72, 77, 79, 81, 87, 94, 99], "641": [24, 92], "hh31": [24, 52, 57, 72, 73, 74, 75, 79, 81, 82, 83, 84, 86, 94, 99], "45": [24, 35, 39, 52, 68, 69, 70, 72, 73, 74, 75, 77, 79, 87, 89, 91, 94, 95, 99], "44": [24, 39, 52, 63, 68, 70, 71, 72, 73, 74, 75, 77, 79, 80, 86, 87, 88, 89, 91, 94, 99], "ch3": [24, 52, 57, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 89, 94, 95, 99], "hh32": [24, 52, 57, 72, 73, 74, 75, 79, 81, 82, 83, 84, 94, 99], "20": [24, 34, 35, 38, 39, 40, 51, 52, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 87, 89, 90, 94, 98, 99], "hh33": [24, 52, 57, 72, 73, 74, 75, 79, 81, 82, 83, 84, 94, 99], "73": [24, 64, 68, 69, 70, 72, 77, 79, 87, 94, 99], "48": [24, 37, 39, 40, 52, 68, 69, 70, 72, 77, 79, 87, 89, 91, 94, 95, 99], "35": [24, 38, 39, 40, 52, 57, 68, 69, 70, 72, 73, 74, 77, 79, 81, 83, 87, 89, 91, 94, 95, 99], "34": [24, 35, 39, 52, 57, 68, 69, 70, 72, 74, 77, 79, 81, 83, 87, 89, 91, 95, 99], "96": [24, 70, 72, 77, 79, 87, 91, 98], "83": [24, 52, 68, 72, 77, 79, 87, 94, 95, 99], "41": [24, 39, 52, 57, 68, 69, 70, 72, 75, 77, 79, 81, 84, 87, 88, 89, 91, 98], "21": [24, 44, 51, 52, 57, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 94, 99], "33": [24, 52, 57, 68, 69, 70, 72, 73, 74, 77, 79, 81, 83, 87, 89, 91, 95, 99], "69": [24, 68, 69, 72, 77, 79, 87], "visualis": [25, 31, 36, 58, 91], "link_to_perturb": [25, 97], "those": [25, 31, 35, 38, 39, 41, 44, 51, 60, 73, 74, 75, 76, 79, 82, 83, 84, 85, 92, 93, 98, 99], "link_to_refer": [25, 97], "lam_val": 25, "replica0": 25, "replica1": 25, "rescale_veloc": 25, "replica": [25, 34], "exchang": 25, "hamiltonian": 25, "mont": 25, "carlo": 25, "decid": [25, 46, 51], "uniformli": [25, 34], "reject": [25, 42], "boolean": [25, 37, 79], "shrunk": 25, "seem": 25, "fewest": [25, 91], "nan": [25, 35, 98, 99], "treat": [26, 34, 37, 68, 86, 88], "receptor": 26, "ligand": [26, 35, 41, 49, 69, 72, 99], "kr": 26, "ktheta": 26, "kphi": 26, "rel": [26, 37, 38, 44, 91], "bind": [26, 98, 99], "mode": [26, 35], "boreschrestraint": 26, "six": [26, 95], "phi0": 26, "150": [26, 69, 91, 99, 100], "kcal": [26, 32, 35, 40, 52, 57, 78, 79, 82, 83, 84, 85, 88, 89, 96, 98, 99, 100], "rad": [26, 40], "equilibium": 26, "equilibrium": [26, 99], "flat": 26, "bottom": [26, 41], "val0": 27, "val1": 27, "token": [27, 36, 46], "qset": 27, "ep": 27, "nre": 27, "hope": [28, 36, 44, 46], "num": [28, 38, 68, 69], "case_sensit": 28, "identif": 28, "sensit": [28, 40], "bz2": [28, 51, 62, 65, 71], "urea": 28, "gro": [28, 37, 52, 64, 67, 77, 93], "intel": [28, 35, 51], "block": [28, 35, 39, 96, 98], "addition": [28, 41], "lightweight": 28, "background": [28, 35, 41], "unaffect": [28, 77], "show_warn": [28, 35, 37, 93], "ignore_topology_fram": 28, "gromacs_path": 28, "split": [28, 34, 35, 43, 91], "encount": [28, 72], "lead": [28, 35, 40, 43, 44, 96], "noisi": [28, 35], "come": [28, 35, 37, 43], "switch": [28, 32, 33, 35, 41, 44, 88, 91, 100], "debug": [28, 33, 39], "caffein": 28, "tutori": [28, 35, 38, 45, 46, 49, 51, 52, 53, 55, 56, 61, 65, 87], "websit": [28, 35, 43, 44, 46, 53, 62], "mol0": 28, "mol1": 28, "match_light_atom": [28, 39], "tri": [28, 40, 82], "item0": 28, "item1": 28, "item2": 28, "item3": 28, "ignore_spac": 28, "account": [28, 35, 38, 41, 42, 51], "imag": [28, 34, 41, 46, 93], "convent": [28, 34, 35, 44, 61, 78], "infinit": [28, 34, 35, 37], "param": [28, 37], "still": [28, 35, 43, 53, 70, 92, 99], "occur": [28, 99], "unless": 28, "absolut": [28, 40, 98], "mol3": 28, "memori": [28, 34, 35, 40, 44, 51, 64, 66], "reason": [28, 42, 44], "label": [28, 35, 44, 46, 51], "smarts_column": 28, "labels_column": 28, "taken": [28, 35], "smiles_column": 28, "put": [28, 35, 38, 52, 56, 94, 95, 99], "add_hydrogen": [28, 94], "generate_coordin": [28, 94], "must_sanit": [28, 35, 94], "saniti": 28, "skip": [28, 35, 99], "malform": 28, "parse": 28, "support_old_module_nam": 28, "old": [28, 35], "migrat": [28, 35], "temporari": [28, 35, 40, 42, 51], "port": [28, 35, 45, 47, 51], "knowledg": 28, "aim": [28, 35, 44, 46, 47, 85], "though": [28, 35, 40, 71, 89], "forev": [28, 45], "duplic": [28, 35, 99], "similarli": [31, 38, 39, 40, 41, 45, 66, 70, 77, 78, 86, 87, 89, 97], "add_shared_properti": [31, 35], "subset": [31, 35, 36, 41, 49, 52, 58, 87, 94], "clear_energy_trajectori": 31, "geometri": [31, 86], "content": 31, "histori": [31, 35, 98], "systm": 31, "is_system": 31, "legaci": [31, 35, 44], "remove_all_shared_properti": 31, "remove_shared_properti": [31, 35], "futur": [31, 35, 39, 46, 47], "specfi": 31, "set_energy_trajectori": 31, "set_properti": 31, "set_shared_properti": 31, "set_spac": [31, 35], "set_tim": [31, 35], "shared_properti": 31, "session": [31, 51, 61, 72], "view2d": [31, 35, 41, 52, 62, 93], "2d": [31, 35, 36, 49, 52, 54, 59, 62, 92], "complain": 32, "tempbas": 32, "from_unit": 32, "meter": [32, 40], "molar": [32, 40], "kcal_per_mol": [32, 40, 82, 83, 84, 85, 88], "grammar": [32, 35, 38, 40], "akma": [32, 35, 40], "gram": [32, 40], "kilocalori": [32, 40, 82, 83, 84, 85, 88], "mole": [32, 40, 82, 83, 84, 85, 88], "mod_electron": [32, 40], "si": [32, 35, 36, 82, 86, 88], "chosen": [32, 34, 37, 40, 41, 92, 97], "kilojoul": [32, 82, 83, 84, 85], "nanomet": [32, 40, 86], "kelvin": [32, 40], "unscal": 32, "kilogram": 32, "joul": [32, 40, 88], "singleton": 33, "rich": [33, 35], "markdown": 33, "debugging_en": 33, "sent": [33, 35], "section": [33, 40, 41, 87, 96], "panel": 33, "pad": 33, "markup": 33, "print_except": 33, "redirect_output": 33, "outdir": 33, "auto_bzip": 33, "redirect": [33, 35, 47, 51], "titl": [33, 35, 39, 46], "accumul": 33, "filehandl": 33, "buffer": 33, "set_debugging_en": 33, "off": [33, 35, 39, 41, 87, 91, 100], "set_them": 33, "metaward": 33, "supports_emoji": 33, "emoji": 33, "instrument": 33, "child_tot": 33, "spent": 33, "long_loop": 33, "stop": [33, 35, 41, 51, 83, 84, 85], "millisecond": 33, "accur": 33, "show_foot": 33, "show_edg": 33, "add_column": 33, "justifi": [33, 44], "no_wrap": 33, "footer": 33, "justif": 33, "add_row": 33, "render": [33, 35, 41, 59, 93], "modulenotfounderror": 33, "stub": 33, "package_registri": 33, "mamba": [33, 35, 44, 51, 62, 87, 92, 93], "sy": 33, "mdtraj": 33, "md": [33, 35, 37], "argv": 33, "stdout": [33, 35], "_modulestub": 33, "functon": 33, "fromlist": 33, "module_to_packag": 33, "pip": [33, 51], "easy_instal": 33, "ut": 33, "simvolum": 34, "orthoganol": 34, "tradit": [34, 41], "sirevol": 34, "beyond": 34, "dist": 34, "aabox": 34, "aabox0": 34, "aabox1": 34, "enclos": 34, "group0": 34, "group1": 34, "box_matrix": 34, "boxmatrix": 34, "calc_angl": 34, "calcangl": 34, "lie": 34, "180": 34, "calc_dihedr": 34, "calcdihedr": 34, "clockwis": 34, "360": [34, 90], "calc_dist": 34, "calcdist": 34, "mat": 34, "popul": 34, "shortest": 34, "pairmatrix": 34, "group2": 34, "calc_dist2": 34, "calcdist2": 34, "calc_dist_vector": 34, "calcdistvector": 34, "distvector": 34, "distmat": 34, "interpoint": 34, "calc_inv_dist": 34, "calcinvdist": 34, "smallest": [34, 38, 72], "calc_inv_dist2": 34, "calcinvdist2": 34, "change_volum": 34, "changevolum": 34, "delta": [34, 91], "get_box_cent": 34, "getboxcent": 34, "get_copies_within": 34, "getcopieswithin": 34, "mere": 34, "get_images_within": 34, "getimageswithin": 34, "get_minimum_imag": 34, "getminimumimag": 34, "coord": [34, 43, 78], "coordgrouparrai": 34, "translate_as_on": 34, "get_random_point": 34, "getrandompoint": 34, "anywher": [34, 53], "is_cartesian": 34, "iscartesian": 34, "is_period": 34, "isperiod": 34, "makewhol": 34, "sure": [34, 35, 39, 40, 44, 46, 51, 73, 74, 75, 76, 86, 99, 100], "next": [34, 35, 41, 44, 46, 47, 51, 87, 91, 94], "arent": 34, "coher": 34, "maximum_cutoff": 34, "maximumcutoff": 34, "obei": 34, "largest": [34, 71, 72], "half": [34, 38, 68, 98, 99], "side": 34, "minimumdist": 34, "box0": 34, "box1": 34, "set_volum": 34, "setvolum": 34, "basi": 34, "extent": 34, "implicitli": [34, 35], "coordgroupbas": 34, "assert_same_s": 34, "assertsames": 34, "assert_valid_index": 34, "assertvalidindex": 34, "coordgroupeditor": 34, "maybe_differ": 34, "maybediffer": 34, "comparison": [34, 36, 77, 79], "address": [34, 42], "mayb": [34, 98], "to_vector": 34, "tovector": [34, 35], "replic": 34, "infin": 34, "along": [34, 35, 40, 60, 68, 90], "effect": [34, 37, 41, 100], "larger": [34, 35, 38, 63, 66, 77, 78, 96], "break": [34, 35, 44, 47], "max_coord": 34, "maxcoord": 34, "min_coord": 34, "mincoord": 34, "set_dimens": 34, "setdimens": 34, "span": 34, "achiev": [34, 35, 37, 44, 72, 91], "To": [34, 35, 38, 39, 41, 43, 44, 46, 51, 52, 57, 62, 66, 68, 77, 78, 79, 80, 86, 87, 90, 92, 94, 97, 98, 100], "triclin": [34, 35], "engin": [34, 35, 47, 49, 77, 88], "approach": [34, 96], "appendix": 34, "chapter": [34, 57, 58, 59, 60, 68, 79, 82, 83, 84], "sens": [34, 81, 82, 83, 84, 85], "sensibl": [34, 37], "analysi": [34, 35, 39, 87, 90], "tsjerk": 34, "wassenaar": 34, "lester": [34, 44], "hedg": [34, 44], "alpha": [34, 98], "v2": 34, "beta": 34, "v0": 34, "cell_matrix": 34, "cellmatrix": 34, "cell": [34, 41, 68, 69, 71], "cubic": 34, "d": [34, 35, 37, 38, 44, 52, 70, 96, 98, 99, 100], "is_reduc": 34, "isreduc": 34, "lattic": [34, 35], "is_rot": 34, "isrot": 34, "compli": 34, "bia": 34, "par": 34, "bias": 34, "toward": [34, 42, 89, 91], "tilt": 34, "wherea": 34, "consist": [34, 35, 38, 43, 44], "oscil": [34, 35], "instanti": 34, "rhombic_dodecahedron_hexagon": 34, "rhombicdodecahedronhexagon": 34, "auto_rot": 34, "hexagon": 34, "rhombic": 34, "dodecahedron": 34, "rhombic_dodecahedron_squar": 34, "rhombicdodecahedronsquar": 34, "certain": [34, 66], "li": [34, 91], "magnitud": [34, 40], "prevent": [34, 35, 44, 85, 91], "unwant": 34, "ascii": [34, 35, 39, 67], "truncated_octahedron": 34, "truncatedoctahedron": 34, "truncat": 34, "octahedron": 34, "third": [34, 35, 46, 68, 91], "sinc": [35, 38, 39, 46, 58, 67, 95, 96], "furthest": [35, 36], "guid": [35, 45, 51, 66, 77, 87, 99], "lambdalev": 35, "subsequ": 35, "pr": 35, "alchem": [35, 50, 54], "multiprocess": 35, "flag": [35, 44], "crystal": 35, "gmx": 35, "genion": 35, "abil": [35, 59, 93], "significantli": 35, "optimis": 35, "centralcach": 35, "tbb": 35, "collaborative_cal": 35, "cooper": 35, "manner": [35, 44], "cost": [35, 39, 99], "unnecessari": 35, "alloc": 35, "dealloc": 35, "updatefrom": 35, "again": [35, 38, 44, 46, 62, 73, 74, 75, 76, 80, 81, 88, 95, 96, 98], "freeenergyanalysi": 35, "py": [35, 43, 44, 46, 51, 68, 71], "pymbar": 35, "experiment": 35, "part06": 35, "04_alchemical_restraint": 35, "pleas": [35, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 77, 92], "entri": [35, 46], "review": [35, 42, 43, 46, 47], "99": [35, 39, 52, 68, 69, 70, 87, 89], "modularis": 35, "102": [35, 68, 69, 77, 87], "atmospher": [35, 40], "analyse_freenrg": 35, "incorrect": [35, 41, 93], "ti": 35, "cap": 35, "ter": 35, "wrong": 35, "prettier": [35, 41, 87], "couldn": [35, 65], "softwar": [35, 47, 51, 92], "compliant": [35, 43, 44], "progressbar": 35, "properli": [35, 40, 41], "fix_88": 35, "deadlock": 35, "becaus": [35, 38, 39, 40, 41, 47, 51, 65, 68, 69, 70, 71, 72, 77, 78, 79, 81, 86, 87, 88, 89, 91, 92, 94, 99], "starvat": 35, "had": [35, 41, 44, 77, 87], "progress": 35, "larg": [35, 37, 40, 51, 93], "roughli": [35, 43], "lookup": 35, "standardstatecorrect": 35, "e2e370940894315838fb8f65e141baaf07050ce0": 35, "crash": 35, "constructor": [35, 87], "rewrot": 35, "consolid": 35, "demand": 35, "disk": [35, 51, 62], "scan": [35, 58, 79], "massiv": 35, "quit": [35, 39, 51, 92], "framework": [35, 50, 92, 96], "wider": 35, "netcdf": [35, 39, 67], "littl": 35, "sever": [35, 38, 41, 47, 68, 72, 79, 96], "recognis": [35, 40, 45, 48, 87, 92], "queri": [35, 37, 38, 40, 82, 83, 84, 95, 96], "bar": [35, 40], "commun": [35, 42, 50, 53], "propog": 35, "gil": 35, "correctli": [35, 40, 46], "recov": [35, 39], "interupt": 35, "catch": 35, "respond": 35, "signal": [35, 99], "handler": 35, "alert": 35, "interupt_except": 35, "becom": [35, 46, 47, 98], "further": [35, 38, 42, 47, 88], "better": [35, 38, 44, 77, 91, 98], "lose": [35, 39], "drop": [35, 51], "straight": [35, 41], "kept": [35, 100], "clean": [35, 51], "sanitis": 35, "improv": [35, 45], "openmmmd": 35, "corrspond": 35, "npt": [35, 99], "regim": 35, "cfg": 35, "dummy_atom_num": 35, "real_atom_num": 35, "robustli": 35, "short": [35, 40, 45, 46, 47, 93], "unicod": 35, "25p": 35, "25km": 35, "mile": [35, 40], "pint": [35, 36], "begun": 35, "4f": [35, 37, 52, 98, 99, 100], "500p": 35, "ambit": 35, "compos": 35, "nm": [35, 40, 82, 86], "recombin": [35, 37, 49, 92], "Or": [35, 38, 39, 41, 47, 52, 79, 82, 86, 90, 92, 99], "especi": [35, 40, 51], "enhanc": 35, "opac": [35, 36], "compil": [35, 40, 44, 92], "gcc": 35, "fix_67": 35, "fix_49": 35, "flip": [35, 85], "fix_44": 35, "51": [35, 39, 68, 70, 77, 87, 89, 91], "fix_49_50": 35, "run_constrain": 35, "our": [35, 43, 45, 47, 51, 53, 67, 91, 97, 98], "recip": [35, 46], "minor": [35, 46], "pin": [35, 51], "alongsid": 35, "prmtop": [35, 67], "fix_42": 35, "workflow": [35, 45, 49, 92], "devel": [35, 43, 44, 45, 46, 47, 51], "upload": [35, 44, 46, 47, 51], "channel": [35, 44, 46, 51], "openmmtool": 35, "host": 35, "environ": [35, 42, 46, 53, 54, 55, 92], "older": [35, 55], "libnetcdf": 35, "reactiv": 35, "maco": [35, 44, 46, 51, 53], "2017": [35, 51, 68], "std": [35, 87], "unary_funct": 35, "wildcard": [35, 65, 69, 70, 71, 72], "urei": 35, "bradlei": 35, "peopl": [35, 44, 47, 48], "rebuild": 35, "scratch": 35, "interconvert": [35, 50, 54], "fulli": [35, 41, 44, 46, 53, 73, 74, 75, 76, 100], "infer": [35, 82, 83, 84, 96], "formal": [35, 41, 49, 93], "ring": 35, "regard": [35, 42, 44], "preserv": [35, 47, 67], "waterswap": 35, "job": [35, 46, 96], "mbar": 35, "bla": 35, "openbla": 35, "watchdog": 35, "pypdb": 35, "qt": [35, 38], "gsl": 35, "lazy_import": 35, "tip4p": 35, "templat": [35, 40], "garbag": 35, "didn": 35, "underscor": [35, 43, 44], "relat": [35, 92, 96], "atomradii": [35, 57], "radii": [35, 57], "initialis": [35, 44], "filter": 35, "longer": 35, "spinner": 35, "yaspin": 35, "year": [35, 43, 46, 47], "q3": 35, "q4": 35, "incid": [35, 42], "anticip": 35, "branch": [35, 43, 45, 46, 47, 51], "readi": [35, 46, 47, 92], "adopt": 35, "regular": [35, 38, 47, 95], "bugfix": [35, 47], "quarterli": 35, "cycl": 35, "begin": [35, 52], "consid": [35, 38, 42, 56], "plai": [35, 39, 41, 44, 47, 89, 96], "refin": 35, "workabl": 35, "capabl": [35, 46, 87, 93], "bege": 35, "fourth": 35, "adjust": 35, "scheme": [35, 41, 46, 96], "agre": 35, "pmemd": 35, "adapt": [35, 42], "guard": 35, "spuriou": 35, "emit": 35, "hybrid": [35, 95], "chiral": [35, 94, 95], "expos": [35, 40, 41, 44], "clang": [35, 43, 51], "autoformat": [35, 43], "unpickl": 35, "led": 35, "simfil": 35, "segfault": 35, "incompat": [35, 51, 82], "keep_null_bond": 35, "keep_null_angl": 35, "meant": 35, "fixtur": [35, 44], "tmpdir": [35, 44], "pull": [35, 43, 44, 45, 46, 47, 48, 99], "engag": [35, 44, 47], "sire_bigtest": [35, 46, 47], "sireunittest": 35, "attain": 35, "refurbish": 35, "driven": [35, 44], "activ": [35, 44, 46, 47, 51, 54, 55, 92], "pep8": [35, 43, 44], "snake_cas": [35, 44, 78], "capitalcas": 35, "lowercas": [35, 38, 44], "portion": 35, "publicli": 35, "unexpos": 35, "connect": [35, 38, 41, 57, 74, 75, 76, 79, 81, 82, 83, 84, 85, 91, 92, 95], "quickstart": [35, 51], "comprehens": [35, 49], "doc": [35, 44, 46], "repo": [35, 44, 45, 46], "smaller": [35, 38, 43, 99], "quicker": [35, 44], "k_boltz": 35, "25": [35, 37, 40, 41, 52, 68, 69, 70, 72, 73, 74, 75, 77, 87, 89, 90, 91, 95, 96, 97, 99, 100], "celsiu": [35, 37, 40], "592486": 35, "bracket": [35, 38, 40], "method": [35, 44, 96, 97], "messag": [35, 44], "told": 35, "turn": [35, 39, 87, 100], "sse2neon": 35, "arm64": [35, 44, 46, 51], "linux": [35, 44, 46, 51, 53], "faster": [35, 44, 96], "reli": 35, "openmp": 35, "simd": 35, "did": [35, 69, 82, 87, 89, 91], "__all__": [35, 44], "moment": 35, "grow": 35, "robust": [35, 40, 86], "behav": [35, 57, 69, 70, 71, 72, 77, 78, 80], "hide": [35, 97], "eventu": 35, "generalunitproperti": 35, "monkei": 35, "patch": [35, 46, 47], "empow": 35, "emb": 35, "expect": [35, 42, 44, 69, 70, 71], "rework": 35, "cool": [35, 68], "thing": [35, 43, 47, 58, 68, 69, 77, 80, 87, 88, 98, 99], "playabl": 35, "movement": [35, 50, 54], "coords2": 35, "speak": 35, "almost": [35, 40, 46], "themselv": [35, 38, 78, 99], "plain": [35, 40, 82, 83, 84, 85], "truth": 35, "circular": 35, "particularli": [35, 37, 69, 71, 72, 79, 92], "suit": [35, 37, 44, 46, 92], "ppxasjsm": [35, 48], "jmichel80": [35, 48], "compris": [35, 73, 74, 75, 76, 82, 83, 84, 85], "2495": 35, "lohedg": [35, 46, 48], "chryswood": [35, 46, 48], "halx": [35, 48], "ptosco": [35, 48], "sofiabariami": [35, 48], "fjclark": [35, 48], "steboss": [35, 48], "nigel": [35, 48], "palmer": [35, 48], "msuruzon": [35, 48], "kexul": [35, 48], "folder": [35, 44, 51], "demonstr": [35, 80, 88], "teach": [35, 58, 59, 60], "userto": 35, "began": 35, "decemb": [35, 47], "fep": 35, "trigger": [35, 46, 47], "extern": 35, "fork": [35, 46, 47], "exclud": [35, 73, 81], "repartit": 35, "deprec": 35, "py37": 35, "novemb": 35, "hetatm": 35, "dat": 35, "chamber": 35, "detect": [35, 39, 93], "ambertool": 35, "underscore_cas": 35, "backward": [35, 46, 47, 97], "pytest": [35, 44, 45, 77], "overhaul": 35, "cmakelist": 35, "txt": [35, 44, 46], "setup": [35, 44, 51, 60, 92], "m1": [35, 46], "2022": 35, "miniforg": 35, "mambdabuild": 35, "boa": [35, 51], "timeout": 35, "oz": 35, "illeg": 35, "hardwar": 35, "x86_64": 35, "reconstruct": 35, "solvent_point": 35, "amberprm7": 35, "sigma_av": 35, "openmmfreenergyst": 35, "assumpt": 35, "signific": [35, 44], "updatecoordinatesandveloc": 35, "200x": 35, "remap": 35, "bottleneck": 35, "fault": 35, "singular": [35, 40], "jan": 35, "fallback": 35, "bgf": 35, "solver": 35, "wasn": [35, 38], "substanti": 35, "mini": 35, "codebas": 35, "awai": [35, 89], "qalgorithm": 35, "oneapi": 35, "abi": 35, "minim": 35, "nativ": [35, 39, 44, 93, 98], "anaconda": [35, 44, 46, 47, 54, 55], "cloud": 35, "2021": 35, "aug": 35, "ryckaert": 35, "bellememan": 35, "fourier": 35, "arbitrari": [35, 63, 69, 70, 71, 86], "numextra": 35, "parm": 35, "natyp": 35, "solti": 35, "tip5p": 35, "opl": 35, "field": [35, 37, 96], "mmdetail": 35, "librari": [35, 41, 45, 51, 55, 87], "analyt": 35, "libcpuid": 35, "conect": 35, "freenrg": 35, "2020": 35, "waterview": 35, "stabl": 35, "loop": [35, 41, 43, 63, 68, 69, 70, 71, 72, 80, 82, 83, 84, 85, 87, 88, 89], "cut": 35, "copil": 35, "2019": 35, "intrascal": [35, 57, 79, 81], "effici": [35, 39, 44, 98], "scanhead": 35, "octob": 35, "writer": 35, "monitor": 35, "libpython": 35, "statist": [35, 87], "track": [35, 45], "mc": 35, "heavi": 35, "light": 35, "recent": [35, 51, 68, 69, 71], "temporarili": [35, 42], "continu": [35, 43, 53, 92, 96], "autom": [35, 41, 46], "deploy": 35, "2018": [35, 68], "modern": 35, "ubuntu": 35, "spirit": 35, "quantomm": 35, "solut": [35, 88, 99], "signficantli": 35, "charmm": [35, 39, 49, 67], "localis": 35, "isrun": 35, "wait": [35, 41], "trj": [35, 67], "arch": 35, "512": 35, "knl": 35, "successfulli": [35, 47], "2016": [35, 68], "macosx_deployment_target": 35, "execut": [35, 44], "mountain": 35, "lion": 35, "ligandswap": 35, "multidoubl": 35, "lib": [35, 68, 71], "lib64": 35, "suse": 35, "semi": 35, "workshop": [35, 46], "nautilu": 35, "gradient": 35, "compuat": 35, "openmmfreenergst": 35, "finit": 35, "differec": 35, "separ": [35, 41, 42, 43, 47, 65, 100], "equilibr": [35, 96], "repositori": [35, 46, 47, 92], "archiv": 35, "2775": 35, "nividic73": [35, 48], "svndump": 35, "831": [35, 52, 77], "protom": 35, "rewrit": 35, "fortran": 35, "essex": 35, "understand": [36, 38, 54], "logic": [36, 68, 92], "advanc": [36, 42], "approxim": [36, 40, 77], "outsid": [36, 38, 44, 98, 99], "closer": 36, "higher": [36, 55, 98], "hood": [36, 93], "tight": 37, "kigaki": [37, 52, 77, 93], "omm": [37, 92, 99], "proxi": [37, 92], "swig": [37, 92], "0x2846e5cb0": 37, "getsystem": [37, 92], "0x2846e5d40": 37, "getintegr": [37, 92, 98], "verletintegr": [37, 98, 99], "0x2846e5a70": 37, "getplatform": [37, 92], "0x2846e5ce0": 37, "choic": [37, 40, 92, 93, 96], "langevin_middl": 37, "atm": [37, 40], "langevinmiddleintegr": 37, "0x295a07cc0": 37, "com_reset_frequ": 37, "cmmotionremov": 37, "motion": [37, 41, 96], "particle_mesh_ewald": 37, "no_cutoff": 37, "reaction_field": [37, 96], "ewald": [37, 96], "cpu_pm": 37, "cpu": 37, "dielectr": 37, "reaction": [37, 96], "78": [37, 68, 70, 77, 87], "perurb": 37, "verlet": 37, "leapfrog": 37, "langevin": 37, "nose_hoov": 37, "brownian": 37, "andersen": 37, "friction": 37, "opencl": 37, "conduct": [37, 45, 47, 50, 53], "vice": 37, "versa": 37, "use_dispersion_correct": 37, "dispers": 37, "deal": 37, "expens": 37, "25oc": [37, 98, 99, 100], "298": [37, 40, 77], "barostat": 37, "mistak": 37, "valueerror": 37, "1f": [37, 38, 99], "5f": 37, "005": 37, "summari": [37, 87], "3263": 37, "\u00e5": [37, 38, 40, 57, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 96, 99, 100], "toler": [37, 44], "0001": 37, "ff": [37, 57, 81], "833333": [37, 57, 81], "nonbond": [37, 57, 81], "cosin": [37, 57, 81], "sometim": [37, 38, 39, 51, 71, 94, 99], "idea": [37, 45, 93, 99], "suffici": [37, 47], "100p": 37, "100": [37, 38, 39, 40, 52, 66, 68, 69, 77, 87, 89, 91, 96, 98, 99, 100], "10p": [37, 98, 99, 100], "specifii": 37, "1n": 37, "1p": [37, 52, 98], "concept": [38, 72, 97], "belong": [38, 69, 70, 71], "shorten": [38, 77], "unbound": 38, "upward": [38, 39, 67], "downward": 38, "glob": [38, 39, 65, 69, 70, 71, 72], "pattern": 38, "al": [38, 68], "hi": [38, 69, 72, 77], "esdp": 38, "hie": [38, 69, 72, 77], "hid": [38, 69, 72, 77], "hip": [38, 69, 72, 77, 98, 99], "wildcardtoregularexpress": [38, 68], "insensit": [38, 68, 72, 92], "asp": [38, 41, 69, 70, 72, 77], "compar": [38, 41, 44, 46, 96], "less": [38, 68, 77, 79, 87], "best": [38, 39, 40, 42, 73, 74, 75, 76, 79, 83, 84, 85, 99], "searcher": 38, "introduc": [38, 44, 82, 83, 84, 96], "complic": 38, "sit": 38, "hierarchi": 38, "decompos": 38, "prefer": [38, 44, 97], "summaris": 38, "think": [38, 88], "insid": [38, 44], "natur": [38, 44], "view_typ": 38, "abbrevi": [38, 43], "bridg": 38, "basic": [38, 90], "wholli": [38, 73, 76], "carbon": [38, 39, 41, 52, 57, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94, 95, 97, 99], "na": [38, 77], "sodium": [38, 93], "gase": 38, "shorthand": [38, 68, 78], "bio": 38, "twenti": 38, "five": [38, 47, 72, 78, 86, 87, 89], "oxygen": [38, 52, 72, 76, 77, 78, 79, 86, 91, 95, 97, 99], "modulo": [38, 77], "electron": [38, 40, 41, 42, 77], "lig": [38, 72, 95], "imprecis": 38, "aladip": [38, 41, 57, 72, 73, 74, 75, 76, 81, 86, 88, 89, 90, 93], "48778e": [38, 78], "09756e": 38, "09": [38, 57, 68, 69, 70, 77, 81, 82, 86, 89, 96, 99], "experienc": 38, "approximatlei": 38, "neutral": [38, 77], "rout": [38, 51, 69, 70, 72, 78, 98], "atomtyp": [38, 57, 79, 81], "truthfulli": 38, "subscript": 38, "pick": 38, "variant": 38, "cl": [38, 77], "f": [38, 39, 40, 41, 44, 51, 52, 56, 66, 83, 84, 85, 87, 92, 96, 98, 99], "chlorin": 38, "fluorin": 38, "criterion": 38, "max": [38, 78, 87], "interatom": 38, "retun": 38, "000000": [38, 39, 52, 87, 89], "residi": 38, "substructur": [38, 92, 95], "aliphat": [38, 52, 95], "cnc": [38, 52, 94], "nc": [38, 52, 94], "alanin": [38, 39, 71, 80, 99], "dipeptid": [38, 39], "amino": [38, 69, 72], "acid": [38, 69, 72], "commonli": [38, 40, 78], "deproton": 38, "ch": 38, "letter": [38, 78], "redefin": 38, "onc": [38, 47, 51, 87, 93, 98], "pre": [38, 51, 97], "namd": [39, 67, 92], "plor": [39, 67], "compact": 39, "seekabl": 39, "balanc": 39, "store": [39, 40, 81, 96, 97], "bit": [39, 87, 97], "exact": [39, 51, 98], "500": [39, 52, 66, 87, 89], "despit": 39, "difficult": [39, 41, 46], "userwarn": [39, 82], "parse_error": 39, "disagr": 39, "byte": 39, "128": [39, 68, 87], "get_last_error_detail": [39, 68, 69, 71, 79, 82], "1912": [39, 52, 65, 72, 73, 74, 92, 95], "block1": 39, "block2": 39, "block3": 39, "91": [39, 68, 70, 77, 87], "10th": [39, 68], "common": [39, 40, 42, 44, 65, 67, 69, 77, 78, 79, 88, 92, 98], "631": [39, 52, 65, 70, 72, 73, 74, 92], "633": [39, 52, 65, 72, 92], "listdir": [39, 66], "frame_049_98": 39, "frame_040_80": 39, "frame_002_4": 39, "frame_042_84": 39, "frame_024_48": 39, "frame_045_90": 39, "frame_004_8": 39, "frame_034_68": 39, "button": [39, 41, 89], "slider": 39, "not_wrap": 39, "contrast": [39, 85], "unwrap": [39, 41], "behaviour": [39, 66, 71, 94], "againt": 39, "ref_mol": 39, "4_lj": [39, 52, 88, 89, 91], "4_coulomb": [39, 52, 88, 89, 91], "intra_lj": [39, 52, 88, 89, 91], "intra_coulomb": [39, 52, 88, 89, 91], "200000": [39, 52, 89], "509838": [39, 52, 89], "810452": [39, 52, 89], "922": 39, "010757": 39, "570059": [39, 52, 89], "224970": [39, 52, 89], "6794": 39, "775454": 39, "800343": [39, 52, 89], "485545": [39, 52, 89], "311255": [39, 52, 89], "520806": [39, 52], "5841": 39, "195551": 39, "400000": [39, 52, 89], "700506": [39, 52, 89], "47": [39, 52, 68, 69, 70, 77, 87, 89, 91], "698455": [39, 52, 89], "928": 39, "715959": 39, "470519": [39, 52, 89], "785875": 39, "6861": 39, "966370": 39, "776295": [39, 52, 89], "131481": [39, 52, 89], "617496": [39, 52, 89], "40": [39, 52, 57, 68, 69, 70, 72, 75, 77, 80, 81, 84, 87, 89, 91, 95], "126219": [39, 52], "5896": 39, "430994": 39, "600000": [39, 52, 89], "801076": [39, 52, 89], "486411": [39, 52, 89], "838": [39, 52, 77], "387490": 39, "607753": [39, 52, 89], "023439": [39, 52, 89], "6724": 39, "278286": 39, "614774": [39, 52, 89], "124729": [39, 52, 89], "103966": [39, 52, 89], "36": [39, 52, 57, 68, 69, 70, 73, 74, 75, 81, 83, 84, 87, 89, 91, 95], "633297": [39, 52], "5851": [39, 83], "969876": 39, "800000": [39, 52, 89], "365638": [39, 52, 89], "483966": [39, 52, 89], "958": 39, "913012": 39, "524609": [39, 52, 89], "663455": 39, "6828": 39, "029775": 39, "383852": [39, 52, 89], "339333": [39, 52, 89], "983872": [39, 52, 89], "197920": [39, 52], "5840": 39, "537702": 39, "534830": [39, 52, 89], "596027": [39, 52, 89], "915": 39, "994574": 39, "517530": [39, 52, 89], "190370": [39, 52, 89], "6838": 39, "160251": 39, "214994": [39, 52, 89], "255331": [39, 52, 89], "699613": [39, 52, 89], "355054": [39, 52], "5892": 39, "911262": 39, "495": [39, 52, 87, 89], "199997": [39, 52, 89], "665994": [39, 52, 89], "42": [39, 52, 63, 68, 69, 70, 72, 77, 87, 89, 91, 98], "866319": [39, 52, 89], "899": 39, "586671": 39, "339087": [39, 52, 89], "172684": [39, 52, 89], "6636": 39, "461269": 39, "875872": [39, 52, 89], "356887": [39, 52, 89], "584092": [39, 52, 89], "499764": [39, 52], "5703": 39, "681610": 39, "496": [39, 52, 87, 89], "400002": [39, 52, 89], "062467": [39, 52, 89], "852774": [39, 52, 89], "916": 39, "416899": 39, "268408": [39, 52, 89], "878366": [39, 52, 89], "6582": 39, "928689": 39, "548897": [39, 52, 89], "327064": [39, 52, 89], "814718": [39, 52, 89], "671683": [39, 52], "5635": 39, "060214": 39, "497": [39, 52, 87, 89], "599998": [39, 52, 89], "530233": [39, 52, 89], "908117": [39, 52, 89], "895": [39, 68], "229707": 39, "487378": [39, 52, 89], "454670": [39, 52, 89], "6600": 39, "333270": 39, "223964": [39, 52, 89], "006034": [39, 52, 89], "692972": [39, 52, 89], "118048": [39, 52], "5668": 39, "304187": 39, "498": [39, 52, 87, 89], "800003": [39, 52, 89], "511116": [39, 52, 89], "976288": [39, 52, 89], "851": 39, "153213": 39, "017446": [39, 52, 89], "809064": [39, 52, 89], "6557": 39, "430299": 39, "841436": [39, 52, 89], "518190": [39, 52, 89], "862433": [39, 52, 89], "481467": [39, 52], "5675": 39, "947445": 39, "499": [39, 52, 87, 89], "768998": [39, 52, 89], "625135": [39, 52, 89], "825": 39, "743725": 39, "629923": [39, 52, 89], "089917": 39, "6504": 39, "532783": 39, "889372": [39, 52, 89], "846805": [39, 52, 89], "897328": [39, 52, 89], "547672": [39, 52], "5644": 39, "383908": 39, "380889": 39, "380162": 39, "761051": 39, "945872": 39, "624766": 39, "570638": 39, "827446": 39, "27": [39, 52, 68, 69, 70, 73, 74, 77, 78, 80, 87, 89, 90, 91, 94, 95], "348159": 39, "175605": 39, "448833": 39, "799090": 39, "52": [39, 63, 68, 70, 72, 77, 87, 89, 91], "247922": 39, "476675": 39, "806890": 39, "56": [39, 68, 69, 70, 71, 72, 77, 87, 89, 99], "283565": 39, "742225": 39, "700127": 39, "442352": 39, "539061": 39, "326716": 39, "865778": 39, "165851": 39, "616962": 39, "782813": 39, "226096": 39, "170080": 39, "396176": 39, "356142": 39, "265345": 39, "621487": 39, "accompani": [40, 46], "easiest": [40, 41, 51, 65, 68, 69, 70, 71, 72, 96], "pretti": 40, "microsecond": 40, "1e": [40, 44, 77], "10\u00b5": 40, "300": [40, 77], "3000": 40, "100m": 40, "kilomet": 40, "62760": 40, "plural": 40, "amper": 40, "focuss": 40, "calori": 40, "hartre": 40, "dozen": 40, "bohr": 40, "inch": 40, "foot": 40, "feet": 40, "yard": 40, "minut": [40, 51], "hour": 40, "week": [40, 47], "fortnight": 40, "dalton": 40, "tonn": 40, "newton": 40, "ounc": 40, "pound": 40, "stone": 40, "hundredweight": 40, "pascal": 40, "psi": 40, "mmhg": 40, "fahrenheit": 40, "amp": 40, "volt": 40, "farad": 40, "watt": 40, "e_charg": 40, "faradai": 40, "kj_per_mol": [40, 82, 83, 84, 85], "cal": 40, "ft": 40, "mph": 40, "kph": 40, "pa": 40, "w": 40, "quecto": 40, "quetta": 40, "pm": [40, 82, 86], "megajoul": 40, "2390": 40, "06": [40, 63, 68, 69, 70, 77, 94], "mj": 40, "\u00b5": 40, "\u03bc": 40, "micro": 40, "5e": 40, "m3": 40, "fraction": 40, "thumb": 40, "altern": [40, 44, 79, 93, 98], "doen": 40, "kj": [40, 82, 88], "kg": 40, "seven": 40, "parseabl": 40, "ureg": 40, "unitregistri": 40, "4e": 40, "centimet": 40, "2400": 40, "bss": [40, 51, 92, 97], "autoc": 40, "m2": 40, "l2": 40, "mc2": 40, "455": 40, "5e10": 40, "2045": 40, "4828280872953": 40, "invis": [40, 97], "whenev": [40, 98, 99], "39006": 40, "intermediari": [40, 92], "metaobject": 40, "metafunct": 40, "maximis": 40, "straightforward": [41, 47, 91], "simpli": [41, 44, 51, 62, 65, 66, 87, 90], "partial": 41, "valenc": [41, 93], "shell": [41, 44, 93], "num_column": 41, "png": [41, 93], "svg": [41, 93], "pdf": [41, 93], "cairosvg": [41, 93], "750x300": 41, "pixel": [41, 93], "750x600": 41, "height": [41, 93], "1000": [41, 66, 68, 70], "ambigu": [41, 94], "unambigu": [41, 93], "until": [41, 44, 93], "assignstereochemistryfrom3d": 41, "zoom": 41, "video": 41, "player": 41, "paus": 41, "scroll": 41, "anim": 41, "ball": 41, "stick": 41, "dna": 41, "rna": 41, "smoothli": 41, "backbon": 41, "sstruc": 41, "3nss": [41, 62], "colon": 41, "yellow": 41, "css": 41, "browser": [41, 44], "orchid": 41, "sienna": 41, "wheat": 41, "ff0000": 41, "00ff00": 41, "0000ff": 41, "atomindex": 41, "bfactor": 41, "hydrophob": 41, "transpar": 41, "opaqu": 41, "click": [41, 89], "playback": 41, "movi": [41, 52, 90, 91, 96], "gradual": [41, 91], "drift": 41, "neighbor": 41, "obscur": 41, "conform": [41, 44, 99], "One": [41, 60, 63, 67, 68], "previou": 41, "preceed": [41, 47], "edg": [41, 47], "trip": 41, "nglwidget": 41, "set_paramet": 41, "backgroundcolor": 41, "white": [41, 79], "gui": 41, "camera": 41, "webgl": 41, "faq": [41, 42], "answer": [41, 42], "render_imag": 41, "Then": [41, 44], "def": [41, 44], "sleep": 41, "wb": 41, "target": [41, 47], "daemon": 41, "foster": 42, "maintain": [42, 43, 47], "particip": 42, "harass": 42, "experi": [42, 53], "regardless": 42, "ag": 42, "bodi": [42, 46], "ethnic": 42, "sex": 42, "characterist": 42, "gender": 42, "educ": 42, "socio": 42, "econom": 42, "statu": [42, 45], "nation": 42, "person": [42, 46], "race": 42, "religion": 42, "sexual": 42, "orient": 42, "behavior": 42, "Being": 42, "viewpoint": 42, "gracefulli": 42, "critic": 42, "focus": 42, "empathi": 42, "unaccept": 42, "imageri": 42, "unwelcom": 42, "attent": 42, "troll": 42, "insult": 42, "derogatori": 42, "comment": [42, 44], "polit": 42, "attack": 42, "publish": 42, "inappropri": 42, "profession": 42, "clarifi": 42, "fair": 42, "instanc": [42, 51, 87], "wiki": 42, "ban": 42, "perman": 42, "deem": 42, "threaten": 42, "offens": 42, "harm": 42, "offici": [42, 47], "mail": 42, "post": [42, 45, 53, 95], "social": 42, "media": 42, "appoint": 42, "onlin": 42, "offlin": 42, "abus": 42, "contact": 42, "team": [42, 44, 47], "complaint": 42, "investig": 42, "circumst": 42, "oblig": 42, "confidenti": 42, "polici": 42, "faith": 42, "face": 42, "repercuss": 42, "leadership": 42, "coven": 42, "question": 42, "throughout": [43, 61], "ask": [43, 44, 47, 50, 54, 68, 78, 87, 94], "offend": 43, "submiss": 43, "meet": 43, "ideal": [43, 44], "black": [43, 44], "perfect": 43, "feel": [43, 44, 46, 47, 77], "notifi": 43, "evolv": [43, 46], "homogen": 43, "foo": 43, "bigmolecul": 43, "big_molecul": 43, "getradiu": 43, "get_radiu": 43, "word": 43, "obviou": 43, "added_mol": 43, "added_molecul": 43, "addedmol": 43, "missing_molecul": 43, "missing_mol": 43, "missingmolecul": 43, "atomcoord": [43, 57, 78, 81, 90, 97], "o00": 43, "asa": 43, "blank": 43, "statement": 43, "discourag": [43, 44], "bear": 43, "multilin": 43, "debat": 43, "propos": [43, 45], "vscode": [43, 44], "visual": [43, 51], "studio": [43, 51], "basedonstyl": 43, "llvm": 43, "usetab": 43, "never": 43, "indentwidth": 43, "tabwidth": 43, "breakbeforebrac": 43, "allman": 43, "allowshortifstatementsonasinglelin": 43, "indentcaselabel": 43, "columnlimit": 43, "accessmodifieroffset": 43, "namespaceindent": 43, "fixnamespacecom": 43, "command": [43, 44, 46, 51, 61, 62, 87, 92], "autoformatt": [43, 44], "mambaforc": 44, "prioriti": 44, "bin": [44, 51], "environment_nam": 44, "deactiv": 44, "predominantli": [44, 49], "modernis": 44, "nearli": [44, 49], "flake8": 44, "linter": 44, "configur": [44, 51, 58, 96], "strictli": 44, "2014": [44, 68, 90], "newer": [44, 51], "portabl": [44, 97], "remain": [44, 91], "ourselv": 44, "x86": [44, 51], "powerpc": [44, 51], "eas": 44, "resort": 44, "vendor": 44, "burden": 44, "With": 44, "mind": [44, 45, 53], "singleword": 44, "camelcas": 44, "pure": 44, "lowercamelcas": 44, "lowerclassnam": 44, "tab": 44, "ipython": [44, 51, 61], "doxygen": 44, "prominantli": 44, "visibl": 44, "protect": 44, "git": [44, 46, 51], "checkout": [44, 46, 51], "feat": 44, "test_fil": 44, "file_test": 44, "test_func": 44, "func_test": 44, "test_": 44, "test_atomprop": 44, "verbos": 44, "invok": 44, "conftest": 44, "test_myfunc": 44, "ala_mol": 44, "deepcopi": 44, "clash": [44, 91], "mkdir": 44, "prm7": [44, 67], "mols2": 44, "slow": [44, 96], "test_slow_funct": 44, "mypkg": 44, "decor": 44, "veryslow": 44, "approx": 44, "might": [44, 99], "Not": [44, 51, 71], "test_new_featur": 44, "unimpl": 44, "mul": 44, "test_mul": 44, "58": [44, 52, 68, 69, 70, 77, 87, 89, 94, 96], "test_sub": 44, "known": 44, "suppos": 44, "test_indexerror": 44, "push": [44, 46], "tag": [44, 46], "docstr": 44, "sphinxcontrib": 44, "programoutput": 44, "sphinx_issu": 44, "frequent": 44, "conflict": [44, 46, 51], "touch": [44, 46, 92, 93], "recompil": 44, "typo": [44, 45], "unnecessarili": 44, "yaml": [44, 51], "remot": 44, "server": [44, 51], "enjoi": 44, "great": [44, 87], "advic": 44, "procedur": 44, "qualiti": 45, "blog": [45, 95], "donat": 45, "employ": 45, "employe": 45, "ground": 45, "laid": 45, "guidelin": 45, "roadmap": [45, 50], "timet": 45, "wishlist": 45, "deploi": 46, "authoris": 46, "THAT": 46, "greatli": 46, "demostr": 46, "learn": [46, 47, 51, 52, 56, 57, 58, 66, 87, 92], "regularli": 46, "On": 46, "major": [46, 47], "changelog": 46, "aarch64": 46, "update_recip": [46, 51], "mambabuild": [46, 51], "bld": [46, 51], "password": 46, "draft": 46, "bonu": 46, "super": 46, "announc": 46, "outcom": 47, "offic": 47, "freez": [47, 99], "haven": [47, 51], "hasn": [47, 53, 89, 94], "rectifi": 47, "calendar": 47, "cadenc": 47, "quarter": 47, "sequenti": 47, "fix_issu": 47, "why": [47, 88, 96, 98, 99], "soon": 47, "urgent": 47, "plan": [47, 51, 92, 93], "march": 47, "june": 47, "septemb": 47, "month": 47, "ey": 47, "feature_x": 47, "offer": 47, "bleed": 47, "mb2055": 48, "biomolecular": [49, 50, 92], "intuit": 49, "parameteris": [49, 59, 81, 88, 92], "solvat": [49, 59, 92], "popular": [49, 59, 66, 87], "overview": [49, 51], "flavour": 49, "amd": 51, "unix": 51, "lab": [51, 87], "termin": 51, "prompt": 51, "gb": 51, "concurr": 51, "inact": 51, "highli": 51, "outdat": 51, "risk": [51, 82, 83, 84, 85, 99], "tell": [51, 65], "jupyterlab": [51, 87], "podman": 51, "8888": 51, "home": 51, "fresh": 51, "feat_nam": 51, "patient": [51, 53], "chocolatei": 51, "choco": 51, "visualstudio2017": 51, "workload": 51, "vctool": 51, "admin": 51, "dep": 51, "fewer": 51, "yml": 51, "env": 51, "export": 51, "flexibl": [51, 57], "cleaner": 51, "dedic": 51, "build_sir": 51, "client": 51, "meta": 51, "fine": [51, 91], "tune": 51, "inconsist": 51, "config": 51, "anaconda_upload": 51, "ye": 51, "osx": 51, "py310hf95ea87_25": 51, "tar": 51, "wheel": 51, "c_compil": 51, "cxx_compil": 51, "clangxx": 51, "target_platform": 51, "wherev": 51, "p38": 52, "front": 52, "630": [52, 72, 73, 74, 95, 99], "wat": [52, 72, 92, 95], "625": [52, 72, 73, 74, 95, 99], "629": [52, 72, 73, 74, 95, 99], "626": [52, 72, 73, 74, 95, 99], "627": [52, 72, 73, 74, 95, 99], "628": [52, 72, 73, 74, 95, 99], "632": [52, 72, 73, 74], "1260": [52, 73], "23": [52, 68, 69, 70, 72, 73, 74, 75, 77, 79, 86, 87, 89, 90, 91, 95, 97, 100], "h1": [52, 57, 73, 74, 77, 87, 95, 99], "h2": [52, 73, 74, 77, 95, 99], "28": [52, 68, 69, 70, 73, 74, 77, 87, 89, 90, 95, 99], "1255": [52, 73], "1904": [52, 72, 73, 74, 95], "1906": [52, 73, 74, 95, 99], "1256": [52, 73], "1907": [52, 72, 73, 74, 95, 99], "1908": [52, 73, 74, 95, 99], "1257": [52, 73], "1909": [52, 73, 74, 95, 99], "1258": [52, 73], "1910": [52, 72, 73, 74, 95], "1911": [52, 73, 74, 95], "1259": [52, 73, 100], "5691": 52, "22497": 52, "50984": 52, "57006": 52, "80034": 52, "8105": 52, "31125": 52, "5208": 52, "569147": 52, "785874": [52, 89], "819417": 52, "920920": 52, "663454": [52, 89], "579061": 52, "254415": 52, "192988": 52, "451575": 52, "799376": 52, "329641": 52, "089916": [52, 89], "405149": 52, "rdmol": 52, "20p": 52, "828605": 52, "1356": 52, "012783": 52, "9717": 52, "588398": 52, "081250": 52, "935577e": 52, "08": [52, 57, 69, 70, 72, 77, 78, 81, 99], "58901": 52, "908280": 52, "145": 52, "262639": 52, "60": [52, 68, 69, 70, 77, 86, 87, 96], "009867": 52, "830": 52, "297820": 52, "48479": 52, "442291": 52, "859426": 52, "1358": 52, "426949": 52, "9721": 52, "478025": 52, "488730": 52, "020368e": 52, "58977": 52, "547695": 52, "143": 52, "620760": 52, "368620": 52, "832": [52, 77], "992328": 52, "48557": 52, "034752": 52, "891111": 52, "1363": 52, "801767": 52, "9854": 52, "057685": 52, "568284": 52, "815839e": 52, "59169": 52, "733258": 52, "274884": 52, "029406": 52, "669248": 52, "48613": 52, "838181": 52, "832609": 52, "1357": 52, "912373": 52, "9851": 52, "460866": 52, "471396": 52, "825340e": 52, "59192": 52, "703528": 52, "140": 52, "362271": 52, "65": [52, 63, 68, 69, 70, 71, 72, 77, 80, 87, 91, 95, 99], "433697": 52, "829": [52, 89], "466133": 52, "48645": 52, "563842": 52, "074686": 52, "1359": 52, "927851": 52, "9879": 52, "077092": 52, "170306": 52, "003672e": 52, "59240": 52, "068442": 52, "139": [52, 68, 91], "836463": 52, "083724": 52, "833": [52, 77], "119507": 52, "48664": 52, "185275": 52, "375049": 52, "601877": 52, "9886": 52, "713393": 52, "034265": 52, "092219e": 52, "59270": 52, "897562": 52, "563988": 52, "993368": 52, "838422": 52, "48687": 52, "440781": 52, "614215": 52, "914063": 52, "9857": 52, "271105": 52, "639254": 52, "061152e": 52, "59250": 52, "463890": 52, "829589": 52, "766169": 52, "218503": 52, "48694": 52, "180337": 52, "926889": 52, "1361": 52, "405155": 52, "9957": 52, "054478": 52, "806703": 52, "159753e": 52, "59380": 52, "997407": 52, "988778": 52, "66": [52, 63, 68, 69, 70, 71, 77, 80, 87, 91], "272231": 52, "836": 52, "888535": 52, "48726": 52, "976172": 52, "966007": 52, "311827": 52, "9967": 52, "327772": 52, "997531": 52, "027917e": 52, "59405": 52, "583408": 52, "142": 52, "485999": 52, "733607": 52, "207715": 52, "48739": 52, "435594": 52, "324323": 52, "1360": 52, "640600": 52, "9939": [52, 90], "400939": 52, "198475": 52, "166730e": 52, "59388": 52, "226935": 52, "212016": 52, "316508": 52, "837": [52, 77], "483867": 52, "48750": 52, "250956": 52, "61": [52, 68, 69, 70, 71, 77, 87, 89, 91, 95, 96], "320326": 52, "1362": 52, "023485": 52, "9955": 52, "071224": 52, "056823": 52, "139431e": 52, "59424": 52, "212266": 52, "513301": 52, "975309": 52, "997195": 52, "48771": 52, "199611": 52, "415993": 52, "776379": 52, "9936": 52, "669535": 52, "304641": 52, "647357e": 52, "59410": 52, "580161": 52, "678519": 52, "433834": 52, "835": 52, "417971": 52, "48773": 52, "586899": 52, "970833": 52, "1366": [52, 68], "508370": 52, "9986": 52, "881634": 52, "251273": 52, "509407e": 52, "59466": 52, "056471": 52, "144": [52, 78, 87], "351857": 52, "429617": 52, "841": 52, "930932": 52, "48781": 52, "453053": 52, "245588": 52, "266409": 52, "122124": 52, "192312": 52, "163054e": 52, "59480": 52, "201397": 52, "712628": 52, "013711": 52, "646145": 52, "48792": 52, "322190": 52, "878785": 52, "1370": 52, "377196": 52, "9924": 52, "323617": 52, "399821": 52, "785520e": 52, "59418": 52, "248563": 52, "305975": 52, "940040": 52, "845": 52, "430135": 52, "48796": 52, "333344": 52, "430617": 52, "1365": [52, 68], "739457": 52, "9926": 52, "082150": 52, "156124": 52, "836895e": 52, "59423": 52, "448702": 52, "681590": 52, "043674": 52, "840": 52, "110188": 52, "48797": 52, "512625": 52, "294772": 52, "174160": 52, "9950": 52, "578785": 52, "453372": 52, "011507e": 52, "59450": 52, "019119": 52, "409696": 52, "041887": 52, "388935": 52, "48802": 52, "539157": 52, "156756": 52, "542712": 52, "9947": 52, "586104": 52, "036896": 52, "579309e": 52, "59452": 52, "548714": 52, "146": 52, "142252": 52, "800847": 52, "839": [52, 77], "303707": 52, "48804": 52, "188547": 52, "048626": 52, "1364": [52, 68], "033346": 52, "9976": 52, "885470": 52, "771207": 52, "353054e": 52, "59483": 52, "125256": 52, "011481": 52, "081234": 52, "157968": 52, "48806": 52, "614328": 52, "609644": 52, "227511": 52, "9935": 52, "113811": 52, "689491": 52, "968531e": 52, "910379": 52, "467384": 52, "420695": 52, "410744": 52, "48815": 52, "633975": 52, "resourc": 53, "upvot": 53, "hopefulli": 53, "newest": 53, "mention": 53, "confirm": 53, "aspect": 54, "analys": [54, 87, 91], "customis": 54, "fragment": [54, 59], "upgrad": 55, "amongst": 56, "7sa1": [56, 72, 80], "rcsb": [56, 62], "gz": [56, 62], "11728": [56, 68, 72], "1518": [56, 72], "unpack": 56, "arrang": [56, 85], "4532": [57, 78, 81, 82, 83, 84, 90], "49423": [57, 78, 81, 82, 83, 84, 90], "4365": [57, 78, 81, 82, 83, 84, 90], "9818": [57, 78, 81, 82, 83, 84, 85, 90], "44823": [57, 78, 81, 82, 83, 84, 85, 90], "3886": [57, 78, 81, 82, 83, 84, 85, 90], "0513": [57, 78, 81, 90], "63293": [57, 78, 81, 90], "2874": [57, 78, 81, 90], "798": [57, 78, 81, 90], "43076": [57, 78, 81, 90], "7337": [57, 78, 81, 90], "4805": [57, 78, 81, 83, 84, 85, 90], "54971": [57, 78, 81, 83, 84, 85, 90], "3514": [57, 78, 81, 83, 84, 85, 90], "3407": [57, 78, 81, 88, 90], "44815": [57, 78, 81, 90], "9626": [57, 78, 81, 90], "8341": [57, 78, 81, 90], "93668": [57, 78, 81, 90], "3509": [57, 78, 81, 90], "3525": [57, 78, 81, 90], "40994": [57, 78, 81, 90], "1521": [57, 78, 81, 90], "1933": [57, 78, 81, 90], "59022": [57, 78, 81, 90], "9428": [57, 78, 81, 90], "2149": [57, 78, 81, 90], "33301": [57, 78, 81, 90], "6874": [57, 78, 81, 90], "atomcharg": [57, 95, 97], "1123": [57, 78], "3662": [57, 78], "5972": [57, 78], "2719": [57, 78], "149": [57, 78], "0976": [57, 78], "ambertyp": [57, 79, 81], "gb_radius_set": [57, 79, 81], "treechain": [57, 79, 81], "gb_radii": [57, 79, 81], "gb_screen": [57, 79, 81], "atomstringproperti": [57, 79], "twoatomfunct": [57, 81], "340": [57, 81], "317": [57, 81, 90], "522": [57, 81], "570": [57, 81], "229": [57, 81], "434": [57, 81, 99], "01": [57, 63, 68, 69, 70, 77, 78, 79, 81, 82, 96], "337": [57, 81], "449": [57, 81, 87], "fouratomfunct": [57, 81], "14159": [57, 81], "38": [57, 68, 69, 70, 71, 75, 77, 81, 84, 87, 89, 91, 95], "amberparam": 57, "nbond": 57, "nangl": 57, "ndihedr": 57, "nimprop": 57, "n14": 57, "hc": 57, "ct": 57, "atomlj": 57, "64953": [57, 78], "0157": [57, 78], "39967": [57, 78, 79], "1094": [57, 78, 79], "086": [57, 78], "06908": 57, "47135": 57, "bondi": 57, "mbondi": 57, "atomveloc": 57, "0284179": 57, "0279068": 57, "0229222": 57, "00815709": 57, "00301807": 57, "0138062": 57, "0117127": 57, "0275995": 57, "018425": 57, "0505938": 57, "00951136": 57, "0125766": 57, "0185456": 57, "00277097": 57, "005927": 57, "0203835": 57, "0236023": 57, "0269803": 57, "0229536": 57, "00122144": 57, "0168112": 57, "0225591": 57, "0584583": 57, "0468198": 57, "0119421": 57, "0177259": 57, "0108097": 57, "109793": 57, "0791381": 57, "0183852": 57, "threeatomfunct": [57, 81], "91114": [57, 81], "10138": [57, 81], "70": [57, 68, 69, 70, 77, 81, 87], "03505": [57, 81], "06019": [57, 81], "atomel": [57, 95, 97], "atomfloatproperti": [57, 79], "85": [57, 68, 69, 70, 77, 87, 91], "72": [57, 64, 68, 69, 70, 77, 79, 87, 98], "cljnbpair": [57, 81], "atommass": [57, 95], "008": [57, 77, 78], "nconnect": [57, 81, 95], "nme": [57, 81, 89], "extrem": 57, "stretch": [58, 91], "goal": [60, 92], "prototyp": 60, "databas": 62, "1679": 62, "6984": 62, "a0a538r8y3": 62, "ebi": 62, "uk": 62, "af": 62, "f1": 62, "model_v3": 62, "1190": 62, "9417": 62, "cours": [62, 87], "internet": 62, "cholesterol": [62, 64, 65, 82], "74": [62, 63, 64, 68, 69, 77, 87], "02": [63, 68, 69, 70, 77, 94], "53": [63, 68, 69, 70, 72, 77, 86, 87, 89, 91, 98, 99], "00": [63, 64, 68, 77, 98], "chol": 64, "019": 64, "525": 64, "010": 64, "002": 64, "004": 64, "658": [64, 87], "518": 64, "285": [64, 68], "418": [64, 68], "055": 64, "000": 64, "164": 64, "442": 64, "173": 64, "900": 64, "359": [64, 87], "167": 64, "811": 64, "766": 64, "235": 64, "762": 64, "962": 64, "208": [64, 87], "endmdl": 64, "1mol": 64, "001870": 64, "152540": 64, "001040": 64, "000210": 64, "000410": 64, "000200": 64, "065850": 64, "051780": 64, "128510": 64, "141830": 64, "205520": 64, "000040": 64, "216410": 64, "144230": 64, "117300": 64, "280940": 64, "223720": 64, "197530": 64, "389970": 64, "035920": 64, "016740": 64, "281060": 64, "176550": 64, "023460": 64, "076160": 64, "296250": 64, "120770": 64, "00000": 64, "whichev": 65, "tmp": 65, "twice": 66, "mixtur": [66, 68], "ten": [66, 87], "immedi": 66, "reload": 66, "frame_143_28": 66, "frame_304_61": 66, "frame_006_1": 66, "frame_301_60": 66, "frame_220_44": 66, "frame_421_84": 66, "frame_196_39": 66, "frame_056_11": 66, "frame_428_85": 66, "sybyl": 67, "bank": 67, "top7": 67, "prmtop7": 67, "crd7": 67, "principl": 67, "93": [68, 69, 70, 72, 87, 98], "11732": 68, "46": [68, 69, 77, 87, 88, 89, 90, 91], "82": [68, 69, 70, 77, 87, 91], "100000": 68, "traceback": [68, 69, 71], "app": [68, 71], "python3": [68, 71], "site": [68, 71, 99], "__init__": [68, 71], "414": 68, "__fixed__getitem__": [68, 71], "412": 68, "413": 68, "415": 68, "416": 68, "__is_chain_class": 68, "11727": 68, "95": [68, 69, 70, 77, 87], "57": [68, 69, 70, 72, 77, 87, 89], "04": [68, 69, 70, 77, 94], "76": [68, 69, 70, 72, 77, 79, 87, 88], "cg1": [68, 69, 70], "cg2": [68, 69, 70], "cd1": [68, 69, 70], "et": 68, "6th": 68, "1494": [68, 69], "1489": [68, 69], "11625": [68, 69], "84": [68, 69, 72, 87, 95, 96], "1490": [68, 69], "11630": 68, "1491": [68, 69], "11637": 68, "1492": [68, 69], "11646": 68, "1493": [68, 69], "11654": 68, "keyerror": [68, 69, 71, 73, 74, 75, 76, 79], "duplicate_atom": 68, "419": 68, "417": 68, "428": 68, "__fixed__atoms__": 68, "426": 68, "__orig__atom": 68, "427": 68, "c4d51f89": 68, "f4f7": 68, "4e0c": 68, "854d": 68, "da27affe1baf": 68, "cg": 68, "ce": [68, 77], "od1": 68, "97": [68, 70, 77, 87, 94], "11624": [68, 69], "11629": 68, "11636": 68, "11645": 68, "11653": 68, "4482": 68, "4477": 68, "4478": 68, "4479": [68, 87], "11652": 68, "4480": 68, "4481": 68, "1369": 68, "1005": 68, "1014": 68, "1023": 68, "1027": 68, "1038": 68, "11623": [68, 69], "11628": 68, "11635": 68, "1367": 68, "11644": 68, "1368": 68, "7440": 68, "7435": 68, "c2": [68, 91, 94, 95], "11705": 68, "7436": 68, "c3": [68, 70, 94], "11706": 68, "77": [68, 69, 87, 89], "7437": 68, "c4": [68, 70, 94], "11708": 68, "7438": 68, "c5": [68, 70, 94, 95], "11709": 68, "7439": 68, "c6": [68, 70, 94, 95], "11712": 68, "backslash": 68, "378": 68, "ne2": 68, "nd2": 68, "157": [68, 70], "nh1": 68, "277": 68, "nh2": 68, "278": 68, "nd1": 68, "373": 68, "11530": 68, "374": [68, 87], "11555": 68, "67": [68, 69, 70, 77, 87], "375": [68, 87], "11573": 68, "376": 68, "11574": 68, "377": 68, "11651": 68, "wikipedia": 68, "qregularexpress": 68, "nitrogen": [68, 75, 76, 85, 91, 93, 95], "nz": [68, 77], "2015": 68, "11660": 68, "11655": 68, "11656": 68, "11729": 68, "11657": 68, "11730": 68, "11658": 68, "11731": 68, "11659": 68, "ce1": 68, "ce2": 68, "ce3": 68, "oe1": [68, 70], "oe2": [68, 70], "cz2": 68, "cz3": 68, "ne": 68, "o1": [68, 70], "o2": [68, 70], "o4": [68, 70], "o3": [68, 95], "o5": 68, "o7": 68, "o6": 68, "sd": 68, "c1": [68, 91, 92, 94, 95], "sg": [68, 87], "og": 68, "og1": 68, "oh": 68, "ne1": 68, "ch2": 68, "cd2": 68, "cz": 68, "od2": 68, "110": [68, 83, 87, 91], "107": [68, 69, 87], "138": 68, "1512": 68, "226": [68, 69], "1426": 68, "400": [68, 96], "186": 68, "122": [68, 70, 87], "il": [69, 70, 72, 77], "155": 69, "578": [69, 72], "151": 69, "584": 69, "152": 69, "593": 69, "153": 69, "646": 69, "154": 69, "691": 69, "duplicate_residu": 69, "leu": [69, 70, 72, 77], "ser": [69, 70, 72, 77], "gly": [69, 70, 72, 77], "glu": [69, 70, 72, 77], "117": [69, 70, 87], "204": [69, 87], "306": [69, 77], "352": 69, "10774": 69, "10816": 69, "10886": 69, "11247": 69, "250": [69, 87], "652": 69, "251": 69, "657": [69, 87], "252": 69, "680": 69, "253": 69, "685": 69, "254": 69, "201": [69, 77, 87], "205": [69, 87], "202": [69, 87], "203": [69, 77, 87], "peg": [69, 70], "75": [69, 77, 87, 89], "638": [69, 70, 92], "639": [69, 92], "662": 69, "666": 69, "668": 69, "histidin": 69, "phrase": [69, 70, 72], "775": [69, 86], "92": [69, 70, 87, 94, 98, 99], "770": 69, "771": 69, "772": 69, "773": 69, "11626": 69, "774": 69, "11627": 69, "pro": [69, 72, 77], "692": 69, "693": 69, "asn": [69, 72, 77], "694": 69, "695": 69, "particulari": [69, 70, 72], "cit": [69, 70], "cy": [69, 72, 77], "gln": [69, 72, 77], "hoh": [69, 70], "phe": [69, 70, 72, 77], "thr": [69, 72, 77], "trp": [69, 70, 72, 77], "tyr": [69, 72, 77], "cofactor": 69, "bound": [69, 80], "123": [70, 83, 87, 91], "985": 70, "4881": 70, "126": [70, 84, 87], "4862": 70, "unlik": [70, 71], "104": [70, 77, 83, 86, 87], "105": [70, 87], "158": 70, "197": [70, 87], "192": [70, 87], "977": 70, "193": 70, "978": 70, "194": [70, 98], "11662": 70, "195": 70, "11664": 70, "196": 70, "11667": 70, "118": [70, 87], "119": [70, 87, 96], "120": [70, 87, 91], "159": 70, "121": [70, 87], "160": [70, 77], "801": 70, "932": 70, "941": 70, "955": 70, "960": 70, "971": 70, "980": 70, "5824": 70, "5825": 70, "5826": [70, 90], "5827": 70, "5828": 70, "995": 70, "11698": 70, "996": 70, "11699": 70, "997": 70, "11700": 70, "998": 70, "11701": 70, "999": [70, 95], "11726": 70, "981": 70, "982": 70, "983": 70, "984": 70, "4876": 70, "11721": 70, "4877": 70, "11722": 70, "4878": 70, "11723": 70, "4879": 70, "11724": 70, "4880": 70, "11725": 70, "905": 70, "906": [70, 89], "803": 70, "11688": 70, "11689": 70, "11692": 70, "contigu": 71, "comma": 71, "cbx": 71, "462": 71, "458": 71, "elif": 71, "459": 71, "460": 71, "relev": 71, "461": 71, "__from_select_result": 71, "463": 71, "syntaxerror": 71, "464": [71, 90], "137": 71, "slightli": 71, "practic": 71, "notion": 72, "580": 72, "575": [72, 100], "576": 72, "577": 72, "579": 72, "1898": [72, 73, 74, 95], "1901": [72, 73, 74, 95], "79": [72, 77, 87, 91, 96, 99], "cyx": [72, 77], "glh": [72, 77], "ash": [72, 77], "constitu": [73, 74, 75, 76, 88], "1899": [73, 74, 95], "1902": [73, 74, 95], "1905": [73, 74, 95], "1900": [74, 95, 99], "1903": [74, 95, 99], "middl": 75, "quad": [75, 76], "sixth": 75, "improperss": 76, "amid": [76, 85], "planar": [76, 85], "11120": 77, "h3": 77, "11115": 77, "3622": 77, "11116": 77, "3623": 77, "11117": 77, "3624": 77, "11118": 77, "3625": 77, "11119": 77, "3626": 77, "301": 77, "296": 77, "294": 77, "hd2": 77, "297": 77, "299": 77, "302": 77, "10797": 77, "ow": 77, "303": 77, "hw1": 77, "304": 77, "hw2": 77, "305": 77, "307": 77, "10792": 77, "3604": 77, "11095": 77, "10793": 77, "11096": 77, "10794": 77, "3605": 77, "11097": 77, "10795": 77, "11098": 77, "10796": 77, "11099": 77, "3599": [77, 93], "sol": 77, "3594": 77, "3601": 77, "3595": 77, "3602": 77, "3596": [77, 90], "3603": 77, "3597": 77, "3598": 77, "7370": 77, "7365": 77, "11093": 77, "7366": 77, "7367": 77, "7368": 77, "7369": 77, "g_per_mol": 77, "3638": 77, "3633": 77, "3634": 77, "3635": 77, "3636": 77, "3637": 77, "279": [77, 80], "280": 77, "281": [77, 84], "283": [77, 89], "7411": 77, "7406": 77, "3608": 77, "11102": 77, "7407": 77, "3609": 77, "11103": 77, "7408": 77, "3610": 77, "11104": 77, "87": [77, 87, 94], "7409": 77, "3611": 77, "11105": 77, "7410": 77, "3612": 77, "11106": 77, "3631": 77, "3627": 77, "3628": 77, "3629": 77, "3630": 77, "3607": 77, "3614": 77, "3615": 77, "3616": 77, "3617": 77, "3618": 77, "162": 77, "259": 77, "261": 77, "268": 77, "263": 77, "264": 77, "265": 77, "266": 77, "271": 77, "1096": 77, "267": 77, "827": [77, 80], "2764": 77, "interchang": 77, "1604": 77, "1617": 77, "1624": 77, "1637": 77, "1769": 77, "1782": 77, "1781": 77, "1794": 77, "1800": 77, "1813": 77, "1809": 77, "1822": 77, "1812": 77, "1825": [77, 78], "528": 77, "529": 77, "530": 77, "183": 77, "185": 77, "309": 77, "312": 77, "315": 77, "11085": 77, "11088": 77, "11091": 77, "11094": 77, "reset": [77, 79, 82, 86, 87], "3606": 77, "positive_ion": 77, "search_term": 77, "176": 78, "9264": [78, 80], "47803": [78, 80], "1498": [78, 80], "044": 78, "capit": 78, "5679": 78, "4157": 78, "0337": [78, 79], "0823": 78, "0603": 78, "5973": 78, "1866": [78, 84, 85], "5371": [79, 99], "02707": [79, 99], "812": [79, 99], "00308134": 79, "0190426": 79, "00618047": 79, "cx": 79, "assig": 79, "charcoal": 79, "cover": 79, "criteria": 79, "del": 79, "unexpect": 79, "residue_cent": 80, "center_of_mass": 80, "respropertyproperti": 80, "0195": 80, "60992": 80, "5812": 80, "3873": 80, "27636": 80, "0041": 80, "residue_radiu": 80, "bounding_spher": 80, "chainpropertyproperti": 80, "5915": 80, "0365": 80, "132": 80, "2531": 80, "0725": 80, "387": 80, "6821": 80, "1885": 80, "5585": 80, "2047": 80, "3375": 80, "929": 80, "511": 80, "5556": 80, "exactli": [80, 92, 97, 98, 99], "seg_atom_count": 80, "segintproperti": 80, "gain": [80, 93], "complement": 81, "intramolecular": 81, "presenc": [82, 83, 84, 85], "109": [82, 87], "00007776856795": 82, "0563e": 82, "603571979020907e": 82, "60357e": 82, "54643": [82, 99], "20803": [82, 86], "65144e": 82, "2471e": 82, "997e": 82, "09482e": 82, "56699e": 82, "22857e": 82, "06535e": 82, "18497e": 82, "39824e": 82, "54821": [82, 88, 91], "60207e": 82, "189213": 82, "250565": 82, "27779": 82, "537132": 82, "179525": 82, "125648": 82, "45641": 82, "52335": 82, "sdf_field": 82, "889": 83, "8070966851826593": 83, "378849": 83, "5851034416908067": 83, "103": [83, 87], "539": 83, "112": [83, 87], "097": 83, "786": 83, "675": 83, "114": [83, 87, 90], "402": 83, "116134": 83, "0147076": 83, "0422992": 83, "0306092": 83, "125851": 83, "00296": 83, "559201": 83, "0010697": 83, "79189": [83, 88], "794168": 83, "17723": 83, "338535": 83, "365931": 83, "27753": 83, "231417": 83, "124129": 83, "105879": 83, "630416": 83, "875671": 83, "energy_kj": [83, 84, 85], "44143": [84, 85], "7584": [84, 85], "243": 84, "246059065416177": 84, "441489": 84, "8471895210066125": 84, "26777": 84, "647": [84, 87], "217581": 84, "216024": 84, "59964": 84, "327286": 84, "83498": 84, "756986": 84, "00734048": 84, "0113127": 84, "018104": 84, "04634": 84, "0619792": 84, "00115906": 84, "000509377": 84, "00189494": 84, "00521955": 84, "315842": 84, "398546": 84, "000479184": 84, "0018364": 84, "00512262": 84, "53259": [84, 88], "115083": 84, "84719": 84, "streroisom": 85, "sp2": 85, "2214": 85, "31498": 85, "7128": [85, 100], "82426": 85, "06674592039289437": 85, "0934184": 85, "39086262536239597": 85, "0353552": 85, "3041": [85, 87], "92025": 85, "3952e": 85, "0234049": 85, "235105": 85, "118281": 85, "390863": 85, "24385": 86, "491": 86, "5067": 86, "3414": 86, "0107": 86, "0118": 86, "4583": 86, "center_of_geometri": 86, "0674": 86, "24294": 86, "79671": 86, "148": 86, "946": 86, "5471": [86, 99], "50102": [86, 99], "6589": [86, 99], "unspecifi": [86, 95], "get_default": [86, 87], "2221": 86, "135": 86, "h7n9": 87, "501": 87, "hundr": 87, "atom_fram": 87, "res_fram": 87, "7759": 87, "2632": 87, "368": 87, "886": [87, 89], "7757": 87, "3506": [87, 90], "9594": 87, "4561": 87, "4458": 87, "3717": 87, "1966": 87, "1695": 87, "4568": 87, "847": 87, "778": 87, "1335": 87, "0555": 87, "4046": 87, "11524": 87, "11777": 87, "68127": 87, "00073": 87, "17744": 87, "05558": 87, "15149": 87, "14664": 87, "94698": 87, "57051": 87, "54928": 87, "16827": 87, "20729": 87, "855642": 87, "817883": 87, "022": 87, "04215": 87, "85613": 87, "818511": 87, "02247": 87, "04229": 87, "31649": 87, "992494": 87, "0131": 87, "966568": 87, "986925": 87, "disulfid": 87, "177": 87, "5098": 87, "672": 87, "735": 87, "1479": 87, "1736": [87, 89], "1586": 87, "2317": 87, "2343": 87, "2407": 87, "3217": 87, "3062": 87, "3193": 87, "3641": 87, "3905": 87, "5163": 87, "5600": 87, "bond_fram": 87, "97428": 87, "12148": 87, "01916": 87, "03011": 87, "92681": 87, "05971": 87, "00386": 87, "9727": 87, "06847": 87, "98437": 87, "bonds_fram": 87, "03112": 87, "07281": 87, "0191": 87, "04427": 87, "06217": 87, "06375": 87, "98086": 87, "00846": 87, "02085": 87, "01314": 87, "02394": 87, "03679": 87, "05127": 87, "13314": 87, "09479": 87, "01281": 87, "07407": 87, "13044": 87, "94306": 87, "02388": 87, "99157": 87, "0498": 87, "11982": 87, "reach": 87, "sensibli": 87, "86": 87, "106": 87, "108": 87, "111": 87, "113": 87, "115": [87, 91], "116": 87, "124": 87, "125": [87, 91], "127": 87, "129": 87, "pd": 87, "df": [87, 98], "072818": 87, "062594": 87, "021098": 87, "999742": 87, "974279": 87, "063749": 87, "980860": 87, "008463": 87, "121478": 87, "133144": 87, "094789": 87, "012815": 87, "019160": 87, "991572": 87, "049796": 87, "119825": 87, "030114": 87, "007170": 87, "034407": 87, "025154": 87, "007979": 87, "093643": 87, "129553": 87, "998281": 87, "090167": 87, "059819": 87, "061035": 87, "062557": 87, "002520": 87, "033194": 87, "083489": 87, "018089": 87, "982953": 87, "060742": 87, "037879": 87, "028096": 87, "031625": 87, "980140": 87, "012541": 87, "056832": 87, "set_index": 87, "427854": 87, "111583": 87, "207": 87, "281272": 87, "206": 87, "374869": 87, "198": 87, "086011": 87, "200": [87, 93], "846281": 87, "212": 87, "147805": 87, "084501": 87, "313832": 87, "213": 87, "314379": 87, "209": 87, "478942": 87, "281457": 87, "916013": 87, "407315": 87, "043633": 87, "199": 87, "157224": 87, "979606": 87, "211": 87, "982462": 87, "011406": 87, "894323": 87, "210": 87, "216122": 87, "717000": 87, "440735": 87, "515447": 87, "681088": 87, "214": 87, "281803": 87, "062654": 87, "174159": 87, "797178": 87, "317985": 87, "797944": 87, "558625": 87, "275560": 87, "364316": 87, "955313": 87, "828136": 87, "016654": 87, "201860": 87, "533046": 87, "981879": 87, "103546": 87, "255705": 87, "251952": 87, "760592": 87, "149639": 87, "319428": 87, "348883": 87, "808935": 87, "295320": [87, 91], "827007": 87, "950224": 87, "074165": 87, "787857": 87, "809601": 87, "162451": 87, "721804": 87, "524174": 87, "013967": 87, "254053": 87, "683203": 87, "measure_unit": 87, "249": 87, "001996": 87, "035907": 87, "038938": 87, "033885": 87, "042897": 87, "770508": 87, "767061": 87, "042161": 87, "039444": 87, "041783": 87, "043834": 87, "906496": 87, "889959": 87, "898634": 87, "898571": 87, "009903": 87, "012715": 87, "005647": 87, "014213": 87, "036705": 87, "038681": 87, "033499": 87, "044481": 87, "063463": 87, "066688": 87, "059552": 87, "074039": 87, "155093": 87, "185094": 87, "156298": 87, "172513": 87, "926811": 87, "dtype": 87, "float64": 87, "colnam": [87, 89], "036311": 87, "042506": 87, "907295": 87, "010268": 87, "038025": 87, "067480": 87, "164251": 87, "040398": 87, "039843": 87, "043430": 87, "042046": 87, "879551": 87, "900181": 87, "010126": 87, "011865": 87, "041413": 87, "042487": 87, "068816": 87, "065570": 87, "157295": 87, "171668": 87, "advantag": 87, "set_xlabel": 87, "set_ylabel": 87, "legend": 87, "bbox_to_anchor": 87, "pretty_plot": [87, 89, 96], "collaps": 87, "20th": 87, "174": 87, "5095": 87, "669": 87, "789": 87, "425": [87, 100], "161": 87, "456": [87, 90], "716": 87, "244": 87, "909": 87, "027": 87, "141": 87, "331": 87, "493": 87, "807": 87, "646778": 87, "789097": 87, "658280": 87, "123591": 87, "032015": 87, "878155": 87, "469532": 87, "718841": 87, "618866": 87, "850748": 87, "560527": 87, "500329": 87, "521915": 87, "566346": 87, "349405": 87, "866246": 87, "751753": 87, "915247": 87, "664555": 87, "813593": 87, "434050": 87, "855355": 87, "378153": 87, "463535": 87, "433986": 87, "148629": 87, "430144": 87, "493204": 87, "807238": 87, "656993": 87, "simplest": [87, 89, 98, 99], "6897": 87, "1249": 87, "5617": 87, "1862": 87, "0401": 87, "8125": 87, "216253": 87, "734178": 87, "378243": 87, "019010": 87, "861715": 87, "214334": 87, "257463": 87, "065931": 87, "582622": 87, "812486": 87, "first_to_cent": 87, "last_to_cent": 87, "547407": 87, "515619": 87, "095689": 87, "580996": 87, "544252": 87, "655505": 87, "016608": 87, "752940": 87, "535940": 87, "151461": 87, "030188": 87, "460664": 87, "851858": 87, "806361": 87, "685484": 87, "324784": 87, "512745": 87, "317341": 87, "131392": 87, "847973": 87, "115236": 87, "117770": 87, "681272": 87, "000726": 87, "153361": 87, "177437": 87, "055585": 87, "151492": 87, "146644": 87, "4855": 88, "89895": 88, "8953": 88, "nrg": 88, "10296": 88, "285078": [88, 91], "3702": 88, "8805": 88, "92034": 88, "5907": 88, "5485": 88, "186179": 88, "0143363": 88, "6869": 88, "905869": 88, "5136": [88, 90], "012299": 88, "4064": 88, "59062": 88, "106471": 88, "12332": 88, "90428": 88, "00857782": 88, "1969": 88, "877224": 88, "23544": 88, "got": 88, "alon": 88, "8435": 88, "8847": 88, "8614": 88, "709678": 88, "6333": 88, "609576": 88, "72327": 88, "0995291": 88, "863389": 88, "62748": 88, "1531": 88, "379": 88, "86089": 88, "39983": 88, "0325111": 88, "24037": 88, "112378": 88, "714725": 88, "64597": 88, "88331": 88, "7354": 88, "67356": 88, "99815": 88, "38936": 88, "477344": 88, "120511": 88, "950679": 88, "0489166": 88, "0414449": 88, "0270237": 88, "00493017": 88, "15308": 88, "805673": 88, "113608": 88, "147355": 88, "0893536": 88, "0101503": 88, "432695": 88, "0120518": 88, "5919": 89, "5974": [89, 96], "5928": 89, "5917": 89, "5968": 89, "8993": 89, "7754": 89, "9996": 89, "2822": 89, "4076": 89, "912": 89, "765545": 89, "398213": 89, "765132": 89, "919": 89, "494743": 89, "137252": 89, "747050": 89, "127388": 89, "458051": 89, "356098": 89, "949": 89, "652061": 89, "191512": 89, "368579": 89, "780763": 89, "393889": 89, "402629": 89, "890": 89, "741916": 89, "220005": 89, "5778": 89, "616773": 89, "907": 89, "572910": 89, "419100": 89, "5707": 89, "182338": 89, "446977": 89, "902056": 89, "5737": 89, "309043": 89, "842": 89, "364851": 89, "205034": 89, "5743": 89, "862524": 89, "816": 89, "979680": 89, "306437": 89, "5716": 89, "669273": 89, "691739": 89, "137251": 89, "808384": 89, "458050": 89, "096167": 89, "191511": 89, "585470": 89, "393885": 89, "215584": 89, "220004": 89, "472748": 89, "419098": 89, "704160": 89, "902059": 89, "015366": 89, "205031": 89, "606076": 89, "306436": 89, "646386": 89, "737847": 89, "161409": 89, "899257": 89, "301014": 89, "474372": 89, "775387": 89, "171437": 89, "828126": 89, "999562": 89, "793606": 89, "488562": 89, "282168": 89, "819129": 89, "588454": 89, "407583": 89, "093081": 89, "438605": 89, "531686": 89, "898056": 89, "568473": 89, "466528": 89, "513597": 89, "824760": 89, "338358": 89, "565213": 89, "923033": 89, "488247": 89, "696405": 89, "844028": 89, "540432": 89, "424470": 89, "597537": 89, "512649": 89, "194598": 89, "844606": 89, "571905": 89, "598631": 89, "791583": 89, "969358": 89, "008645": 89, "821351": 89, "937170": 89, "901480": 89, "660062": 89, "533581": 89, "594240": 89, "531951": 89, "623215": 89, "885362": 89, "394078": 89, "743051": 89, "644253": 89, "721723": 89, "478095": 89, "614500": 89, "950609": 89, "388795": 89, "842352": 89, "609999": 89, "472406": 89, "515561": 89, "965713": 89, "010526": 89, "909819": 89, "113659": 89, "324959": 89, "009025": 89, "173632": 89, "007010": 89, "907750": 89, "684035": 89, "155600": 89, "310871": 89, "685638": 89, "855937": 89, "300661": 89, "896125": 89, "184101": 89, "948842": 89, "073824": 89, "499993": 89, "461966": 89, "345364": 89, "867677": 89, "452924": 89, "290544": 89, "357558": 89, "525535": 89, "838606": 89, "306832": 89, "940949": 89, "327720": 89, "119488": 89, "783374": 89, "771940": 89, "388107": 89, "649792": 89, "883830": 89, "271354": 89, "174206": 89, "223427": 89, "550336": 89, "964084": 89, "074595": 89, "258177": 89, "052065": 89, "624932": 89, "222260": 89, "242855": 89, "941213": 89, "116947": 89, "348710": 89, "942912": 89, "425605": 89, "289923": 89, "059858": 89, "742510": 89, "968491": 89, "460435": 89, "125554": 89, "010830": 89, "434253": 89, "094045": 89, "471265": 89, "575444": 89, "994749": 89, "223413": 89, "412484": 89, "398933": 89, "252589": 89, "407233": 89, "622346": 89, "911613": 89, "534494": 89, "373022": 89, "911765": 89, "041907": 89, "546395": 89, "446259": 89, "414929": 89, "225835": 89, "586764": 89, "280482": 89, "946776": 89, "009359": 89, "708305": 89, "533540": 89, "289841": 89, "870466": 89, "693474": 89, "334115": 89, "086695": 89, "485933": 89, "866311": 89, "780169": 89, "820047": 89, "317239": 89, "137583": 89, "058775": 89, "248816": 89, "309371": 89, "583812": 89, "386399": 89, "368146": 89, "874906": 89, "254290": 89, "436018": 89, "124897": 89, "969899": 89, "703143": 89, "379187": 89, "405917": 89, "570392": 89, "671509": 89, "454505": 89, "341576": 89, "990427": 89, "082416": 89, "013085": 89, "444933": 89, "172479": 89, "145310": 89, "734309": 89, "422320": 89, "830321": 89, "916957": 89, "068533": 89, "293878": 89, "833780": 89, "329925": 89, "680069": 89, "459349": 89, "277433": 89, "119361": 89, "105670": 89, "903695": 89, "342441": 89, "597333": 89, "218850": 89, "293046": 89, "648526": 89, "335720": 89, "774262": 89, "820661": 89, "272544": 89, "131482": 89, "613490": 89, "462497": 89, "444502": 89, "993019": 89, "084804": 89, "092928": 89, "501087": 89, "260509": 89, "692395": 89, "903780": 89, "301822": 89, "055070": 89, "860013": 89, "782723": 89, "373809": 89, "595075": 89, "287670": 89, "167273": 89, "810351": 89, "201226": 89, "855330": 89, "161720": 89, "247033": 89, "071368": 89, "636738": 89, "162127": 89, "441049": 89, "020026": 89, "762106": 89, "001875": 89, "772173": 89, "378594": 89, "675099": 89, "996188": 89, "804882": 89, "180433": 89, "623493": 89, "417398": 89, "345863": 89, "744563": 89, "887233": 89, "519219": 89, "570195": 89, "630107": 89, "486087": 89, "305274": 89, "583037": 89, "152031": 89, "744566": 89, "144469": 89, "865922": 89, "661027": 89, "736126": 89, "418229": 89, "541341": 89, "465191": 89, "631658": 89, "578779": 89, "881839": 89, "581280": 89, "339605": 89, "761385": 89, "974929": 89, "758041": 89, "272158": 89, "628546": 89, "860815": 89, "768444": 89, "550181": 89, "597360": 89, "335519": 89, "910358": 89, "396877": 89, "686331": 89, "programmat": 89, "634133": 89, "715126": 89, "349259": 89, "036615": 89, "208598": 89, "245213": 89, "882135": 89, "783208": 89, "665343": 89, "223444": 89, "152490": 89, "375934": 89, "143589": 89, "110359": 89, "253948": 89, "293104": 89, "264990": 89, "971886": 89, "536769": 89, "334118": 89, "870887": 89, "742696": 89, "797462": 89, "540158": 89, "568741": 89, "099334": 89, "668075": 89, "961059": 89, "866724": 89, "827783": 89, "clearli": 89, "trend": 89, "diffus": 89, "3493": 89, "3147": 89, "6223": 89, "8416": 89, "6555": 89, "1635": 89, "4407": 89, "367": 89, "5333": 89, "6397": 90, "5028": 90, "4241": 90, "8521": 90, "6656": 90, "505": 90, "3373": 90, "9243": 90, "7322": 90, "5337": 90, "66419": 90, "0643": 90, "66444": 90, "1136": 90, "94164": 90, "9699": 90, "63481": 90, "4689": 90, "71803": 90, "2627": 90, "33939": 90, "8936": 90, "70237": 90, "22282": 90, "1983": 90, "29758": 90, "3293": 90, "04702": 90, "99007": 90, "3691": 90, "89526": 90, "3165": 90, "18119": 90, "2434": 90, "83634": 90, "557": 90, "84748": 90, "3796": 90, "10522": 90, "0348": 90, "43761": 90, "2577": 90, "88047": 90, "007": [90, 95], "97075": 90, "9061": 90, "85177": 90, "5321": 90, "2227": 90, "3659": 90, "9098": 90, "2068": 90, "9304": 90, "9526": 90, "8585": 90, "508": 90, "3571": 90, "9852": 90, "6756": 90, "9708": 90, "6111": 90, "1035": [90, 99], "7301": [90, 98], "3542": 90, "matric": 90, "30445": 90, "335": 90, "13672": 90, "1644": 90, "44371": 90, "9361": 90, "05975": 90, "3244": 90, "98505": 90, "3934": 90, "87955": 90, "5565": 90, "17844": 90, "8666": 90, "56761": 90, "4559": 90, "64338": 90, "6695": 90, "64857": 90, "rotmat": 90, "984808": 90, "173648": 90, "9353": 90, "3558": 90, "62609": 90, "1435": 90, "96806": 90, "972": 90, "53769": 90, "24812": 90, "5011": 90, "42131": 90, "69218": 90, "5927": 90, "98831": 90, "0669": 90, "01065": 90, "28589": 90, "8455": 90, "to_matrix": 90, "48035": 90, "7045": 90, "03905": 90, "4265": 90, "40561": 90, "9723": 90, "2085": 90, "41589": 90, "8715": 90, "89289": 90, "7475": 90, "18828": 90, "4571": 90, "41276": 90, "8019": 90, "3705": 90, "91791": 90, "6507": 90, "set_length": 91, "change_length": 91, "bond_cursor": 91, "920343": 91, "880519": 91, "791894": 91, "548210": 91, "532594": 91, "607594": 91, "652433": 91, "645588": 91, "366888": 91, "448164": 91, "327967": 91, "182746": 91, "267230": 91, "595345": 91, "043079": 91, "109161": 91, "447723": 91, "938407": 91, "973497": 91, "885102": 91, "861278": 91, "859784": 91, "907480": 91, "805813": 91, "767577": 91, "514858": 91, "767366": 91, "696436": 91, "707237": 91, "742254": 91, "645928": 91, "484615": 91, "727556": 91, "615627": 91, "846993": 91, "102960": 91, "370186": 91, "485492": 91, "076241": 91, "394975": 91, "043966": 91, "046408": 91, "442886": 91, "263291": 91, "014466": 91, "513222": 91, "127199": 91, "981224": 91, "605298": 91, "623007": 91, "947316": 91, "718473": 91, "740783": 91, "913235": 91, "852145": 91, "472728": 91, "879364": 91, "005697": 91, "812753": 91, "845992": 91, "178556": 91, "756056": 91, "813341": 91, "370160": 91, "298863": 91, "781567": 91, "579977": 91, "438198": 91, "set_siz": 91, "change_s": 91, "725": 91, "802": 91, "900211": 91, "456752": 91, "326211": 91, "533890": 91, "891062": 91, "151760": 91, "403285": 91, "533543": 91, "953834": 91, "940301": 91, "412892": 91, "533266": 91, "847938": 91, "811189": 91, "358399": 91, "533042": 91, "364667": 91, "754576": 91, "242185": 91, "532859": 91, "834074": 91, "761769": 91, "065959": 91, "532710": 91, "875548": 91, "825062": 91, "830962": 91, "532587": 91, "268087": 91, "937622": 91, "538100": 91, "532486": 91, "881119": 91, "093390": 91, "188025": 91, "532405": 91, "636824": 91, "287022": 91, "781193": 91, "532341": 91, "489374": 91, "513861": 91, "317903": 91, "532292": 91, "317684": 91, "043125": 91, "446533": 91, "679549": 91, "308098": 91, "833982": 91, "481881": 91, "188059": 91, "300869": 91, "163214": 91, "731143": 91, "121443": 91, "804292": 91, "161684": 91, "036707": 91, "291006": 91, "901951": 91, "747455": 91, "888000": 91, "287623": 91, "470122": 91, "467360": 91, "092862": 91, "284961": 91, "130151": 91, "304294": 91, "462885": 91, "282872": 91, "446705": 91, "244352": 91, "416321": 91, "281249": 91, "594252": 91, "276305": 91, "653841": 91, "280017": 91, "658877": 91, "391193": 91, "015537": 91, "279122": 91, "684468": 91, "582148": 91, "414145": 91, "163": 91, "039": 91, "903734": 91, "413449": 91, "206761": 91, "866713": 91, "060627": 91, "253447": 91, "879910": 91, "150792": 91, "674494": 91, "215898": 91, "524346": 91, "327498": 91, "605072": 91, "294830": 91, "980599": 91, "431110": 91, "620810": 91, "843168": 91, "221010": 91, "739679": 91, "406235": 91, "778984": 91, "691981": 91, "445042": 91, "696463": 91, "463628": 91, "872254": 91, "364056": 91, "437424": 91, "982017": 91, "347161": 91, "154732": 91, "243423": 91, "054636": 91, "361446": 91, "733043": 91, "236196": 91, "037819": 91, "531954": 91, "485350": 91, "416578": 91, "428450": 91, "543340": 91, "220497": 91, "015767": 91, "321": 91, "043305": 91, "911014": 91, "363": 91, "637974": 91, "246": 91, "990282": 91, "962216": 91, "288": 91, "548335": 91, "895676": 91, "766103": 91, "121679": 91, "624047": 91, "837995": 91, "327241": 91, "768052": 91, "352134": 91, "073444": 91, "297987": 91, "297191": 91, "409475": 91, "276564": 91, "440864": 91, "206198": 91, "102964": 91, "370172": 91, "485502": 91, "move_al": 91, "grain": 91, "auto_align": 91, "opposit": 91, "whle": 91, "relative_mass": 91, "linearli": [91, 98], "lightest": 91, "heaviest": 91, "absolute_mass": 91, "receiv": 91, "relative_numb": 91, "absolute_numb": 91, "immobil": 91, "interconvers": 92, "interoper": 92, "backend": 92, "bss_mol": 92, "bss_sy": 92, "getatom": 92, "cheminformat": 92, "machin": 92, "rdkit_mol": 92, "chem": [92, 94], "rdchem": 92, "0x10283da10": 92, "getnumatom": 92, "0x102c6a180": 92, "0x102c6a340": 92, "0x102c6a3b0": 92, "0x102c69d90": 92, "0x102c6a1f0": 92, "0x102c69af0": 92, "0x102c698c0": 92, "0x102c69bd0": 92, "0x102c69e00": 92, "0x102c69cb0": 92, "634": 92, "635": 92, "636": 92, "637": 92, "640": 92, "642": 92, "643": 92, "toolkit": 92, "0x14e95b510": 92, "0x14e9ee220": 92, "molfromsmil": [92, 94], "cc1ccccc1": 92, "moltosmil": [92, 94], "tutorialurl": 92, "bss_system": 92, "readmolecul": 92, "gettim": 92, "010000000000000002": 92, "leverag": 93, "neighbour": 93, "peptid": 93, "chlorid": 93, "h8": 94, "h9": 94, "h10": 94, "h11": 94, "h12": 94, "sanit": 94, "c1ccccc1": 94, "oc": 94, "discov": 94, "saw": 95, "viewe": 95, "introduct": 95, "ones": 95, "1965": 95, "1974": 95, "1984": 95, "1993": 95, "2395": 95, "2419": 95, "2430": 95, "2463": 95, "2475": 95, "signifi": 95, "6h3": 95, "7h": 95, "6h": 95, "lack": 95, "n4": 95, "c7": 95, "o8": 95, "n9": 95, "c10": 95, "formal_charg": 95, "atomhybrid": 95, "isotop": 95, "atomintproperti": 95, "011": 95, "atomchir": 95, "is_aromat": 95, "3786": 96, "7799": 96, "5855": 96, "7971": 96, "snapshot": 96, "82722": 96, "6010": 96, "previous": 96, "versu": 96, "interv": 96, "6020": 96, "6021": 96, "6071": 96, "5976": 96, "mesh": 96, "6081": 96, "6601": 96, "432": 96, "simpler": 96, "439": 96, "d2": 96, "440": 96, "prepar": 97, "ethan": 97, "methanol": 97, "merged_molecul": [97, 98, 100], "s3": [97, 98, 100], "biosimspace_system": 97, "4054": 97, "12167": [97, 98], "idenf": 97, "coordinates0": 97, "71278789630378": 97, "93752746353058": 97, "253932968775896": 97, "28721210369622": 97, "062578848992636": 97, "746067031224108": 97, "911542134040474": 97, "88985958968847": 97, "56394874111798": 97, "425045597240814": 97, "22062162179178": 97, "45094936681738": 97, "86160072175123": 97, "60943815695771": 97, "125882372721225": 97, "13839927824877": 97, "3906681555655": 97, "87411762727878": 97, "088796970412663": 97, "110140410311534": 97, "43511653656108": 97, "574954402759186": 97, "779484690731437": 97, "549050633182624": 97, "coordinates1": 97, "65553270521631": 97, "945670198487242": 97, "22503902796385": 97, "34753270521631": 97, "064670198487246": 97, "744039027963847": 97, "247532705216308": 97, "207670198487243": 97, "474039027963848": 97, "194532705216307": 97, "386670198487245": 97, "877039027963846": 97, "14453270521631": 97, "114670198487243": 97, "441039027963846": 97, "63753270521631": 97, "781670198487245": 97, "548039027963846": 97, "charge0": 97, "09435": 97, "03145": 97, "charge1": 97, "5988": 97, "1167": 97, "396": 97, "0287": 97, "element0": 97, "element1": 97, "tediou": 97, "pert": 97, "isol": 97, "pmf": 98, "forward": 98, "machineri": 98, "31213": 98, "sampl": 98, "4461": 98, "033219": 98, "43523": 98, "347617": 98, "6095": 98, "724385": 98, "41312": 98, "514682": 98, "6588": 98, "720597": 98, "40003": 98, "958276": 98, "6853": 98, "529444": 98, "39283": 98, "565112": 98, "7080": 98, "551573": 98, "38722": 98, "021135": 98, "7073": 98, "422652": 98, "38677": 98, "147808": 98, "7086": 98, "066481": 98, "38527": 98, "530217": 98, "7264": 98, "413320": 98, "38408": 98, "505361": 98, "7271": 98, "934837": 98, "38589": 98, "671709": 98, "7214": 98, "294605": 98, "38444": 98, "356221": 98, "40004": 98, "40712": 98, "392040": 98, "520657": 98, "684409": 98, "6154": 98, "441842": 98, "39714": 98, "124832": 98, "253449": 98, "327574": 98, "6611": 98, "854460": 98, "39152": 98, "132719": 98, "769223": 98, "39153": 98, "291484": 98, "6924": 98, "754530": 98, "38791": 98, "263933": 98, "601680": 98, "944687": 98, "7027": 98, "605561": 98, "38568": 98, "331333": 98, "519701": 98, "683453": 98, "7040": 98, "809156": 98, "38558": 98, "203465": 98, "302206": 98, "376331": 98, "7166": 98, "843369": 98, "38605": 98, "586352": 98, "38606": 98, "133229": 98, "595738": 98, "7195": 98, "020226": 98, "38618": 98, "731667": 98, "412148": 98, "068013": 98, "7170": 98, "302626": 98, "38611": 98, "651122": 98, "38612": 98, "317502": 98, "989142": 98, "7182": 98, "904255": 98, "11p": 98, "onward": 98, "evalut": 98, "20f": 98, "38389": 98, "435539": 98, "414777": 98, "279773": 98, "7332": 98, "296186": 98, "38353": 98, "913312": 98, "38354": 98, "131556": 98, "235557": 98, "874742": 98, "38371": 98, "599736": 98, "549099": 98, "384218": 98, "7293": 98, "633958": 98, "38253": 98, "351648": 98, "271135": 98, "195882": 98, "7186": 98, "511174": 98, "38305": 98, "305520": 98, "195131": 98, "090002": 98, "7234": 98, "784841": 98, "linear": 98, "mathrm": 98, "intermedi": 98, "interpol": 98, "lambda_schedul": 98, "hyperthet": 98, "evenli": 98, "gloabl": 98, "specifyig": 98, "decharg": 98, "\u03b3": 98, "torsion_k": 98, "dih_scal": 98, "updateparametersincontext": 98, "vanilla": 98, "challeng": 98, "grown": 98, "instabl": 98, "soft": 98, "\u03b1": 98, "decoupl": [98, 99], "dual": 98, "convieni": 98, "sommcontext": 98, "inherit": 98, "get_lambda_schedul": 98, "set_lambda_schedul": 98, "get_energi": 98, "to_sire_unit": 98, "get_potential_energi": 98, "38727": 98, "38743": 98, "positionalrestraint": [99, 100], "0464": 99, "38937": 99, "2588": 99, "3698": 99, "19397": 99, "bubbl": 99, "358": 99, "353": 99, "1892": 99, "354": 99, "1893": 99, "355": 99, "356": 99, "357": 99, "1894": 99, "71245": 99, "48642": 99, "2847": 99, "8445": 99, "9183": 99, "5108": 99, "18423": 99, "1897": 99, "52934": 99, "7207": 99, "8053": 99, "04142": 99, "apart": 99, "pos_rest": [99, 100], "dst_rest": [99, 100], "blow": 99, "1915": 99, "mappabl": 99, "solvent": 99, "nearbi": 99, "mobil": 99, "satisfi": 99, "safest": 99, "conserv": 99, "heat": 99, "bath": 99, "mutat": 100, "restraints_on": 100, "restraints_off": 100, "peturb": 100, "9375": 100, "2539": 100, "2872": 100, "0626": 100, "7461": 100, "9115": 100, "8899": 100, "5639": 100, "2206": 100, "4509": 100, "8616": 100, "6094": 100, "1384": 100, "3907": 100, "8741": 100, "0888": 100, "1101": 100, "4351": 100, "7795": 100, "5491": 100, "5185": 100, "distance_restraint": 100, "positional_restraint": 100}, "objects": {"": [[28, 0, 0, "-", "sire"]], "sire": [[28, 1, 1, "", "atomid"], [1, 0, 0, "-", "base"], [2, 0, 0, "-", "cas"], [28, 1, 1, "", "chainid"], [3, 0, 0, "-", "convert"], [28, 1, 1, "", "expand"], [28, 1, 1, "", "get_max_num_threads"], [20, 0, 0, "-", "io"], [28, 1, 1, "", "load"], [28, 1, 1, "", "load_test_files"], [28, 1, 1, "", "match_atoms"], [22, 0, 0, "-", "maths"], [28, 1, 1, "", "measure"], [28, 1, 1, "", "minimum_distance"], [23, 0, 0, "-", "mm"], [24, 0, 0, "-", "mol"], [28, 1, 1, "", "molid"], [25, 0, 0, "-", "morph"], [26, 0, 0, "-", "restraints"], [28, 1, 1, "", "save"], [28, 1, 1, "", "save_to_string"], [27, 0, 0, "-", "search"], [28, 1, 1, "", "segid"], [28, 1, 1, "", "set_default_num_threads"], [28, 1, 1, "", "set_max_num_threads"], [28, 1, 1, "", "smarts"], [28, 1, 1, "", "smiles"], [30, 0, 0, "-", "stream"], [28, 1, 1, "", "supported_formats"], [31, 0, 0, "-", "system"], [28, 4, 1, "", "tutorial_url"], [28, 1, 1, "", "u"], [32, 0, 0, "-", "units"], [28, 1, 1, "", "use_mixed_api"], [28, 1, 1, "", "use_new_api"], [28, 1, 1, "", "use_old_api"], [33, 0, 0, "-", "utils"], [34, 0, 0, "-", "vol"]], "sire.base": [[1, 2, 1, "", "PropertyMap"], [1, 1, 1, "", "create_map"], [1, 1, 1, "", "wrap"]], "sire.base.PropertyMap": [[1, 3, 1, "", "add_prefix"], [1, 3, 1, "", "add_suffix"], [1, 3, 1, "", "assign"], [1, 3, 1, "", "clone"], [1, 3, 1, "", "is_default"], [1, 3, 1, "", "merge"], [1, 3, 1, "", "specified"], [1, 3, 1, "", "to_dict"], [1, 3, 1, "", "to_string"], [1, 3, 1, "", "typename"], [1, 3, 1, "", "what"]], "sire.cas": [[2, 2, 1, "", "Expression"], [2, 2, 1, "", "LambdaSchedule"], [2, 2, 1, "", "Symbol"], [2, 4, 1, "", "lam"], [2, 4, 1, "", "x"], [2, 4, 1, "", "y"]], "sire.cas.Expression": [[2, 3, 1, "", "add"], [2, 3, 1, "", "assign"], [2, 3, 1, "", "base"], [2, 3, 1, "", "children"], [2, 3, 1, "", "clone"], [2, 3, 1, "", "conjugate"], [2, 3, 1, "", "cubed"], [2, 3, 1, "", "diff"], [2, 3, 1, "", "differentiate"], [2, 3, 1, "", "divide"], [2, 3, 1, "", "evaluate"], [2, 3, 1, "", "expand"], [2, 3, 1, "", "factor"], [2, 3, 1, "", "functions"], [2, 3, 1, "", "hash"], [2, 3, 1, "", "integ"], [2, 3, 1, "", "integrate"], [2, 3, 1, "", "invert"], [2, 3, 1, "", "is_complex"], [2, 3, 1, "", "is_compound"], [2, 3, 1, "", "is_constant"], [2, 3, 1, "", "is_function"], [2, 3, 1, "", "is_zero"], [2, 3, 1, "", "multiply"], [2, 3, 1, "", "negate"], [2, 3, 1, "", "pow"], [2, 3, 1, "", "root"], [2, 3, 1, "", "series"], [2, 3, 1, "", "simplify"], [2, 3, 1, "", "squared"], [2, 3, 1, "", "substitute"], [2, 3, 1, "", "subtract"], [2, 3, 1, "", "symbols"], [2, 3, 1, "", "to_open_m_m_string"], [2, 3, 1, "", "to_string"], [2, 3, 1, "", "typename"], [2, 3, 1, "", "what"]], "sire.cas.LambdaSchedule": [[2, 3, 1, "", "add_charge_scale_stages"], [2, 3, 1, "", "add_lever"], [2, 3, 1, "", "add_levers"], [2, 3, 1, "", "add_morph_stage"], [2, 3, 1, "", "add_stage"], [2, 3, 1, "", "append_stage"], [2, 3, 1, "", "assign"], [2, 3, 1, "", "charge_scaled_morph"], [2, 3, 1, "", "clamp"], [2, 3, 1, "", "clear"], [2, 3, 1, "", "clone"], [2, 3, 1, "", "final"], [2, 3, 1, "", "get_constant"], [2, 3, 1, "", "get_constant_symbol"], [2, 3, 1, "", "get_equation"], [2, 3, 1, "", "get_lambda_in_stage"], [2, 3, 1, "", "get_lever_stages"], [2, 3, 1, "", "get_lever_values"], [2, 3, 1, "", "get_levers"], [2, 3, 1, "", "get_stage"], [2, 3, 1, "", "get_stages"], [2, 3, 1, "", "initial"], [2, 3, 1, "", "insert_stage"], [2, 3, 1, "", "is_null"], [2, 3, 1, "", "lam"], [2, 3, 1, "", "morph"], [2, 3, 1, "", "num_levers"], [2, 3, 1, "", "num_stages"], [2, 3, 1, "", "prepend_stage"], [2, 3, 1, "", "remove_equation"], [2, 3, 1, "", "remove_lever"], [2, 3, 1, "", "remove_levers"], [2, 3, 1, "", "set_constant"], [2, 3, 1, "", "set_default_equation"], [2, 3, 1, "", "set_equation"], [2, 3, 1, "", "standard_morph"], [2, 3, 1, "", "to_string"], [2, 3, 1, "", "typename"], [2, 3, 1, "", "what"]], "sire.cas.Symbol": [[2, 3, 1, "", "assign"], [2, 3, 1, "", "children"], [2, 3, 1, "", "clone"], [2, 3, 1, "", "differentiate"], [2, 3, 1, "", "evaluate"], [2, 3, 1, "", "expand"], [2, 3, 1, "", "functions"], [2, 3, 1, "", "hash"], [2, 3, 1, "", "id"], [2, 3, 1, "", "integrate"], [2, 3, 1, "", "is_constant"], [2, 3, 1, "", "is_function"], [2, 3, 1, "", "is_null"], [2, 3, 1, "", "substitute"], [2, 3, 1, "", "symbols"], [2, 3, 1, "", "to_string"], [2, 3, 1, "", "typename"], [2, 3, 1, "", "what"]], "sire.convert": [[3, 1, 1, "", "biosimspace_to_sire"], [3, 1, 1, "", "openmm_to_sire"], [3, 1, 1, "", "rdkit_to_sire"], [3, 1, 1, "", "sire_to_biosimspace"], [3, 1, 1, "", "sire_to_openmm"], [3, 1, 1, "", "sire_to_rdkit"], [3, 1, 1, "", "supported_formats"], [3, 1, 1, "", "to"], [3, 1, 1, "", "to_biosimspace"], [3, 1, 1, "", "to_openmm"], [3, 1, 1, "", "to_rdkit"], [3, 1, 1, "", "to_sire"]], "sire.io": [[20, 1, 1, "", "get_coords_array"], [21, 0, 0, "-", "parser"], [20, 1, 1, "", "resolve_path"]], "sire.io.parser": [[21, 2, 1, "", "DCD"], [21, 5, 1, "", "G87"], [21, 5, 1, "", "GTOP"], [21, 5, 1, "", "MOL2"], [21, 5, 1, "", "PDB"], [21, 5, 1, "", "PRM"], [21, 5, 1, "", "PSF"], [21, 5, 1, "", "RST"], [21, 5, 1, "", "RST7"], [21, 2, 1, "", "SDF"], [21, 5, 1, "", "TRAJ"], [21, 2, 1, "", "TRR"], [21, 2, 1, "", "XTC"]], "sire.io.parser.DCD": [[21, 3, 1, "", "assign"], [21, 3, 1, "", "clone"], [21, 3, 1, "", "construct"], [21, 3, 1, "", "count"], [21, 3, 1, "", "disable_parallel"], [21, 3, 1, "", "enable_parallel"], [21, 3, 1, "", "error_report"], [21, 3, 1, "", "format_description"], [21, 3, 1, "", "format_name"], [21, 3, 1, "", "format_suffix"], [21, 3, 1, "", "get_frame"], [21, 3, 1, "", "has_warnings"], [21, 3, 1, "", "is_binary_file"], [21, 3, 1, "", "is_broken"], [21, 3, 1, "", "is_empty"], [21, 3, 1, "", "is_frame"], [21, 3, 1, "", "is_supplementary"], [21, 3, 1, "", "is_text_file"], [21, 3, 1, "", "is_topology"], [21, 3, 1, "", "num_atoms"], [21, 3, 1, "", "num_frames"], [21, 3, 1, "", "parse"], [21, 3, 1, "", "set_use_parallel"], [21, 3, 1, "", "size"], [21, 3, 1, "", "supported_formats"], [21, 3, 1, "", "to_string"], [21, 3, 1, "", "to_system"], [21, 3, 1, "", "typename"], [21, 3, 1, "", "uses_parallel"], [21, 3, 1, "", "what"], [21, 3, 1, "", "write_to_file"]], "sire.io.parser.SDF": [[21, 3, 1, "", "assign"], [21, 3, 1, "", "clone"], [21, 3, 1, "", "construct"], [21, 3, 1, "", "format_description"], [21, 3, 1, "", "format_name"], [21, 3, 1, "", "format_suffix"], [21, 3, 1, "", "get_frame"], [21, 3, 1, "", "is_frame"], [21, 3, 1, "", "is_topology"], [21, 3, 1, "", "num_atoms"], [21, 3, 1, "", "num_frames"], [21, 3, 1, "", "num_molecules"], [21, 3, 1, "", "parse_warnings"], [21, 3, 1, "", "to_string"], [21, 3, 1, "", "typename"], [21, 3, 1, "", "what"]], "sire.io.parser.TRR": [[21, 3, 1, "", "assign"], [21, 3, 1, "", "clone"], [21, 3, 1, "", "construct"], [21, 3, 1, "", "count"], [21, 3, 1, "", "format_description"], [21, 3, 1, "", "format_name"], [21, 3, 1, "", "format_suffix"], [21, 3, 1, "", "get_frame"], [21, 3, 1, "", "is_frame"], [21, 3, 1, "", "is_text_file"], [21, 3, 1, "", "num_atoms"], [21, 3, 1, "", "num_frames"], [21, 3, 1, "", "parse"], [21, 3, 1, "", "size"], [21, 3, 1, "", "to_string"], [21, 3, 1, "", "typename"], [21, 3, 1, "", "what"], [21, 3, 1, "", "write_to_file"]], "sire.io.parser.XTC": [[21, 3, 1, "", "assign"], [21, 3, 1, "", "clone"], [21, 3, 1, "", "construct"], [21, 3, 1, "", "count"], [21, 3, 1, "", "format_description"], [21, 3, 1, "", "format_name"], [21, 3, 1, "", "format_suffix"], [21, 3, 1, "", "get_frame"], [21, 3, 1, "", "is_frame"], [21, 3, 1, "", "is_text_file"], [21, 3, 1, "", "num_atoms"], [21, 3, 1, "", "num_frames"], [21, 3, 1, "", "parse"], [21, 3, 1, "", "size"], [21, 3, 1, "", "to_string"], [21, 3, 1, "", "typename"], [21, 3, 1, "", "what"], [21, 3, 1, "", "write_to_file"]], "sire.maths": [[22, 2, 1, "", "EnergyTrajectory"], [22, 2, 1, "", "Matrix"], [22, 2, 1, "", "RanGenerator"], [22, 2, 1, "", "Sphere"], [22, 2, 1, "", "Torsion"], [22, 2, 1, "", "Transform"], [22, 2, 1, "", "Triangle"], [22, 2, 1, "", "Vector"], [22, 1, 1, "", "align"], [22, 1, 1, "", "create_quaternion"], [22, 1, 1, "", "get_alignment"], [22, 1, 1, "", "kabasch"], [22, 1, 1, "", "kabasch_fit"], [22, 4, 1, "", "pi"]], "sire.maths.EnergyTrajectory": [[22, 3, 1, "", "assign"], [22, 3, 1, "", "clone"], [22, 3, 1, "", "count"], [22, 3, 1, "", "energies"], [22, 3, 1, "", "get"], [22, 3, 1, "", "is_empty"], [22, 3, 1, "", "is_null"], [22, 3, 1, "", "keys"], [22, 3, 1, "", "set"], [22, 3, 1, "", "size"], [22, 3, 1, "", "times"], [22, 3, 1, "", "to_pandas"], [22, 3, 1, "", "to_string"], [22, 3, 1, "", "typename"], [22, 3, 1, "", "what"]], "sire.maths.Matrix": [[22, 3, 1, "", "assign"], [22, 3, 1, "", "at"], [22, 3, 1, "", "checked_offset"], [22, 3, 1, "", "clone"], [22, 3, 1, "", "column0"], [22, 3, 1, "", "column1"], [22, 3, 1, "", "column2"], [22, 3, 1, "", "covariance"], [22, 3, 1, "", "determinant"], [22, 3, 1, "", "diagonal"], [22, 3, 1, "", "diagonalise"], [22, 3, 1, "", "enforce_symmetric"], [22, 3, 1, "", "get_principal_axes"], [22, 3, 1, "", "identity"], [22, 3, 1, "", "inverse"], [22, 3, 1, "", "is_diagonal"], [22, 3, 1, "", "is_identity"], [22, 3, 1, "", "is_symmetric"], [22, 3, 1, "", "is_zero"], [22, 3, 1, "", "offset"], [22, 3, 1, "", "row0"], [22, 3, 1, "", "row1"], [22, 3, 1, "", "row2"], [22, 3, 1, "", "set_to_identity"], [22, 3, 1, "", "single_value_decomposition"], [22, 3, 1, "", "svd"], [22, 3, 1, "", "to_string"], [22, 3, 1, "", "trace"], [22, 3, 1, "", "transpose"], [22, 3, 1, "", "typename"], [22, 3, 1, "", "what"], [22, 3, 1, "", "xx"], [22, 3, 1, "", "xy"], [22, 3, 1, "", "xz"], [22, 3, 1, "", "yx"], [22, 3, 1, "", "yy"], [22, 3, 1, "", "yz"], [22, 3, 1, "", "zero"], [22, 3, 1, "", "zx"], [22, 3, 1, "", "zy"], [22, 3, 1, "", "zz"]], "sire.maths.RanGenerator": [[22, 3, 1, "", "assign"], [22, 3, 1, "", "clone"], [22, 3, 1, "", "detach"], [22, 3, 1, "", "get_state"], [22, 3, 1, "", "global"], [22, 3, 1, "", "lock"], [22, 3, 1, "", "locked_rand"], [22, 3, 1, "", "locked_rand_norm"], [22, 3, 1, "", "locked_vector_on_sphere"], [22, 3, 1, "", "nrand"], [22, 3, 1, "", "nrand_norm"], [22, 3, 1, "", "nvector_on_sphere"], [22, 3, 1, "", "rand"], [22, 3, 1, "", "rand53"], [22, 3, 1, "", "rand_bool"], [22, 3, 1, "", "rand_int"], [22, 3, 1, "", "rand_int64"], [22, 3, 1, "", "rand_norm"], [22, 3, 1, "", "seed"], [22, 3, 1, "", "seed_global"], [22, 3, 1, "", "set_state"], [22, 3, 1, "", "typename"], [22, 3, 1, "", "unlock"], [22, 3, 1, "", "vector_on_sphere"], [22, 3, 1, "", "what"]], "sire.maths.Torsion": [[22, 3, 1, "", "angle"], [22, 3, 1, "", "at"], [22, 3, 1, "", "clone"], [22, 3, 1, "", "count"], [22, 3, 1, "", "improper_angle"], [22, 3, 1, "", "line03"], [22, 3, 1, "", "line12"], [22, 3, 1, "", "point"], [22, 3, 1, "", "to_string"], [22, 3, 1, "", "triangle1"], [22, 3, 1, "", "triangle2"], [22, 3, 1, "", "typename"], [22, 3, 1, "", "vector03"], [22, 3, 1, "", "vector12"], [22, 3, 1, "", "what"]], "sire.maths.Transform": [[22, 3, 1, "", "apply"], [22, 3, 1, "", "assign"], [22, 3, 1, "", "clone"], [22, 3, 1, "", "inverse"], [22, 3, 1, "", "is_null"], [22, 3, 1, "", "is_zero"], [22, 3, 1, "", "reverse"], [22, 3, 1, "", "rotation_center"], [22, 3, 1, "", "rotation_matrix"], [22, 3, 1, "", "rotation_quaternion"], [22, 3, 1, "", "to_string"], [22, 3, 1, "", "translation_delta"], [22, 3, 1, "", "typename"], [22, 3, 1, "", "what"]], "sire.maths.Triangle": [[22, 3, 1, "", "angle"], [22, 3, 1, "", "angle0"], [22, 3, 1, "", "angle1"], [22, 3, 1, "", "angle2"], [22, 3, 1, "", "at"], [22, 3, 1, "", "clone"], [22, 3, 1, "", "count"], [22, 3, 1, "", "line0"], [22, 3, 1, "", "line1"], [22, 3, 1, "", "line2"], [22, 3, 1, "", "point"], [22, 3, 1, "", "to_string"], [22, 3, 1, "", "typename"], [22, 3, 1, "", "vector"], [22, 3, 1, "", "vector0"], [22, 3, 1, "", "vector1"], [22, 3, 1, "", "vector2"], [22, 3, 1, "", "what"]], "sire.mm": [[23, 2, 1, "", "AmberAngle"], [23, 2, 1, "", "AmberBond"], [23, 2, 1, "", "AmberDihPart"], [23, 2, 1, "", "AmberDihedral"], [23, 2, 1, "", "Angle"], [23, 2, 1, "", "Bond"], [23, 2, 1, "", "BondRestraint"], [23, 2, 1, "", "BondRestraints"], [23, 2, 1, "", "Dihedral"], [23, 2, 1, "", "Improper"], [23, 2, 1, "", "LJParameter"], [23, 2, 1, "", "SelectorAngle"], [23, 2, 1, "", "SelectorBond"], [23, 2, 1, "", "SelectorDihedral"], [23, 2, 1, "", "SelectorImproper"], [23, 2, 1, "", "SelectorMAngle"], [23, 2, 1, "", "SelectorMBond"], [23, 2, 1, "", "SelectorMDihedral"], [23, 2, 1, "", "SelectorMImproper"]], "sire.mm.AmberAngle": [[23, 3, 1, "", "assign"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "hash"], [23, 3, 1, "", "k"], [23, 3, 1, "", "theta0"], [23, 3, 1, "", "to_expression"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.AmberBond": [[23, 3, 1, "", "assign"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "hash"], [23, 3, 1, "", "k"], [23, 3, 1, "", "r0"], [23, 3, 1, "", "to_expression"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.AmberDihPart": [[23, 3, 1, "", "assign"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "hash"], [23, 3, 1, "", "k"], [23, 3, 1, "", "periodicity"], [23, 3, 1, "", "phase"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.AmberDihedral": [[23, 3, 1, "", "assign"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "hash"], [23, 3, 1, "", "terms"], [23, 3, 1, "", "to_expression"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.Angle": [[23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom0"], [23, 3, 1, "", "atom1"], [23, 3, 1, "", "atom2"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "id"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measure"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "potential"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "selector"], [23, 3, 1, "", "size"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.Bond": [[23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom0"], [23, 3, 1, "", "atom1"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "id"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "length"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measure"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "potential"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "selector"], [23, 3, 1, "", "size"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.BondRestraint": [[23, 3, 1, "", "assign"], [23, 3, 1, "", "atom0"], [23, 3, 1, "", "atom1"], [23, 3, 1, "", "atoms0"], [23, 3, 1, "", "atoms1"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "is_atom_restraint"], [23, 3, 1, "", "is_centroid_restraint"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "k"], [23, 3, 1, "", "r0"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.BondRestraints": [[23, 3, 1, "", "add"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "at"], [23, 3, 1, "", "atom_restraints"], [23, 3, 1, "", "centroid_restraints"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "count"], [23, 3, 1, "", "has_atom_restraints"], [23, 3, 1, "", "has_centroid_restraints"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_restraints"], [23, 3, 1, "", "num_atom_restraints"], [23, 3, 1, "", "num_centroid_restraints"], [23, 3, 1, "", "num_restraints"], [23, 3, 1, "", "restraints"], [23, 3, 1, "", "set_name"], [23, 3, 1, "", "size"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.Dihedral": [[23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom0"], [23, 3, 1, "", "atom1"], [23, 3, 1, "", "atom2"], [23, 3, 1, "", "atom3"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "id"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measure"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "potential"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "selector"], [23, 3, 1, "", "size"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.Improper": [[23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom0"], [23, 3, 1, "", "atom1"], [23, 3, 1, "", "atom2"], [23, 3, 1, "", "atom3"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "id"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measure"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "phi"], [23, 3, 1, "", "potential"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "selector"], [23, 3, 1, "", "size"], [23, 3, 1, "", "theta"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"]], "sire.mm.LJParameter": [[23, 3, 1, "", "a"], [23, 3, 1, "", "b"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "combine"], [23, 3, 1, "", "combine_arithmetic"], [23, 3, 1, "", "combine_geometric"], [23, 5, 1, "", "combining_rules"], [23, 3, 1, "", "dummy"], [23, 3, 1, "", "epsilon"], [23, 3, 1, "", "from_and_b"], [23, 3, 1, "", "from_r_min_and_epsilon"], [23, 3, 1, "", "from_sigma_and_epsilon"], [23, 3, 1, "", "is_dummy"], [23, 3, 1, "", "rmin"], [23, 3, 1, "", "sigma"], [23, 3, 1, "", "sqrt_epsilon"], [23, 3, 1, "", "sqrt_sigma"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "what"], [23, 3, 1, "", "zero_l_j"]], "sire.mm.SelectorAngle": [[23, 3, 1, "", "add"], [23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "size"], [23, 3, 1, "", "sizes"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "view"], [23, 3, 1, "", "what"]], "sire.mm.SelectorBond": [[23, 3, 1, "", "add"], [23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "lengths"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "size"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "view"], [23, 3, 1, "", "what"]], "sire.mm.SelectorDihedral": [[23, 3, 1, "", "add"], [23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "size"], [23, 3, 1, "", "sizes"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "view"], [23, 3, 1, "", "what"]], "sire.mm.SelectorImproper": [[23, 3, 1, "", "add"], [23, 3, 1, "", "assert_contains"], [23, 3, 1, "", "assert_has_metadata"], [23, 3, 1, "", "assert_has_property"], [23, 3, 1, "", "assert_same_molecule"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atoms"], [23, 3, 1, "", "chains"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "const_data"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cursor"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "get_link"], [23, 3, 1, "", "get_links"], [23, 3, 1, "", "has_links"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_link"], [23, 3, 1, "", "is_null"], [23, 3, 1, "", "is_same_molecule"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "metadata_type"], [23, 3, 1, "", "molecules"], [23, 3, 1, "", "move"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "num_views"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "property_type"], [23, 3, 1, "", "residues"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "segments"], [23, 3, 1, "", "select_all"], [23, 3, 1, "", "select_all_atoms"], [23, 3, 1, "", "select_all_chains"], [23, 3, 1, "", "select_all_cutgroups"], [23, 3, 1, "", "select_all_residues"], [23, 3, 1, "", "select_all_segments"], [23, 3, 1, "", "selected_all"], [23, 3, 1, "", "selection"], [23, 3, 1, "", "size"], [23, 3, 1, "", "sizes"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_selector"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "view"], [23, 3, 1, "", "what"]], "sire.mm.SelectorMAngle": [[23, 3, 1, "", "add"], [23, 3, 1, "", "apply"], [23, 3, 1, "", "apply_reduce"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom"], [23, 3, 1, "", "chain"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "dynamics"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "extract"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "minimisation"], [23, 3, 1, "", "molecule"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_molecules"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "residue"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "search"], [23, 3, 1, "", "segment"], [23, 3, 1, "", "size"], [23, 3, 1, "", "sizes"], [23, 3, 1, "", "smarts"], [23, 3, 1, "", "smiles"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecule_group"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_select_result"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "trajectory"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "update"], [23, 3, 1, "", "view"]], "sire.mm.SelectorMBond": [[23, 3, 1, "", "add"], [23, 3, 1, "", "apply"], [23, 3, 1, "", "apply_reduce"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom"], [23, 3, 1, "", "chain"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "dynamics"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "extract"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "lengths"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "minimisation"], [23, 3, 1, "", "molecule"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_molecules"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "residue"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "search"], [23, 3, 1, "", "segment"], [23, 3, 1, "", "size"], [23, 3, 1, "", "smarts"], [23, 3, 1, "", "smiles"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecule_group"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_select_result"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "trajectory"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "update"], [23, 3, 1, "", "view"]], "sire.mm.SelectorMDihedral": [[23, 3, 1, "", "add"], [23, 3, 1, "", "apply"], [23, 3, 1, "", "apply_reduce"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom"], [23, 3, 1, "", "chain"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "dynamics"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "extract"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "minimisation"], [23, 3, 1, "", "molecule"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_molecules"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "residue"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "search"], [23, 3, 1, "", "segment"], [23, 3, 1, "", "size"], [23, 3, 1, "", "sizes"], [23, 3, 1, "", "smarts"], [23, 3, 1, "", "smiles"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecule_group"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_select_result"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "trajectory"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "update"], [23, 3, 1, "", "view"]], "sire.mm.SelectorMImproper": [[23, 3, 1, "", "add"], [23, 3, 1, "", "apply"], [23, 3, 1, "", "apply_reduce"], [23, 3, 1, "", "assign"], [23, 3, 1, "", "atom"], [23, 3, 1, "", "chain"], [23, 3, 1, "", "clone"], [23, 3, 1, "", "count"], [23, 3, 1, "", "cutgroup"], [23, 3, 1, "", "cutgroups"], [23, 3, 1, "", "delete_all_frames"], [23, 3, 1, "", "delete_frame"], [23, 3, 1, "", "dynamics"], [23, 3, 1, "", "energies"], [23, 3, 1, "", "energy"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "extract"], [23, 3, 1, "", "has_metadata"], [23, 3, 1, "", "has_property"], [23, 3, 1, "", "ids"], [23, 3, 1, "", "intersection"], [23, 3, 1, "", "invert"], [23, 3, 1, "", "is_empty"], [23, 3, 1, "", "is_selector"], [23, 3, 1, "", "load_frame"], [23, 3, 1, "", "measures"], [23, 3, 1, "", "metadata_keys"], [23, 3, 1, "", "minimisation"], [23, 3, 1, "", "molecule"], [23, 3, 1, "", "num_atoms"], [23, 3, 1, "", "num_chains"], [23, 3, 1, "", "num_cutgroups"], [23, 3, 1, "", "num_frames"], [23, 3, 1, "", "num_molecules"], [23, 3, 1, "", "num_residues"], [23, 3, 1, "", "num_segments"], [23, 3, 1, "", "potentials"], [23, 3, 1, "", "properties"], [23, 3, 1, "", "property_keys"], [23, 3, 1, "", "residue"], [23, 3, 1, "", "save_frame"], [23, 3, 1, "", "search"], [23, 3, 1, "", "segment"], [23, 3, 1, "", "size"], [23, 3, 1, "", "sizes"], [23, 3, 1, "", "smarts"], [23, 3, 1, "", "smiles"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_molecule_group"], [23, 3, 1, "", "to_molecules"], [23, 3, 1, "", "to_select_result"], [23, 3, 1, "", "to_string"], [23, 3, 1, "", "trajectory"], [23, 3, 1, "", "typename"], [23, 3, 1, "", "update"], [23, 3, 1, "", "view"]], "sire.mol": [[24, 2, 1, "", "Atom"], [24, 2, 1, "", "AtomIdx"], [24, 2, 1, "", "AtomMapping"], [24, 2, 1, "", "AtomMatch"], [24, 2, 1, "", "AtomMatchM"], [24, 2, 1, "", "AtomName"], [24, 2, 1, "", "AtomNum"], [24, 2, 1, "", "BondOrder"], [24, 2, 1, "", "Chain"], [24, 2, 1, "", "ChainIdx"], [24, 2, 1, "", "ChainName"], [24, 2, 1, "", "Cursor"], [24, 2, 1, "", "Cursors"], [24, 2, 1, "", "CursorsM"], [24, 2, 1, "", "Dynamics"], [24, 2, 1, "", "Element"], [24, 2, 1, "", "Minimisation"], [24, 2, 1, "", "MolIdx"], [24, 2, 1, "", "MolName"], [24, 2, 1, "", "MolNum"], [24, 2, 1, "", "Molecule"], [24, 2, 1, "", "ResIdx"], [24, 2, 1, "", "ResName"], [24, 2, 1, "", "ResNum"], [24, 2, 1, "", "Residue"], [24, 2, 1, "", "SegIdx"], [24, 2, 1, "", "SegName"], [24, 2, 1, "", "Segment"], [24, 2, 1, "", "SelectorMol"], [24, 2, 1, "", "Stereochemistry"], [24, 2, 1, "", "TrajectoryIterator"], [24, 1, 1, "", "get_alignment"], [24, 1, 1, "", "is_water"], [24, 1, 1, "", "selection_to_atoms"]], "sire.mol.Atom": [[24, 3, 1, "", "assert_contains"], [24, 3, 1, "", "assert_contains_metadata"], [24, 3, 1, "", "assert_contains_property"], [24, 3, 1, "", "assert_has_metadata"], [24, 3, 1, "", "assert_has_property"], [24, 3, 1, "", "assert_same_molecule"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "cg_atom_idx"], [24, 3, 1, "", "chain"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "const_data"], [24, 3, 1, "", "count"], [24, 3, 1, "", "cursor"], [24, 3, 1, "", "cutgroup"], [24, 3, 1, "", "cutgroups"], [24, 3, 1, "", "delete_all_frames"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "edit"], [24, 3, 1, "", "energy"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "get_link"], [24, 3, 1, "", "get_links"], [24, 3, 1, "", "has_links"], [24, 3, 1, "", "has_metadata"], [24, 3, 1, "", "has_property"], [24, 3, 1, "", "index"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "is_link"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "is_same_molecule"], [24, 3, 1, "", "is_selector"], [24, 3, 1, "", "is_within_chain"], [24, 3, 1, "", "is_within_residue"], [24, 3, 1, "", "is_within_segment"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "metadata_keys"], [24, 3, 1, "", "metadata_type"], [24, 3, 1, "", "molecule"], [24, 3, 1, "", "move"], [24, 3, 1, "", "name"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "num_chains"], [24, 3, 1, "", "num_cutgroups"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "num_residues"], [24, 3, 1, "", "num_segments"], [24, 3, 1, "", "num_views"], [24, 3, 1, "", "number"], [24, 3, 1, "", "property_as_property"], [24, 3, 1, "", "property_as_variant"], [24, 3, 1, "", "property_keys"], [24, 3, 1, "", "property_type"], [24, 3, 1, "", "residue"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "segment"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "select_all"], [24, 3, 1, "", "select_all_atoms"], [24, 3, 1, "", "select_all_chains"], [24, 3, 1, "", "select_all_cutgroups"], [24, 3, 1, "", "select_all_residues"], [24, 3, 1, "", "select_all_segments"], [24, 3, 1, "", "selected_all"], [24, 3, 1, "", "selection"], [24, 3, 1, "", "selector"], [24, 3, 1, "", "size"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_molecules"], [24, 3, 1, "", "to_selector"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"]], "sire.mol.AtomIdx": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "null"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.AtomMapping": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "atoms0"], [24, 3, 1, "", "atoms1"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "count"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "size"], [24, 3, 1, "", "swap"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.AtomMatch": [[24, 3, 1, "", "assert_contains"], [24, 3, 1, "", "assert_has_metadata"], [24, 3, 1, "", "assert_has_property"], [24, 3, 1, "", "assert_same_molecule"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "const_data"], [24, 3, 1, "", "cutgroup"], [24, 3, 1, "", "cutgroups"], [24, 3, 1, "", "delete_all_frames"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "get_link"], [24, 3, 1, "", "get_links"], [24, 3, 1, "", "group"], [24, 3, 1, "", "groups"], [24, 3, 1, "", "has_links"], [24, 3, 1, "", "has_metadata"], [24, 3, 1, "", "has_property"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "is_link"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "is_same_molecule"], [24, 3, 1, "", "is_selector"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "metadata_keys"], [24, 3, 1, "", "metadata_type"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "num_chains"], [24, 3, 1, "", "num_cutgroups"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "num_groups"], [24, 3, 1, "", "num_residues"], [24, 3, 1, "", "num_segments"], [24, 3, 1, "", "num_views"], [24, 3, 1, "", "property_keys"], [24, 3, 1, "", "property_type"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "select_all"], [24, 3, 1, "", "select_all_atoms"], [24, 3, 1, "", "select_all_chains"], [24, 3, 1, "", "select_all_cutgroups"], [24, 3, 1, "", "select_all_residues"], [24, 3, 1, "", "select_all_segments"], [24, 3, 1, "", "selected_all"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_molecules"], [24, 3, 1, "", "to_selector"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "to_unit"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.AtomMatchM": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "atom"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "chain"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "contains"], [24, 3, 1, "", "count"], [24, 3, 1, "", "cutgroup"], [24, 3, 1, "", "cutgroups"], [24, 3, 1, "", "delete_all_frames"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "extract"], [24, 3, 1, "", "find"], [24, 3, 1, "", "group"], [24, 3, 1, "", "groups"], [24, 3, 1, "", "has_metadata"], [24, 3, 1, "", "has_property"], [24, 3, 1, "", "ids"], [24, 3, 1, "", "indexes"], [24, 3, 1, "", "intersection"], [24, 3, 1, "", "intersects"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "is_selector"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "metadata_keys"], [24, 3, 1, "", "molecule"], [24, 3, 1, "", "molecules"], [24, 3, 1, "", "names"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "num_chains"], [24, 3, 1, "", "num_cutgroups"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "num_groups"], [24, 3, 1, "", "num_molecules"], [24, 3, 1, "", "num_residues"], [24, 3, 1, "", "num_segments"], [24, 3, 1, "", "numbers"], [24, 3, 1, "", "property_keys"], [24, 3, 1, "", "residue"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "search"], [24, 3, 1, "", "segment"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "size"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_molecule_group"], [24, 3, 1, "", "to_molecules"], [24, 3, 1, "", "to_select_result"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "update"], [24, 3, 1, "", "what"]], "sire.mol.AtomName": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.AtomNum": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.BondOrder": [[24, 3, 1, "", "aromatic_bond"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "double_bond"], [24, 3, 1, "", "from_rdkit"], [24, 3, 1, "", "from_s_d_f"], [24, 3, 1, "", "is_defined"], [24, 3, 1, "", "is_double"], [24, 3, 1, "", "is_single"], [24, 3, 1, "", "is_triple"], [24, 3, 1, "", "isromatic"], [24, 3, 1, "", "single_bond"], [24, 3, 1, "", "to_rdkit"], [24, 3, 1, "", "to_s_d_f"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "triple_bond"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "undefined_bond"], [24, 3, 1, "", "value"], [24, 3, 1, "", "value_as_double"]], "sire.mol.Chain": [[24, 3, 1, "", "assert_contains"], [24, 3, 1, "", "assert_contains_metadata"], [24, 3, 1, "", "assert_contains_property"], [24, 3, 1, "", "assert_has_metadata"], [24, 3, 1, "", "assert_has_property"], [24, 3, 1, "", "assert_same_molecule"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "atom_idxs"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "const_data"], [24, 3, 1, "", "contains"], [24, 3, 1, "", "count"], [24, 3, 1, "", "cursor"], [24, 3, 1, "", "cutgroup"], [24, 3, 1, "", "cutgroups"], [24, 3, 1, "", "delete_all_frames"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "edit"], [24, 3, 1, "", "energy"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "get_link"], [24, 3, 1, "", "get_links"], [24, 3, 1, "", "has_links"], [24, 3, 1, "", "has_metadata"], [24, 3, 1, "", "has_property"], [24, 3, 1, "", "index"], [24, 3, 1, "", "intersects"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "is_link"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "is_same_molecule"], [24, 3, 1, "", "is_selector"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "metadata_keys"], [24, 3, 1, "", "metadata_type"], [24, 3, 1, "", "move"], [24, 3, 1, "", "name"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "num_chains"], [24, 3, 1, "", "num_cutgroups"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "num_residues"], [24, 3, 1, "", "num_segments"], [24, 3, 1, "", "num_views"], [24, 3, 1, "", "number"], [24, 3, 1, "", "property_as_property"], [24, 3, 1, "", "property_as_variant"], [24, 3, 1, "", "property_keys"], [24, 3, 1, "", "property_type"], [24, 3, 1, "", "res_idxs"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "select_all"], [24, 3, 1, "", "select_all_atoms"], [24, 3, 1, "", "select_all_chains"], [24, 3, 1, "", "select_all_cutgroups"], [24, 3, 1, "", "select_all_residues"], [24, 3, 1, "", "select_all_segments"], [24, 3, 1, "", "selected_all"], [24, 3, 1, "", "selection"], [24, 3, 1, "", "selector"], [24, 3, 1, "", "size"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_molecules"], [24, 3, 1, "", "to_selector"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "update"]], "sire.mol.ChainIdx": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "null"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.ChainName": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.Cursor": [[24, 3, 1, "", "angle"], [24, 3, 1, "", "angles"], [24, 3, 1, "", "apply"], [24, 3, 1, "", "atom"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "bond"], [24, 3, 1, "", "bonds"], [24, 3, 1, "", "chain"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "commit"], [24, 3, 1, "", "delete"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "dihedral"], [24, 3, 1, "", "dihedrals"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "get"], [24, 3, 1, "", "get_index"], [24, 3, 1, "", "get_name"], [24, 3, 1, "", "get_number"], [24, 3, 1, "", "id"], [24, 3, 1, "", "improper"], [24, 3, 1, "", "impropers"], [24, 6, 1, "", "index"], [24, 3, 1, "", "is_angle"], [24, 3, 1, "", "is_atom"], [24, 3, 1, "", "is_bond"], [24, 3, 1, "", "is_chain"], [24, 3, 1, "", "is_dihedral"], [24, 3, 1, "", "is_improper"], [24, 3, 1, "", "is_internal"], [24, 3, 1, "", "is_molecule"], [24, 3, 1, "", "is_residue"], [24, 3, 1, "", "is_same_editor"], [24, 3, 1, "", "is_segment"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "make_whole"], [24, 3, 1, "", "molecule"], [24, 6, 1, "", "name"], [24, 3, 1, "", "num_frames"], [24, 6, 1, "", "number"], [24, 3, 1, "", "parent"], [24, 3, 1, "", "properties"], [24, 3, 1, "", "renumber"], [24, 3, 1, "", "residue"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "rotate"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "segment"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "set"], [24, 3, 1, "", "set_name"], [24, 3, 1, "", "set_number"], [24, 3, 1, "", "transform"], [24, 3, 1, "", "translate"], [24, 3, 1, "", "type"], [24, 3, 1, "", "view"]], "sire.mol.Cursors": [[24, 3, 1, "", "angle"], [24, 3, 1, "", "angles"], [24, 3, 1, "", "apply"], [24, 3, 1, "", "atom"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "bond"], [24, 3, 1, "", "bonds"], [24, 3, 1, "", "chain"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "commit"], [24, 3, 1, "", "delete"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "dihedral"], [24, 3, 1, "", "dihedrals"], [24, 3, 1, "", "get"], [24, 3, 1, "", "improper"], [24, 3, 1, "", "impropers"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "is_same_editor"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "make_whole"], [24, 3, 1, "", "molecule"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "parent"], [24, 3, 1, "", "residue"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "rotate"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "segment"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "set"], [24, 3, 1, "", "transform"], [24, 3, 1, "", "translate"], [24, 3, 1, "", "view"]], "sire.mol.CursorsM": [[24, 3, 1, "", "angle"], [24, 3, 1, "", "angles"], [24, 3, 1, "", "apply"], [24, 3, 1, "", "atom"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "bond"], [24, 3, 1, "", "bonds"], [24, 3, 1, "", "chain"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "commit"], [24, 3, 1, "", "delete"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "dihedral"], [24, 3, 1, "", "dihedrals"], [24, 3, 1, "", "get"], [24, 3, 1, "", "improper"], [24, 3, 1, "", "impropers"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "make_whole"], [24, 3, 1, "", "molecule"], [24, 3, 1, "", "molecules"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "residue"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "rotate"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "segment"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "set"], [24, 3, 1, "", "transform"], [24, 3, 1, "", "translate"], [24, 3, 1, "", "view"]], "sire.mol.Dynamics": [[24, 3, 1, "", "constraint"], [24, 3, 1, "", "current_energy"], [24, 3, 1, "", "current_kinetic_energy"], [24, 3, 1, "", "current_potential_energy"], [24, 3, 1, "", "current_space"], [24, 3, 1, "", "current_step"], [24, 3, 1, "", "current_time"], [24, 3, 1, "", "elapsed_time"], [24, 3, 1, "", "energy_trajectory"], [24, 3, 1, "", "ensemble"], [24, 3, 1, "", "get_lambda"], [24, 3, 1, "", "get_schedule"], [24, 3, 1, "", "info"], [24, 3, 1, "", "minimise"], [24, 3, 1, "", "platform"], [24, 3, 1, "", "run"], [24, 3, 1, "", "set_ensemble"], [24, 3, 1, "", "set_lambda"], [24, 3, 1, "", "set_schedule"], [24, 3, 1, "", "step_speed"], [24, 3, 1, "", "time_speed"], [24, 3, 1, "", "timestep"], [24, 3, 1, "", "walltime"]], "sire.mol.Element": [[24, 3, 1, "", "actinide"], [24, 3, 1, "", "alkali_earth_metal"], [24, 3, 1, "", "alkali_metal"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "biological"], [24, 3, 1, "", "biological_element"], [24, 3, 1, "", "blue"], [24, 3, 1, "", "bond_order_radius"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "color"], [24, 3, 1, "", "color_name"], [24, 3, 1, "", "covalent_radius"], [24, 3, 1, "", "element_with_mass"], [24, 3, 1, "", "green"], [24, 3, 1, "", "group"], [24, 3, 1, "", "halogen"], [24, 3, 1, "", "hex_color"], [24, 3, 1, "", "lanthanide"], [24, 3, 1, "", "mass"], [24, 3, 1, "", "max_bonds"], [24, 3, 1, "", "name"], [24, 3, 1, "", "noble_gas"], [24, 3, 1, "", "num_protons"], [24, 3, 1, "", "period"], [24, 3, 1, "", "rare_earth"], [24, 3, 1, "", "red"], [24, 3, 1, "", "symbol"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "transition_metal"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "vdw_radius"], [24, 3, 1, "", "what"]], "sire.mol.Minimisation": [[24, 3, 1, "", "commit"], [24, 3, 1, "", "run"]], "sire.mol.MolIdx": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "null"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.MolName": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.MolNum": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "get_unique_number"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.Molecule": [[24, 3, 1, "", "assert_contains"], [24, 3, 1, "", "assert_contains_metadata"], [24, 3, 1, "", "assert_contains_property"], [24, 3, 1, "", "assert_has_metadata"], [24, 3, 1, "", "assert_has_property"], [24, 3, 1, "", "assert_same_molecule"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "const_data"], [24, 3, 1, "", "count"], [24, 3, 1, "", "cursor"], [24, 3, 1, "", "cutgroup"], [24, 3, 1, "", "cutgroups"], [24, 3, 1, "", "delete_all_frames"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "edit"], [24, 3, 1, "", "energy"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "get_link"], [24, 3, 1, "", "get_links"], [24, 3, 1, "", "has_links"], [24, 3, 1, "", "has_metadata"], [24, 3, 1, "", "has_property"], [24, 3, 1, "", "info"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "is_link"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "is_perturbable"], [24, 3, 1, "", "is_same_molecule"], [24, 3, 1, "", "is_selector"], [24, 3, 1, "", "join"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "metadata"], [24, 3, 1, "", "metadata_keys"], [24, 3, 1, "", "metadata_type"], [24, 3, 1, "", "move"], [24, 3, 1, "", "name"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "num_chains"], [24, 3, 1, "", "num_cutgroups"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "num_residues"], [24, 3, 1, "", "num_segments"], [24, 3, 1, "", "num_views"], [24, 3, 1, "", "number"], [24, 3, 1, "", "perturbation"], [24, 3, 1, "", "properties"], [24, 3, 1, "", "property"], [24, 3, 1, "", "property_keys"], [24, 3, 1, "", "property_type"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "select_all"], [24, 3, 1, "", "select_all_atoms"], [24, 3, 1, "", "select_all_chains"], [24, 3, 1, "", "select_all_cutgroups"], [24, 3, 1, "", "select_all_residues"], [24, 3, 1, "", "select_all_segments"], [24, 3, 1, "", "selected_all"], [24, 3, 1, "", "selection"], [24, 3, 1, "", "selector"], [24, 3, 1, "", "size"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_molecules"], [24, 3, 1, "", "to_selector"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "version"]], "sire.mol.ResIdx": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "null"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.ResName": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.ResNum": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.Residue": [[24, 3, 1, "", "assert_contains_metadata"], [24, 3, 1, "", "assert_contains_property"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "atom_idxs"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "contains"], [24, 3, 1, "", "count"], [24, 3, 1, "", "cursor"], [24, 3, 1, "", "edit"], [24, 3, 1, "", "energy"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "has_metadata"], [24, 3, 1, "", "has_property"], [24, 3, 1, "", "index"], [24, 3, 1, "", "intersects"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "is_within_chain"], [24, 3, 1, "", "metadata_keys"], [24, 3, 1, "", "move"], [24, 3, 1, "", "name"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "number"], [24, 3, 1, "", "property_as_property"], [24, 3, 1, "", "property_as_variant"], [24, 3, 1, "", "property_keys"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "selected_all"], [24, 3, 1, "", "selection"], [24, 3, 1, "", "selector"], [24, 3, 1, "", "size"], [24, 3, 1, "", "to_selector"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"]], "sire.mol.SegIdx": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "null"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.SegName": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "hash"], [24, 3, 1, "", "is_null"], [24, 3, 1, "", "map"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "what"]], "sire.mol.Segment": [[24, 3, 1, "", "assert_contains_metadata"], [24, 3, 1, "", "assert_contains_property"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "atom_idxs"], [24, 3, 1, "", "atoms"], [24, 3, 1, "", "chains"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "contains"], [24, 3, 1, "", "count"], [24, 3, 1, "", "cursor"], [24, 3, 1, "", "edit"], [24, 3, 1, "", "energy"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "has_metadata"], [24, 3, 1, "", "has_property"], [24, 3, 1, "", "index"], [24, 3, 1, "", "intersects"], [24, 3, 1, "", "invert"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "metadata_keys"], [24, 3, 1, "", "move"], [24, 3, 1, "", "name"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "number"], [24, 3, 1, "", "property_as_property"], [24, 3, 1, "", "property_as_variant"], [24, 3, 1, "", "property_keys"], [24, 3, 1, "", "residues"], [24, 3, 1, "", "segments"], [24, 3, 1, "", "selected_all"], [24, 3, 1, "", "selection"], [24, 3, 1, "", "selector"], [24, 3, 1, "", "size"], [24, 3, 1, "", "to_selector"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"]], "sire.mol.SelectorMol": [[24, 3, 1, "", "append"], [24, 3, 1, "", "apply"], [24, 3, 1, "", "apply_reduce"], [24, 3, 1, "", "assign"], [24, 3, 1, "", "atom"], [24, 3, 1, "", "chain"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "contains"], [24, 3, 1, "", "count"], [24, 3, 1, "", "cutgroup"], [24, 3, 1, "", "cutgroups"], [24, 3, 1, "", "delete_all_frames"], [24, 3, 1, "", "delete_frame"], [24, 3, 1, "", "dynamics"], [24, 3, 1, "", "energies"], [24, 3, 1, "", "energy"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "extract"], [24, 3, 1, "", "find"], [24, 3, 1, "", "ids"], [24, 3, 1, "", "indexes"], [24, 3, 1, "", "is_empty"], [24, 3, 1, "", "is_selector"], [24, 3, 1, "", "load_frame"], [24, 3, 1, "", "minimisation"], [24, 3, 1, "", "mol_nums"], [24, 3, 1, "", "molecule"], [24, 3, 1, "", "names"], [24, 3, 1, "", "num_atoms"], [24, 3, 1, "", "num_chains"], [24, 3, 1, "", "num_cutgroups"], [24, 3, 1, "", "num_frames"], [24, 3, 1, "", "num_molecules"], [24, 3, 1, "", "num_residues"], [24, 3, 1, "", "num_segments"], [24, 3, 1, "", "numbers"], [24, 3, 1, "", "residue"], [24, 3, 1, "", "save_frame"], [24, 3, 1, "", "search"], [24, 3, 1, "", "segment"], [24, 3, 1, "", "size"], [24, 3, 1, "", "smarts"], [24, 3, 1, "", "smiles"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_molecule_group"], [24, 3, 1, "", "to_molecules"], [24, 3, 1, "", "to_select_result"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "trajectory"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "update"], [24, 3, 1, "", "view"], [24, 3, 1, "", "what"]], "sire.mol.Stereochemistry": [[24, 3, 1, "", "assign"], [24, 3, 1, "", "clone"], [24, 3, 1, "", "down"], [24, 3, 1, "", "from_rdkit"], [24, 3, 1, "", "from_s_d_f"], [24, 3, 1, "", "is_defined"], [24, 3, 1, "", "is_down"], [24, 3, 1, "", "is_not_stereo"], [24, 3, 1, "", "is_up"], [24, 3, 1, "", "not_stereo"], [24, 3, 1, "", "to_rdkit"], [24, 3, 1, "", "to_s_d_f"], [24, 3, 1, "", "to_string"], [24, 3, 1, "", "typename"], [24, 3, 1, "", "undefined"], [24, 3, 1, "", "up"], [24, 3, 1, "", "value"]], "sire.mol.TrajectoryIterator": [[24, 3, 1, "", "align"], [24, 3, 1, "", "apply"], [24, 3, 1, "", "current"], [24, 3, 1, "", "first"], [24, 3, 1, "", "frame_indexes"], [24, 3, 1, "", "rmsd"], [24, 3, 1, "", "smooth"], [24, 3, 1, "", "wrap"]], "sire.morph": [[25, 2, 1, "", "Perturbation"], [25, 1, 1, "", "replica_exchange"], [25, 1, 1, "", "shrink_ghost_atoms"]], "sire.morph.Perturbation": [[25, 3, 1, "", "commit"], [25, 3, 1, "", "link_to_perturbed"], [25, 3, 1, "", "link_to_reference"], [25, 3, 1, "", "set_lambda"], [25, 3, 1, "", "view"]], "sire.restraints": [[26, 1, 1, "", "bond"], [26, 1, 1, "", "boresch"], [26, 1, 1, "", "distance"], [26, 1, 1, "", "positional"]], "sire.search": [[27, 1, 1, "", "approx_equal"], [27, 1, 1, "", "approx_greater"], [27, 1, 1, "", "approx_greater_equal"], [27, 1, 1, "", "approx_less"], [27, 1, 1, "", "approx_less_equal"], [27, 1, 1, "", "approx_not_equal"], [27, 1, 1, "", "delete_all_tokens"], [27, 1, 1, "", "delete_token"], [27, 1, 1, "", "get_approx_epsilon"], [27, 1, 1, "", "get_min_protein_residues"], [27, 1, 1, "", "get_protein_residue_names"], [27, 1, 1, "", "get_token"], [27, 1, 1, "", "has_token"], [27, 1, 1, "", "set_approx_epsilon"], [27, 1, 1, "", "set_min_protein_residues"], [27, 1, 1, "", "set_protein_residue_names"], [27, 1, 1, "", "set_token"]], "sire.stream": [[30, 1, 1, "", "get_data_header"], [30, 1, 1, "", "get_header_property"], [30, 1, 1, "", "load"], [30, 1, 1, "", "save"], [30, 1, 1, "", "set_header_property"]], "sire.system": [[31, 2, 1, "", "ForceFieldInfo"], [31, 2, 1, "", "System"]], "sire.system.System": [[31, 3, 1, "", "add"], [31, 3, 1, "", "add_shared_property"], [31, 3, 1, "", "angle"], [31, 3, 1, "", "angles"], [31, 3, 1, "", "apply"], [31, 3, 1, "", "apply_reduce"], [31, 3, 1, "", "atom"], [31, 3, 1, "", "atoms"], [31, 3, 1, "", "bond"], [31, 3, 1, "", "bonds"], [31, 3, 1, "", "chain"], [31, 3, 1, "", "chains"], [31, 3, 1, "", "charge"], [31, 3, 1, "", "clear_energy_trajectory"], [31, 3, 1, "", "clone"], [31, 3, 1, "", "coordinates"], [31, 3, 1, "", "count"], [31, 3, 1, "", "cursor"], [31, 3, 1, "", "delete_all_frames"], [31, 3, 1, "", "delete_frame"], [31, 3, 1, "", "dihedral"], [31, 3, 1, "", "dihedrals"], [31, 3, 1, "", "dynamics"], [31, 3, 1, "", "energies"], [31, 3, 1, "", "energy"], [31, 3, 1, "", "energy_trajectory"], [31, 3, 1, "", "evaluate"], [31, 3, 1, "", "find"], [31, 3, 1, "", "has_property"], [31, 3, 1, "", "improper"], [31, 3, 1, "", "impropers"], [31, 3, 1, "", "is_system"], [31, 3, 1, "", "load_frame"], [31, 3, 1, "", "make_whole"], [31, 3, 1, "", "mass"], [31, 3, 1, "", "minimisation"], [31, 3, 1, "", "molecule"], [31, 3, 1, "", "molecules"], [31, 3, 1, "", "names"], [31, 3, 1, "", "num_atoms"], [31, 3, 1, "", "num_chains"], [31, 3, 1, "", "num_frames"], [31, 3, 1, "", "num_molecules"], [31, 3, 1, "", "num_residues"], [31, 3, 1, "", "num_segments"], [31, 3, 1, "", "numbers"], [31, 3, 1, "", "properties"], [31, 3, 1, "", "property"], [31, 3, 1, "", "property_keys"], [31, 3, 1, "", "remove"], [31, 3, 1, "", "remove_all_shared_properties"], [31, 3, 1, "", "remove_shared_property"], [31, 3, 1, "", "residue"], [31, 3, 1, "", "residues"], [31, 3, 1, "", "save_frame"], [31, 3, 1, "", "segment"], [31, 3, 1, "", "segments"], [31, 3, 1, "", "set_energy_trajectory"], [31, 3, 1, "", "set_property"], [31, 3, 1, "", "set_shared_property"], [31, 3, 1, "", "set_space"], [31, 3, 1, "", "set_time"], [31, 3, 1, "", "shared_properties"], [31, 3, 1, "", "size"], [31, 3, 1, "", "smarts"], [31, 3, 1, "", "smiles"], [31, 3, 1, "", "space"], [31, 3, 1, "", "time"], [31, 3, 1, "", "to_molecule_group"], [31, 3, 1, "", "trajectory"], [31, 3, 1, "", "update"], [31, 3, 1, "", "view"], [31, 3, 1, "", "view2d"]], "sire.units": [[32, 1, 1, "", "angle"], [32, 4, 1, "", "angstrom"], [32, 1, 1, "", "clear_default_units"], [32, 1, 1, "", "convert"], [32, 1, 1, "", "length"], [32, 4, 1, "", "picometer"], [32, 1, 1, "", "set_default_unit"], [32, 1, 1, "", "set_default_units"], [32, 1, 1, "", "set_energy_unit"], [32, 1, 1, "", "set_internal_units"], [32, 1, 1, "", "set_length_unit"], [32, 1, 1, "", "set_mass_unit"], [32, 1, 1, "", "set_quantity_unit"], [32, 1, 1, "", "set_si_units"], [32, 1, 1, "", "set_time_unit"]], "sire.utils": [[33, 2, 1, "", "Console"], [33, 2, 1, "", "NullProfiler"], [33, 2, 1, "", "Profiler"], [33, 2, 1, "", "Table"], [33, 1, 1, "", "assert_imported"], [33, 1, 1, "", "have_imported"], [33, 1, 1, "", "try_import"], [33, 1, 1, "", "try_import_from"]], "sire.utils.Console": [[33, 3, 1, "", "debug"], [33, 3, 1, "", "debugging_enabled"], [33, 3, 1, "", "error"], [33, 3, 1, "", "info"], [33, 3, 1, "", "panel"], [33, 3, 1, "", "print"], [33, 3, 1, "", "print_exception"], [33, 3, 1, "", "redirect_output"], [33, 3, 1, "", "rule"], [33, 3, 1, "", "save"], [33, 3, 1, "", "set_debugging_enabled"], [33, 3, 1, "", "set_theme"], [33, 3, 1, "", "supports_emojis"], [33, 3, 1, "", "warning"]], "sire.utils.Profiler": [[33, 3, 1, "", "child_total"], [33, 3, 1, "", "is_null"], [33, 3, 1, "", "name"], [33, 3, 1, "", "start"], [33, 3, 1, "", "stop"], [33, 3, 1, "", "total"]], "sire.utils.Table": [[33, 3, 1, "", "add_column"], [33, 3, 1, "", "add_row"], [33, 3, 1, "", "to_string"]], "sire.vol": [[34, 2, 1, "", "Cartesian"], [34, 2, 1, "", "CoordGroup"], [34, 2, 1, "", "PeriodicBox"], [34, 2, 1, "", "TriclinicBox"]], "sire.vol.Cartesian": [[34, 3, 1, "", "assign"], [34, 3, 1, "", "beyond"], [34, 3, 1, "", "box_matrix"], [34, 3, 1, "", "calc_angle"], [34, 3, 1, "", "calc_dihedral"], [34, 3, 1, "", "calc_dist"], [34, 3, 1, "", "calc_dist2"], [34, 3, 1, "", "calc_dist_vector"], [34, 3, 1, "", "calc_dist_vectors"], [34, 3, 1, "", "calc_inv_dist"], [34, 3, 1, "", "calc_inv_dist2"], [34, 3, 1, "", "change_volume"], [34, 3, 1, "", "clone"], [34, 3, 1, "", "get_box_center"], [34, 3, 1, "", "get_copies_within"], [34, 3, 1, "", "get_images_within"], [34, 3, 1, "", "get_minimum_image"], [34, 3, 1, "", "get_random_point"], [34, 3, 1, "", "is_cartesian"], [34, 3, 1, "", "is_periodic"], [34, 3, 1, "", "make_whole"], [34, 3, 1, "", "maximum_cutoff"], [34, 3, 1, "", "minimum_distance"], [34, 3, 1, "", "set_volume"], [34, 3, 1, "", "to_string"], [34, 3, 1, "", "typename"], [34, 3, 1, "", "volume"]], "sire.vol.CoordGroup": [[34, 3, 1, "", "aabox"], [34, 3, 1, "", "assert_same_size"], [34, 3, 1, "", "assert_valid_index"], [34, 3, 1, "", "assign"], [34, 3, 1, "", "clone"], [34, 3, 1, "", "edit"], [34, 3, 1, "", "is_empty"], [34, 3, 1, "", "maybe_different"], [34, 3, 1, "", "to_string"], [34, 3, 1, "", "to_vector"], [34, 3, 1, "", "typename"], [34, 3, 1, "", "what"]], "sire.vol.PeriodicBox": [[34, 3, 1, "", "assign"], [34, 3, 1, "", "beyond"], [34, 3, 1, "", "box_matrix"], [34, 3, 1, "", "calc_angle"], [34, 3, 1, "", "calc_dihedral"], [34, 3, 1, "", "calc_dist"], [34, 3, 1, "", "calc_dist2"], [34, 3, 1, "", "calc_dist_vector"], [34, 3, 1, "", "calc_dist_vectors"], [34, 3, 1, "", "calc_inv_dist"], [34, 3, 1, "", "calc_inv_dist2"], [34, 3, 1, "", "change_volume"], [34, 3, 1, "", "clone"], [34, 3, 1, "", "dimensions"], [34, 3, 1, "", "get_box_center"], [34, 3, 1, "", "get_copies_within"], [34, 3, 1, "", "get_images_within"], [34, 3, 1, "", "get_minimum_image"], [34, 3, 1, "", "get_random_point"], [34, 3, 1, "", "is_cartesian"], [34, 3, 1, "", "is_periodic"], [34, 3, 1, "", "make_whole"], [34, 3, 1, "", "max_coords"], [34, 3, 1, "", "maximum_cutoff"], [34, 3, 1, "", "min_coords"], [34, 3, 1, "", "minimum_distance"], [34, 3, 1, "", "set_dimensions"], [34, 3, 1, "", "set_volume"], [34, 3, 1, "", "to_string"], [34, 3, 1, "", "typename"], [34, 3, 1, "", "volume"]], "sire.vol.TriclinicBox": [[34, 3, 1, "", "alpha"], [34, 3, 1, "", "assign"], [34, 3, 1, "", "beta"], [34, 3, 1, "", "beyond"], [34, 3, 1, "", "box_matrix"], [34, 3, 1, "", "calc_angle"], [34, 3, 1, "", "calc_dihedral"], [34, 3, 1, "", "calc_dist"], [34, 3, 1, "", "calc_dist2"], [34, 3, 1, "", "calc_dist_vector"], [34, 3, 1, "", "calc_dist_vectors"], [34, 3, 1, "", "calc_inv_dist"], [34, 3, 1, "", "calc_inv_dist2"], [34, 3, 1, "", "cell_matrix"], [34, 3, 1, "", "clone"], [34, 3, 1, "", "cubic"], [34, 3, 1, "", "gamma"], [34, 3, 1, "", "get_box_center"], [34, 3, 1, "", "get_copies_within"], [34, 3, 1, "", "get_images_within"], [34, 3, 1, "", "get_minimum_image"], [34, 3, 1, "", "get_random_point"], [34, 3, 1, "", "is_cartesian"], [34, 3, 1, "", "is_periodic"], [34, 3, 1, "", "is_reduced"], [34, 3, 1, "", "is_rotated"], [34, 3, 1, "", "minimum_distance"], [34, 3, 1, "", "reduce"], [34, 3, 1, "", "rhombic_dodecahedron_hexagon"], [34, 3, 1, "", "rhombic_dodecahedron_square"], [34, 3, 1, "", "rotate"], [34, 3, 1, "", "rotation_matrix"], [34, 3, 1, "", "set_volume"], [34, 3, 1, "", "to_string"], [34, 3, 1, "", "truncated_octahedron"], [34, 3, 1, "", "typename"], [34, 3, 1, "", "vector0"], [34, 3, 1, "", "vector1"], [34, 3, 1, "", "vector2"], [34, 3, 1, "", "volume"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:data", "5": "py:attribute", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "property", "Python property"]}, "titleterms": {"acknowledg": [0, 50], "websit": 0, "host": 0, "third": 0, "parti": 0, "softwar": 0, "c": [0, 40, 43, 44, 51], "depend": 0, "qt": 0, "5": [0, 51, 59], "python": [0, 40, 43, 44], "boost": 0, "py": 0, "cmake": 0, "anaconda": [0, 51], "thread": 0, "build": [0, 51], "block": [0, 43], "tbb": 0, "gnu": 0, "scientif": 0, "librari": 0, "gsl": 0, "netcdf": 0, "openmm": [0, 37, 92], "regress": 0, "eig3": 0, "mersenn": 0, "twister": 0, "sse_mathfun": 0, "avx_mathfun": 0, "sse2neon": 0, "lap": 0, "linear": 0, "assign": 0, "problem": 0, "solver": 0, "md5": 0, "kabasch": 0, "fit": 0, "mdanalysi": 0, "ap": 0, "ascii": 0, "plot": [0, 87], "lazy_import": 0, "rich": 0, "panda": [0, 87], "public": [1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34], "api": [1, 2, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 50, 99], "document": [4, 44], "top": 4, "level": [4, 37, 98, 99], "sub": [4, 29], "modul": [4, 28, 29], "sire": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 43, 50, 51, 61], "base": 5, "ca": 6, "convert": [7, 40, 92], "io": 8, "parser": 8, "math": 9, "mm": 10, "mol": 11, "morph": [12, 60], "restraint": [13, 99, 100], "search": [14, 38, 56, 68, 69, 70, 71, 72, 73, 77, 79, 94, 95], "stream": 15, "system": 16, "unit": [17, 40, 87], "util": 18, "vol": 19, "changelog": [35, 50], "github": 35, "openbiosim": [35, 50], "januari": 35, "2023": 35, "current": [35, 41], "4": [35, 43, 51, 58], "0": [35, 43], "septemb": 35, "3": [35, 51, 57], "2": [35, 51, 56], "1": [35, 51, 55], "juli": 35, "june": 35, "mai": 35, "april": 35, "march": 35, "februari": 35, "michellab": 35, "22nd": 35, "2015": 35, "googl": 35, "code": [35, 42, 43, 44, 51, 62], "august": 35, "7th": 35, "2006": 35, "1st": 35, "local": 35, "subvers": 35, "5th": 35, "2005": 35, "25th": 35, "detail": [36, 50], "guid": [36, 44, 50, 52], "integr": [37, 41, 44], "choos": [37, 41], "option": 37, "higher": 37, "run": [37, 44, 51], "dynam": [37, 96, 98, 99], "save": [37, 39, 41, 55, 64, 66, 90], "frame": [37, 39, 66, 89, 90], "energi": [37, 39, 60, 88, 89, 98], "view": [38, 41, 78, 82, 83, 84, 85, 86, 89, 93, 97], "identifi": [38, 68, 69, 70, 71, 72, 73, 74, 75, 76], "number": [38, 43, 68], "string": [38, 64, 94, 95], "comparison": [38, 44], "logic": 38, "oper": 38, "return": 38, "type": [38, 68, 69, 70, 71, 72, 77], "expans": 38, "contract": 38, "match": [38, 68, 95], "all": [38, 43, 70, 71], "atom": [38, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 86, 90, 98, 99], "residu": [38, 69, 70, 71, 72, 73, 74, 75, 76, 80], "chain": [38, 70, 71, 72, 80], "etc": 38, "advanc": 38, "bond": [38, 73, 74, 75, 76, 82, 87, 91, 99], "us": [38, 43, 51, 62, 78, 87, 90, 94, 95, 99, 100], "from": [38, 40, 51, 62, 65, 94, 95], "chemic": 38, "element": [38, 68], "count": [38, 68, 69, 77], "i": 38, "e": [38, 51], "charg": [38, 77], "mass": [38, 77], "approxim": 38, "properti": [38, 57, 77, 78, 79, 80, 81, 82, 83, 84, 85], "find": [38, 69, 70, 71, 72], "nth": 38, "distanc": [38, 86, 99], "closest": 38, "furthest": 38, "smile": [38, 94], "smart": [38, 72, 95], "water": 38, "protein": 38, "molecul": [38, 39, 41, 62, 64, 72, 77, 81, 90, 92, 93, 94, 95, 97], "creat": [38, 46, 51, 87, 94, 95], "custom": [38, 44, 51, 77], "token": [38, 77], "trajectori": [39, 41, 58, 66, 87, 89, 90, 91, 98], "support": [39, 40, 50, 67, 92], "file": [39, 41, 44, 62, 65, 67], "format": [39, 67, 92], "load": [39, 55, 62, 65, 66], "join": [39, 66], "multipl": [39, 43, 65, 66, 95], "subset": 39, "parallel": 39, "visualis": [39, 90], "smooth": [39, 41], "align": [39, 41, 91], "outsid": 39, "calcul": [39, 88, 89], "across": [39, 87, 89], "other": [40, 59, 92], "si": 40, "prefix": 40, "rais": 40, "power": 40, "combin": 40, "chang": [40, 87, 89], "default": 40, "convers": 40, "pint": 40, "biosimspac": [40, 92], "packag": [40, 46, 51, 59], "under": 40, "hood": 40, "generalunit": 40, "2d": [41, 93], "3d": 41, "represent": 41, "color": 41, "opac": 41, "center": 41, "wrap": 41, "box": 41, "closer": 41, "nglview": 41, "conduct": 42, "our": 42, "pledg": 42, "standard": 42, "respons": 42, "scope": 42, "enforc": 42, "attribut": [42, 44], "style": [43, 44], "indent": 43, "should": 43, "space": [43, 86], "tab": 43, "replac": 43, "curli": 43, "bracket": 43, "new": [43, 51], "line": 43, "class": 43, "name": [43, 68, 70, 71, 100], "capit": 43, "letter": 43, "onli": 43, "A": [43, 51], "za": 43, "z": 43, "9": 43, "function": [43, 78], "method": 43, "same": 43, "wai": 43, "except": [43, 44], "first": 43, "capitalis": 43, "variabl": 43, "member": 43, "data": [43, 87], "small": 43, "case": 43, "ar": 43, "No": [43, 51], "over": [43, 68, 69, 70, 71, 72, 87], "90": 43, "charact": 43, "long": 43, "alwai": 43, "fix": [43, 99], "width": 43, "font": 43, "whitespac": 43, "make": [43, 86], "clean": 43, "speak": 43, "brace": 43, "pleas": 43, "abov": 43, "doxygen": 43, "comment": 43, "final": 43, "keep": 43, "an": [43, 51, 74, 76], "ey": 43, "here": 43, "more": [43, 95], "rule": 43, "written": 43, "develop": [44, 47], "": 44, "set": 44, "up": 44, "your": [44, 51], "comput": 44, "virtual": 44, "environ": [44, 51, 97], "guidelin": 44, "workflow": 44, "featur": [44, 49], "branch": 44, "test": 44, "write": 44, "basic": 44, "read": 44, "temporari": 44, "float": 44, "point": [44, 86], "skip": 44, "parametr": 44, "continu": 44, "deliveri": 44, "commit": 44, "thank": 44, "contribut": [45, 50], "releas": [46, 47], "defin": [46, 51], "roadmap": 47, "timet": 47, "how": [47, 53], "track": [47, 91], "wishlist": 47, "suggest": 47, "contributor": 48, "quick": [50, 52], "start": [50, 52], "tutori": [50, 54], "blog": 50, "post": 50, "indic": 50, "tabl": [50, 87], "instal": 51, "web": 51, "browser": 51, "easi": 51, "conda": 51, "either": 51, "copi": 51, "mambaforg": 51, "Or": 51, "exist": 51, "miniconda": 51, "And": 51, "also": 51, "contain": [51, 78], "harder": 51, "compil": 51, "sourc": 51, "hardest": 51, "own": 51, "runtim": 51, "b": 51, "check": 51, "out": 51, "d": 51, "recip": 51, "ask": 53, "help": 53, "part": [55, 56, 57, 58, 59, 60], "index": [56, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "molecular": [57, 96], "measur": [58, 86, 87, 88, 89], "movement": [58, 90, 91], "interconvert": 59, "6": 60, "alchem": [60, 98, 100], "free": 60, "import": 61, "pdb": 62, "alphafold": 62, "uniprot": 62, "access": [62, 68, 73, 74, 75, 76, 78, 87], "simpl": 63, "togeth": 66, "symmetr": 67, "input": 67, "output": 67, "wildcard": 68, "glob": 68, "uniqu": [68, 69, 70, 71, 72, 73, 74, 75, 76], "iter": [68, 69, 70, 71, 72, 87], "segment": [71, 72, 80], "term": 72, "angl": [74, 75, 76, 83, 86, 87, 91], "dihedr": [75, 84, 87, 91], "improp": [76, 85, 87], "coordin": 77, "within": 77, "conveni": 78, "via": 78, "appli": 78, "get": [78, 88], "cursor": [79, 90], "edit": 79, "delet": 79, "between": [86, 88], "arbitrai": 86, "against": 86, "rmsd": 87, "length": 87, "column": 87, "perform": 87, "arbitrari": 87, "compon": 88, "select": [88, 89], "interact": 88, "decompos": 88, "individu": [88, 91], "each": 89, "where": 89, "per": 89, "move": [90, 91], "translat": 90, "rotat": 90, "anchor": 91, "weight": 91, "rdkit": 92, "anyth": 92, "gener": [94, 95], "fragment": 95, "complex": 95, "minimis": [96, 99], "control": [96, 98], "merg": 97, "high": 98, "interfac": 98, "frequenc": 98, "perturb": 98, "\u03bb": 98, "schedul": 98, "ghost": 98, "soften": 98, "potenti": 98, "low": [98, 99], "posit": 99, "place": 99}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Acknowledgements": [[0, "acknowledgements"], [50, "acknowledgements"]], "Website": [[0, "website"]], "Hosting": [[0, "hosting"]], "Third Party Software": [[0, "third-party-software"]], "C++ Dependencies": [[0, "c-dependencies"]], "Qt 5": [[0, "qt-5"]], "Python": [[0, "python"], [43, "python"]], "boost": [[0, "boost"]], "Py++": [[0, "py"]], "cmake": [[0, "cmake"]], "Anaconda": [[0, "anaconda"]], "Threading Building Blocks (tbb)": [[0, "threading-building-blocks-tbb"]], "Gnu Scientific Library (GSL)": [[0, "gnu-scientific-library-gsl"]], "NetCDF": [[0, "netcdf"]], "OpenMM": [[0, "openmm"], [92, "openmm"]], "Regress": [[0, "regress"]], "eig3": [[0, "eig3"]], "Mersenne Twister": [[0, "mersenne-twister"]], "sse_mathfun": [[0, "sse-mathfun"]], "avx_mathfun": [[0, "avx-mathfun"]], "sse2neon": [[0, "sse2neon"]], "LAP (Linear Assignment Problem Solver)": [[0, "lap-linear-assignment-problem-solver"]], "MD5": [[0, "md5"]], "kabasch fitting": [[0, "kabasch-fitting"]], "mdanalysis": [[0, "mdanalysis"]], "Python Dependencies": [[0, "python-dependencies"]], "ap (ascii plot)": [[0, "ap-ascii-plot"]], "lazy_import": [[0, "lazy-import"]], "rich": [[0, "rich"]], "pandas": [[0, "pandas"]], "Public API": [[1, "module-sire.base"], [2, "module-sire.cas"], [3, "module-sire.convert"], [20, "module-sire.io"], [21, "module-sire.io.parser"], [22, "module-sire.maths"], [23, "module-sire.mm"], [24, "module-sire.mol"], [25, "module-sire.morph"], [26, "module-sire.restraints"], [27, "module-sire.search"], [28, "module-sire"], [30, "module-sire.stream"], [31, "module-sire.system"], [32, "module-sire.units"], [33, "module-sire.utils"], [34, "module-sire.vol"]], "Documentation": [[4, "documentation"], [44, "documentation"]], "Top-level documentation": [[4, "top-level-documentation"]], "Sub-module documentation": [[4, "sub-module-documentation"]], "sire.base": [[5, "sire-base"]], "sire.cas": [[6, "sire-cas"]], "sire.convert": [[7, "sire-convert"]], "sire.io": [[8, "sire-io"]], "sire.io.parser": [[8, "sire-io-parser"]], "sire.maths": [[9, "sire-maths"]], "sire.mm": [[10, "sire-mm"]], "sire.mol": [[11, "sire-mol"]], "sire.morph": [[12, "sire-morph"]], "sire.restraints": [[13, "sire-restraints"]], "sire.search": [[14, "sire-search"]], "sire.stream": [[15, "sire-stream"]], "sire.system": [[16, "sire-system"]], "sire.units": [[17, "sire-units"]], "sire.utils": [[18, "sire-utils"]], "sire.vol": [[19, "sire-vol"]], "sire module": [[28, "sire-module"]], "Sub-modules": [[29, "sub-modules"]], "Changelog": [[35, "changelog"], [50, "changelog"]], "GitHub (OpenBioSim): January 2023 - current": [[35, "github-openbiosim-january-2023-current"]], "2023.4.0 - September 2023": [[35, "september-2023"]], "2023.3.2 - September 2023": [[35, "id1"]], "2023.3.1 - July 2023": [[35, "july-2023"]], "2023.3.0 - June 2023": [[35, "june-2023"]], "2023.2.3 - May 2023": [[35, "may-2023"]], "2023.2.2 - April 2023": [[35, "april-2023"]], "2023.2.1 - April 2023": [[35, "id4"]], "2023.2.0 - March 2023": [[35, "march-2023"]], "2023.1.3 - February 2023": [[35, "february-2023"]], "2023.1.2 - February 2023": [[35, "id5"]], "2023.1.1 - January 2023": [[35, "january-2023"]], "2023.1.0 - January 2023": [[35, "id6"]], "GitHub (michellab): June 22nd 2015 - January 2023": [[35, "github-michellab-june-22nd-2015-january-2023"]], "Google Code: August 7th 2006 - April 1st 2015": [[35, "google-code-august-7th-2006-april-1st-2015"]], "Local Subversion: February 5th 2005 - July 25th 2006": [[35, "local-subversion-february-5th-2005-july-25th-2006"]], "Detailed Guides": [[36, "detailed-guides"], [50, "detailed-guides"]], "OpenMM Integration": [[37, "openmm-integration"]], "Choosing options": [[37, "choosing-options"]], "Higher level API": [[37, "higher-level-api"]], "Running dynamics and saving frames and energies": [[37, "running-dynamics-and-saving-frames-and-energies"]], "Searching": [[38, "searching"], [77, "searching"]], "Views": [[38, "views"]], "Identifiers": [[38, "identifiers"]], "Numbers": [[38, "numbers"]], "Strings": [[38, "strings"]], "Comparisons": [[38, "comparisons"]], "Logical operators": [[38, "logical-operators"]], "Returned View Types": [[38, "returned-view-types"]], "Expansive (with) and Contractive (in) Searches": [[38, "expansive-with-and-contractive-in-searches"]], "Match All Atoms, Residues, Chains etc.": [[38, "match-all-atoms-residues-chains-etc"]], "Advanced with and in Searches": [[38, "advanced-with-and-in-searches"]], "Searching for Bonds using in, with, from and to": [[38, "searching-for-bonds-using-in-with-from-and-to"]], "Searching by Chemical Element": [[38, "searching-by-chemical-element"]], "Searching by Count (i.e. Number of Atoms)": [[38, "searching-by-count-i-e-number-of-atoms"]], "Searching by Charge or Mass": [[38, "searching-by-charge-or-mass"]], "Searching by Charge using Approximate Comparisons": [[38, "searching-by-charge-using-approximate-comparisons"]], "Searching by Property": [[38, "searching-by-property"]], "Finding the Nth View that Matches": [[38, "finding-the-nth-view-that-matches"]], "Searching by Distance": [[38, "searching-by-distance"]], "Searching by Closest and Furthest": [[38, "searching-by-closest-and-furthest"]], "Searching using Smiles or Smarts Strings": [[38, "searching-using-smiles-or-smarts-strings"]], "Searching for Water or Protein Molecules": [[38, "searching-for-water-or-protein-molecules"]], "Creating Custom Search Tokens": [[38, "creating-custom-search-tokens"]], "Trajectories": [[39, "trajectories"]], "Supported file formats": [[39, "supported-file-formats"], [67, "supported-file-formats"]], "Loading trajectories": [[39, "loading-trajectories"]], "Loading and joining multiple trajectories": [[39, "loading-and-joining-multiple-trajectories"]], "Saving trajectories": [[39, "saving-trajectories"], [66, "saving-trajectories"]], "Saving trajectory for subsets of molecules": [[39, "saving-trajectory-for-subsets-of-molecules"]], "Saving to multiple files in parallel": [[39, "saving-to-multiple-files-in-parallel"]], "Saving to file trajectories": [[39, "saving-to-file-trajectories"]], "Visualising trajectories": [[39, "visualising-trajectories"]], "Smoothing and aligning frames": [[39, "smoothing-and-aligning-frames"]], "Aligning to molecules outside the trajectory": [[39, "aligning-to-molecules-outside-the-trajectory"]], "Calculating energies across frames": [[39, "calculating-energies-across-frames"]], "Units": [[40, "units"]], "Converting to other units": [[40, "converting-to-other-units"]], "Supported units": [[40, "supported-units"]], "SI prefixes": [[40, "si-prefixes"]], "Raising units to a power": [[40, "raising-units-to-a-power"]], "Combining units": [[40, "combining-units"]], "Changing default units": [[40, "changing-default-units"]], "Conversion from pint": [[40, "conversion-from-pint"]], "Conversion from BioSimSpace": [[40, "conversion-from-biosimspace"]], "Conversion from other packages": [[40, "conversion-from-other-packages"]], "Under the hood - GeneralUnit": [[40, "under-the-hood-generalunit"]], "Under the hood - Python to C++": [[40, "under-the-hood-python-to-c"]], "Viewing Molecules": [[41, "viewing-molecules"]], "2D Views": [[41, "d-views"]], "3D Views": [[41, "id1"]], "Choosing the 3D representation": [[41, "choosing-the-3d-representation"]], "Choosing colors and opacities": [[41, "choosing-colors-and-opacities"]], "Centering the view": [[41, "centering-the-view"]], "Viewing trajectories": [[41, "viewing-trajectories"]], "Wrapping molecules into the current box": [[41, "wrapping-molecules-into-the-current-box"]], "Trajectory Alignment": [[41, "trajectory-alignment"]], "Trajectory Smoothing": [[41, "trajectory-smoothing"]], "Integration with trajectories": [[41, "integration-with-trajectories"]], "Closer integration with NGLView": [[41, "closer-integration-with-nglview"]], "Saving 3D views to files": [[41, "saving-3d-views-to-files"]], "Code of Conduct": [[42, "code-of-conduct"]], "Our Pledge": [[42, "our-pledge"]], "Our Standards": [[42, "our-standards"]], "Our Responsibilities": [[42, "our-responsibilities"]], "Scope": [[42, "scope"]], "Enforcement": [[42, "enforcement"]], "Attribution": [[42, "attribution"]], "Coding Style": [[43, "coding-style"]], "C++": [[43, "c"]], "All indentation should be multiples of 4 spaces. All tabs should be replaced by 4 spaces": [[43, "all-indentation-should-be-multiples-of-4-spaces-all-tabs-should-be-replaced-by-4-spaces"]], "Curly brackets should be used for all blocks, with { on a new line": [[43, "curly-brackets-should-be-used-for-all-blocks-with-on-a-new-line"]], "Classes should be named using capital letters, using only the letters A-Za-z and numbers 0-9": [[43, "classes-should-be-named-using-capital-letters-using-only-the-letters-a-za-z-and-numbers-0-9"]], "Functions (methods) should be named in the same way as classes, except that the first letter should not be capitalised": [[43, "functions-methods-should-be-named-in-the-same-way-as-classes-except-that-the-first-letter-should-not-be-capitalised"]], "Variables (member data) should be named using all small case letters or numbers": [[43, "variables-member-data-should-be-named-using-all-small-case-letters-or-numbers"]], "Exceptions are named in the same way as variables": [[43, "exceptions-are-named-in-the-same-way-as-variables"]], "No line should be over 90 characters long": [[43, "no-line-should-be-over-90-characters-long"]], "Always code using a fixed-width font": [[43, "always-code-using-a-fixed-width-font"]], "Use whitespace to make the code clean": [[43, "use-whitespace-to-make-the-code-clean"]], "Speaking of braces, please use the above style": [[43, "speaking-of-braces-please-use-the-above-style"]], "Sire uses doxygen-style comments": [[43, "sire-uses-doxygen-style-comments"]], "Finally, keep an eye here as more rules will be written": [[43, "finally-keep-an-eye-here-as-more-rules-will-be-written"]], "Developer\u2019s guide": [[44, "developer-s-guide"]], "Setting up your computer": [[44, "setting-up-your-computer"]], "Virtual environments": [[44, "virtual-environments"]], "Python Coding Style": [[44, "python-coding-style"]], "C++ Coding Style": [[44, "c-coding-style"]], "Guidelines": [[44, "guidelines"]], "Workflow": [[44, "workflow"]], "Feature branches": [[44, "feature-branches"]], "Testing": [[44, "testing"]], "Running tests": [[44, "running-tests"]], "Writing tests": [[44, "writing-tests"]], "Basics": [[44, "basics"]], "Reading files": [[44, "reading-files"]], "Writing temporary files": [[44, "writing-temporary-files"]], "Custom attributes": [[44, "custom-attributes"]], "Floating point comparisons": [[44, "floating-point-comparisons"]], "Skipping tests": [[44, "skipping-tests"]], "Parametrizing tests": [[44, "parametrizing-tests"]], "Testing exceptions": [[44, "testing-exceptions"]], "Continuous integration and delivery": [[44, "continuous-integration-and-delivery"]], "Committing": [[44, "committing"]], "Thanks": [[44, "thanks"]], "Contributing": [[45, "contributing"], [50, "contributing"]], "Packaging releases": [[46, "packaging-releases"]], "Defining a release": [[46, "defining-a-release"]], "Creating a release": [[46, "creating-a-release"]], "Roadmap": [[47, "roadmap"]], "Release Timetable": [[47, "release-timetable"]], "How to track development": [[47, "how-to-track-development"]], "Wishlists / suggestions": [[47, "wishlists-suggestions"]], "Contributors": [[48, "contributors"]], "Features": [[49, "features"]], "OpenBioSim | Sire": [[50, "openbiosim-sire"]], "Quick Start": [[50, "quick-start"]], "Tutorial": [[50, "tutorial"], [54, "tutorial"]], "Blog Posts": [[50, "blog-posts"]], "API": [[50, "api"]], "Support": [[50, "support"]], "Indices and tables": [[50, "indices-and-tables"]], "Installation": [[51, "installation"]], "1. No-installation - Run in a Web Browser": [[51, "no-installation-run-in-a-web-browser"]], "2. Easy installation - Run in a conda environment": [[51, "easy-installation-run-in-a-conda-environment"]], "Either\u2026 Install a new copy of mambaforge": [[51, "either-install-a-new-copy-of-mambaforge"]], "Or\u2026 Use an existing anaconda/miniconda install": [[51, "or-use-an-existing-anaconda-miniconda-install"]], "And then\u2026 Install sire into a new environment": [[51, "and-then-install-sire-into-a-new-environment"]], "3. Also easy installation - Run in a container": [[51, "also-easy-installation-run-in-a-container"]], "4. Harder installation - Compile from source": [[51, "harder-installation-compile-from-source"]], "5. Hardest install - build your own custom conda packages": [[51, "hardest-install-build-your-own-custom-conda-packages"]], "A. Define your runtime environment": [[51, "a-define-your-runtime-environment"]], "B. Check out the sire source code": [[51, "b-check-out-the-sire-source-code"]], "C. Create the conda build environment": [[51, "c-create-the-conda-build-environment"]], "D. Create the conda recipe": [[51, "d-create-the-conda-recipe"]], "E. Building the package": [[51, "e-building-the-package"]], "Quick Start Guide": [[52, "quick-start-guide"]], "How to ask for help": [[53, "how-to-ask-for-help"]], "Part 1 - Loading and Saving": [[55, "part-1-loading-and-saving"]], "Part 2 - Indexing and Searching": [[56, "part-2-indexing-and-searching"]], "Part 3 - Molecular Properties": [[57, "part-3-molecular-properties"]], "Part 4 - Measurement, Trajectories and Movement": [[58, "part-4-measurement-trajectories-and-movement"]], "Part 5 - Interconverting with other Packages": [[59, "part-5-interconverting-with-other-packages"]], "Part 6 - Morphs and Alchemical Free Energies": [[60, "part-6-morphs-and-alchemical-free-energies"]], "Importing sire": [[61, "importing-sire"]], "Loading a molecule": [[62, "loading-a-molecule"]], "Loading using a PDB code": [[62, "loading-using-a-pdb-code"]], "Loading from Alphafold using a Uniprot code": [[62, "loading-from-alphafold-using-a-uniprot-code"]], "Loading from files": [[62, "loading-from-files"]], "Accessing the molecules": [[62, "accessing-the-molecules"]], "Simple indexing": [[63, "simple-indexing"]], "Saving a molecule": [[64, "saving-a-molecule"]], "Saving to strings": [[64, "saving-to-strings"]], "Loading from multiple files": [[65, "loading-from-multiple-files"]], "Loading and saving trajectories": [[66, "loading-and-saving-trajectories"]], "Joining multiple trajectories together": [[66, "joining-multiple-trajectories-together"]], "Trajectories as frames": [[66, "trajectories-as-frames"]], "Symmetric Input / Output": [[67, "symmetric-input-output"]], "Indexing Atoms": [[68, "indexing-atoms"]], "Accessing by name": [[68, "accessing-by-name"]], "Searching by number": [[68, "searching-by-number"]], "Searching by name": [[68, "searching-by-name"]], "Searching by wildcards (glob matching)": [[68, "searching-by-wildcards-glob-matching"]], "Searching by element": [[68, "searching-by-element"]], "Uniquely identifying atoms": [[68, "uniquely-identifying-atoms"]], "Atom identifying types": [[68, "atom-identifying-types"]], "Iterating over atoms": [[68, "iterating-over-atoms"]], "Counting atoms": [[68, "counting-atoms"]], "Indexing Residues": [[69, "indexing-residues"]], "Searching for residues": [[69, "searching-for-residues"]], "Finding the atoms in a residue": [[69, "finding-the-atoms-in-a-residue"]], "Uniquely identifying a residue": [[69, "uniquely-identifying-a-residue"]], "Residue identifying types": [[69, "residue-identifying-types"]], "Iterating over residues": [[69, "iterating-over-residues"]], "Counting residues": [[69, "counting-residues"]], "Indexing Chains": [[70, "indexing-chains"]], "Search for chains": [[70, "search-for-chains"]], "Finding the residues in a chain": [[70, "finding-the-residues-in-a-chain"]], "Finding the atoms in a chain": [[70, "finding-the-atoms-in-a-chain"]], "Uniquely identifying a chain": [[70, "uniquely-identifying-a-chain"]], "Chain identifying types": [[70, "chain-identifying-types"]], "Iterating over chains": [[70, "iterating-over-chains"]], "Finding all chain names": [[70, "finding-all-chain-names"]], "Indexing Segments": [[71, "indexing-segments"]], "Search for segments": [[71, "search-for-segments"]], "Finding the atoms in a segment": [[71, "finding-the-atoms-in-a-segment"]], "Finding the atoms, residues or chains in a segment": [[71, "finding-the-atoms-residues-or-chains-in-a-segment"]], "Uniquely identifying a segment": [[71, "uniquely-identifying-a-segment"]], "Segment identifying types": [[71, "segment-identifying-types"]], "Iterating over segments": [[71, "iterating-over-segments"]], "Finding all segment names": [[71, "finding-all-segment-names"]], "Indexing Molecules": [[72, "indexing-molecules"]], "Search for molecules": [[72, "search-for-molecules"]], "Finding atoms, residues, chains and segments in a molecule": [[72, "finding-atoms-residues-chains-and-segments-in-a-molecule"]], "Uniquely identifying a molecule": [[72, "uniquely-identifying-a-molecule"]], "Molecule identifying types": [[72, "molecule-identifying-types"]], "Iterating over molecules": [[72, "iterating-over-molecules"]], "Smart search terms": [[72, "smart-search-terms"]], "Indexing Bonds": [[73, "indexing-bonds"]], "Accessing bonds by atom": [[73, "accessing-bonds-by-atom"]], "Accessing bonds by residue": [[73, "accessing-bonds-by-residue"]], "Searching for bonds": [[73, "searching-for-bonds"]], "Uniquely identifying a bond": [[73, "uniquely-identifying-a-bond"]], "Indexing Angles": [[74, "indexing-angles"]], "Accessing angles by atom or bond": [[74, "accessing-angles-by-atom-or-bond"]], "Accessing angles by residue": [[74, "accessing-angles-by-residue"]], "Uniquely identifying an angle": [[74, "uniquely-identifying-an-angle"]], "Indexing Dihedrals": [[75, "indexing-dihedrals"]], "Accessing dihedrals by atom, bond or angle": [[75, "accessing-dihedrals-by-atom-bond-or-angle"]], "Accessing dihedrals by residue": [[75, "accessing-dihedrals-by-residue"]], "Uniquely identifying a dihedral": [[75, "uniquely-identifying-a-dihedral"]], "Indexing Impropers": [[76, "indexing-impropers"]], "Accessing impropers by atom, bond or angle": [[76, "accessing-impropers-by-atom-bond-or-angle"]], "Accessing impropers by residue": [[76, "accessing-impropers-by-residue"]], "Uniquely identifying an improper": [[76, "uniquely-identifying-an-improper"]], "Searching by count": [[77, "searching-by-count"]], "Searching by property": [[77, "searching-by-property"], [79, "searching-by-property"]], "Searching by mass": [[77, "searching-by-mass"]], "Searching by charge": [[77, "searching-by-charge"]], "Searching by coordinates": [[77, "searching-by-coordinates"]], "Searching by molecule type": [[77, "searching-by-molecule-type"]], "Searching by custom tokens": [[77, "searching-by-custom-tokens"]], "Indexing within searches": [[77, "indexing-within-searches"]], "Atom Properties": [[78, "atom-properties"]], "Convenience functions": [[78, "convenience-functions"]], "Accessing atom properties via views": [[78, "accessing-atom-properties-via-views"]], "Using apply to get the properties of views in a container": [[78, "using-apply-to-get-the-properties-of-views-in-a-container"]], "Cursors and Editing Properties": [[79, "cursors-and-editing-properties"]], "Deleting properties": [[79, "deleting-properties"]], "Residue, Chain and Segment Properties": [[80, "residue-chain-and-segment-properties"]], "Residue properties": [[80, "residue-properties"]], "Chain properties": [[80, "chain-properties"]], "Segment properties": [[80, "segment-properties"]], "Molecule Properties": [[81, "molecule-properties"]], "Bond Views and Properties": [[82, "bond-views-and-properties"]], "Bond views": [[82, "bond-views"]], "Bond properties": [[82, "bond-properties"]], "Angle Views and Properties": [[83, "angle-views-and-properties"]], "Angle views": [[83, "angle-views"]], "Angle properties": [[83, "angle-properties"]], "Dihedral Views and Properties": [[84, "dihedral-views-and-properties"]], "Dihedral views": [[84, "dihedral-views"]], "Dihedral properties": [[84, "dihedral-properties"]], "Improper Views and Properties": [[85, "improper-views-and-properties"]], "Improper views": [[85, "improper-views"]], "Improper properties": [[85, "improper-properties"]], "Measuring Distances and Angles": [[86, "measuring-distances-and-angles"]], "Making measurements between atoms": [[86, "making-measurements-between-atoms"]], "Making measurements between arbitray views": [[86, "making-measurements-between-arbitray-views"]], "Measuring against points in space": [[86, "measuring-against-points-in-space"]], "Measuring Trajectories": [[87, "measuring-trajectories"]], "Iterating over trajectories": [[87, "iterating-over-trajectories"]], "Measuring RMSD across a trajectory": [[87, "measuring-rmsd-across-a-trajectory"]], "Measuring bond lengths over a trajectory": [[87, "measuring-bond-lengths-over-a-trajectory"]], "Creating tables of measurements using pandas": [[87, "creating-tables-of-measurements-using-pandas"]], "Changing the units of measurement": [[87, "changing-the-units-of-measurement"]], "Accessing measurement data by column": [[87, "accessing-measurement-data-by-column"]], "Plotting measurements": [[87, "plotting-measurements"]], "Measuring angles, dihedrals and impropers": [[87, "measuring-angles-dihedrals-and-impropers"]], "Performing arbitrary measurements": [[87, "performing-arbitrary-measurements"]], "Creating tables of RMSDs using Pandas": [[87, "creating-tables-of-rmsds-using-pandas"]], "Measuring Energies": [[88, "measuring-energies"]], "Getting energy components": [[88, "getting-energy-components"]], "Calculating energies of selections": [[88, "calculating-energies-of-selections"], [89, "calculating-energies-of-selections"]], "Calculating interaction energies between selections": [[88, "calculating-interaction-energies-between-selections"]], "Decomposing into individual energies": [[88, "decomposing-into-individual-energies"]], "Decomposing into interaction energies": [[88, "decomposing-into-interaction-energies"]], "Measuring Energies Across Trajectories": [[89, "measuring-energies-across-trajectories"]], "Calculating energies for each view in a selection": [[89, "calculating-energies-for-each-view-in-a-selection"]], "Calculating energies where the selection changes per frame": [[89, "calculating-energies-where-the-selection-changes-per-frame"]], "Moving Atoms and Molecules": [[90, "moving-atoms-and-molecules"]], "Translation using a Cursor": [[90, "translation-using-a-cursor"]], "Rotation using a Cursor": [[90, "rotation-using-a-cursor"]], "Visualising movement by saving trajectory frames": [[90, "visualising-movement-by-saving-trajectory-frames"]], "Moving Bonds, Angles and Dihedrals": [[91, "moving-bonds-angles-and-dihedrals"]], "Moving Bonds": [[91, "moving-bonds"]], "Tracking movement with trajectories": [[91, "tracking-movement-with-trajectories"]], "Moving Angles": [[91, "moving-angles"]], "Moving Dihedrals": [[91, "moving-dihedrals"]], "Moving individual dihedrals": [[91, "moving-individual-dihedrals"]], "Aligning, Anchoring and Weighting": [[91, "aligning-anchoring-and-weighting"]], "Converting Molecules": [[92, "converting-molecules"]], "BioSimSpace": [[92, "biosimspace"]], "RDKit": [[92, "rdkit"]], "Anything to Anything": [[92, "anything-to-anything"]], "Supporting other formats": [[92, "supporting-other-formats"]], "Viewing Molecules in 2D": [[93, "viewing-molecules-in-2d"]], "Creating Molecules from Smiles Strings": [[94, "creating-molecules-from-smiles-strings"]], "Generating smiles strings from molecules": [[94, "generating-smiles-strings-from-molecules"]], "Searching using smiles strings": [[94, "searching-using-smiles-strings"]], "Searching for Fragments using Smarts Strings": [[95, "searching-for-fragments-using-smarts-strings"]], "More complex searches": [[95, "more-complex-searches"]], "Matching multiple molecules": [[95, "matching-multiple-molecules"]], "Generating smarts strings from molecules": [[95, "generating-smarts-strings-from-molecules"]], "Creating molecules from smarts": [[95, "creating-molecules-from-smarts"]], "Molecular Dynamics and Minimisation": [[96, "molecular-dynamics-and-minimisation"]], "Minimisation": [[96, "minimisation"]], "Molecular Dynamics": [[96, "molecular-dynamics"]], "Controlling Dynamics": [[96, "controlling-dynamics"]], "Merged Molecules": [[97, "merged-molecules"]], "Viewing merged molecules": [[97, "viewing-merged-molecules"]], "Viewing merged molecules in their environment": [[97, "viewing-merged-molecules-in-their-environment"]], "Alchemical Dynamics": [[98, "alchemical-dynamics"]], "High level interface": [[98, "high-level-interface"]], "Energy Trajectories": [[98, "energy-trajectories"]], "Controlling the trajectory frequency": [[98, "controlling-the-trajectory-frequency"]], "Controlling perturbations with a \u03bb-schedule": [[98, "controlling-perturbations-with-a-schedule"]], "Ghost Atoms and Softening potentials": [[98, "ghost-atoms-and-softening-potentials"]], "Low level interface": [[98, "low-level-interface"]], "Restraints": [[99, "restraints"]], "Positional Restraints": [[99, "positional-restraints"]], "Distance or Bond Restraints": [[99, "distance-or-bond-restraints"]], "Using restraints in minimisation or dynamics": [[99, "using-restraints-in-minimisation-or-dynamics"]], "Using restraints in the low-level API": [[99, "using-restraints-in-the-low-level-api"]], "Fixing atoms in place": [[99, "fixing-atoms-in-place"]], "Alchemical Restraints": [[100, "alchemical-restraints"]], "Using named restraints": [[100, "using-named-restraints"]]}, "indexentries": {"propertymap (class in sire.base)": [[1, "sire.base.PropertyMap"]], "add_prefix() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.add_prefix"]], "add_suffix() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.add_suffix"]], "assign() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.assign"]], "clone() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.clone"]], "create_map() (in module sire.base)": [[1, "sire.base.create_map"]], "is_default() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.is_default"]], "merge() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.merge"]], "module": [[1, "module-sire.base"], [2, "module-sire.cas"], [3, "module-sire.convert"], [20, "module-sire.io"], [21, "module-sire.io.parser"], [22, "module-sire.maths"], [23, "module-sire.mm"], [24, "module-sire.mol"], [25, "module-sire.morph"], [26, "module-sire.restraints"], [27, "module-sire.search"], [28, "module-sire"], [30, "module-sire.stream"], [31, "module-sire.system"], [32, "module-sire.units"], [33, "module-sire.utils"], [34, "module-sire.vol"]], "sire.base": [[1, "module-sire.base"]], "specified() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.specified"]], "to_dict() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.to_dict"]], "to_string() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.to_string"]], "typename() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.typename"]], "what() (sire.base.propertymap method)": [[1, "sire.base.PropertyMap.what"]], "wrap() (in module sire.base)": [[1, "sire.base.wrap"]], "expression (class in sire.cas)": [[2, "sire.cas.Expression"]], "lambdaschedule (class in sire.cas)": [[2, "sire.cas.LambdaSchedule"]], "symbol (class in sire.cas)": [[2, "sire.cas.Symbol"]], "add() (sire.cas.expression method)": [[2, "sire.cas.Expression.add"]], "add_charge_scale_stages() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.add_charge_scale_stages"]], "add_lever() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.add_lever"]], "add_levers() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.add_levers"]], "add_morph_stage() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.add_morph_stage"]], "add_stage() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.add_stage"]], "append_stage() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.append_stage"]], "assign() (sire.cas.expression method)": [[2, "sire.cas.Expression.assign"]], "assign() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.assign"]], "assign() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.assign"]], "base() (sire.cas.expression method)": [[2, "sire.cas.Expression.base"]], "charge_scaled_morph() (sire.cas.lambdaschedule static method)": [[2, "sire.cas.LambdaSchedule.charge_scaled_morph"]], "children() (sire.cas.expression method)": [[2, "sire.cas.Expression.children"]], "children() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.children"]], "clamp() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.clamp"]], "clear() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.clear"]], "clone() (sire.cas.expression method)": [[2, "sire.cas.Expression.clone"]], "clone() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.clone"]], "clone() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.clone"]], "conjugate() (sire.cas.expression method)": [[2, "sire.cas.Expression.conjugate"]], "cubed() (sire.cas.expression method)": [[2, "sire.cas.Expression.cubed"]], "diff() (sire.cas.expression method)": [[2, "sire.cas.Expression.diff"]], "differentiate() (sire.cas.expression method)": [[2, "sire.cas.Expression.differentiate"]], "differentiate() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.differentiate"]], "divide() (sire.cas.expression method)": [[2, "sire.cas.Expression.divide"]], "evaluate() (sire.cas.expression method)": [[2, "sire.cas.Expression.evaluate"]], "evaluate() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.evaluate"]], "expand() (sire.cas.expression method)": [[2, "sire.cas.Expression.expand"]], "expand() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.expand"]], "factor() (sire.cas.expression method)": [[2, "sire.cas.Expression.factor"]], "final() (sire.cas.lambdaschedule static method)": [[2, "sire.cas.LambdaSchedule.final"]], "functions() (sire.cas.expression method)": [[2, "sire.cas.Expression.functions"]], "functions() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.functions"]], "get_constant() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_constant"]], "get_constant_symbol() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_constant_symbol"]], "get_equation() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_equation"]], "get_lambda_in_stage() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_lambda_in_stage"]], "get_lever_stages() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_lever_stages"]], "get_lever_values() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_lever_values"]], "get_levers() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_levers"]], "get_stage() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_stage"]], "get_stages() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.get_stages"]], "hash() (sire.cas.expression method)": [[2, "sire.cas.Expression.hash"]], "hash() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.hash"]], "id() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.id"]], "initial() (sire.cas.lambdaschedule static method)": [[2, "sire.cas.LambdaSchedule.initial"]], "insert_stage() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.insert_stage"]], "integ() (sire.cas.expression method)": [[2, "sire.cas.Expression.integ"]], "integrate() (sire.cas.expression method)": [[2, "sire.cas.Expression.integrate"]], "integrate() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.integrate"]], "invert() (sire.cas.expression method)": [[2, "sire.cas.Expression.invert"]], "is_complex() (sire.cas.expression method)": [[2, "sire.cas.Expression.is_complex"]], "is_compound() (sire.cas.expression method)": [[2, "sire.cas.Expression.is_compound"]], "is_constant() (sire.cas.expression method)": [[2, "sire.cas.Expression.is_constant"]], "is_constant() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.is_constant"]], "is_function() (sire.cas.expression method)": [[2, "sire.cas.Expression.is_function"]], "is_function() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.is_function"]], "is_null() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.is_null"]], "is_null() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.is_null"]], "is_zero() (sire.cas.expression method)": [[2, "sire.cas.Expression.is_zero"]], "lam (in module sire.cas)": [[2, "sire.cas.lam"]], "lam() (sire.cas.lambdaschedule static method)": [[2, "sire.cas.LambdaSchedule.lam"]], "morph() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.morph"]], "multiply() (sire.cas.expression method)": [[2, "sire.cas.Expression.multiply"]], "negate() (sire.cas.expression method)": [[2, "sire.cas.Expression.negate"]], "num_levers() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.num_levers"]], "num_stages() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.num_stages"]], "pow() (sire.cas.expression method)": [[2, "sire.cas.Expression.pow"]], "prepend_stage() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.prepend_stage"]], "remove_equation() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.remove_equation"]], "remove_lever() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.remove_lever"]], "remove_levers() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.remove_levers"]], "root() (sire.cas.expression method)": [[2, "sire.cas.Expression.root"]], "series() (sire.cas.expression method)": [[2, "sire.cas.Expression.series"]], "set_constant() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.set_constant"]], "set_default_equation() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.set_default_equation"]], "set_equation() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.set_equation"]], "simplify() (sire.cas.expression method)": [[2, "sire.cas.Expression.simplify"]], "sire.cas": [[2, "module-sire.cas"]], "squared() (sire.cas.expression method)": [[2, "sire.cas.Expression.squared"]], "standard_morph() (sire.cas.lambdaschedule static method)": [[2, "sire.cas.LambdaSchedule.standard_morph"]], "substitute() (sire.cas.expression method)": [[2, "sire.cas.Expression.substitute"]], "substitute() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.substitute"]], "subtract() (sire.cas.expression method)": [[2, "sire.cas.Expression.subtract"]], "symbols() (sire.cas.expression method)": [[2, "sire.cas.Expression.symbols"]], "symbols() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.symbols"]], "to_open_m_m_string() (sire.cas.expression method)": [[2, "sire.cas.Expression.to_open_m_m_string"]], "to_string() (sire.cas.expression method)": [[2, "sire.cas.Expression.to_string"]], "to_string() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.to_string"]], "to_string() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.to_string"]], "typename() (sire.cas.expression method)": [[2, "sire.cas.Expression.typename"]], "typename() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.typename"]], "typename() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.typename"]], "what() (sire.cas.expression method)": [[2, "sire.cas.Expression.what"]], "what() (sire.cas.lambdaschedule method)": [[2, "sire.cas.LambdaSchedule.what"]], "what() (sire.cas.symbol method)": [[2, "sire.cas.Symbol.what"]], "x (in module sire.cas)": [[2, "sire.cas.x"]], "y (in module sire.cas)": [[2, "sire.cas.y"]], "biosimspace_to_sire() (in module sire.convert)": [[3, "sire.convert.biosimspace_to_sire"]], "openmm_to_sire() (in module sire.convert)": [[3, "sire.convert.openmm_to_sire"]], "rdkit_to_sire() (in module sire.convert)": [[3, "sire.convert.rdkit_to_sire"]], "sire.convert": [[3, "module-sire.convert"]], "sire_to_biosimspace() (in module sire.convert)": [[3, "sire.convert.sire_to_biosimspace"]], "sire_to_openmm() (in module sire.convert)": [[3, "sire.convert.sire_to_openmm"]], "sire_to_rdkit() (in module sire.convert)": [[3, "sire.convert.sire_to_rdkit"]], "supported_formats() (in module sire.convert)": [[3, "sire.convert.supported_formats"]], "to() (in module sire.convert)": [[3, "sire.convert.to"]], "to_biosimspace() (in module sire.convert)": [[3, "sire.convert.to_biosimspace"]], "to_openmm() (in module sire.convert)": [[3, "sire.convert.to_openmm"]], "to_rdkit() (in module sire.convert)": [[3, "sire.convert.to_rdkit"]], "to_sire() (in module sire.convert)": [[3, "sire.convert.to_sire"]], "get_coords_array() (in module sire.io)": [[20, "sire.io.get_coords_array"]], "resolve_path() (in module sire.io)": [[20, "sire.io.resolve_path"]], "sire.io": [[20, "module-sire.io"]], "dcd (class in sire.io.parser)": [[21, "sire.io.parser.DCD"]], "g87 (in module sire.io.parser)": [[21, "sire.io.parser.G87"]], "gtop (in module sire.io.parser)": [[21, "sire.io.parser.GTOP"]], "mol2 (in module sire.io.parser)": [[21, "sire.io.parser.MOL2"]], "pdb (in module sire.io.parser)": [[21, "sire.io.parser.PDB"]], "prm (in module sire.io.parser)": [[21, "sire.io.parser.PRM"]], "psf (in module sire.io.parser)": [[21, "sire.io.parser.PSF"]], "rst (in module sire.io.parser)": [[21, "sire.io.parser.RST"]], "rst7 (in module sire.io.parser)": [[21, "sire.io.parser.RST7"]], "sdf (class in sire.io.parser)": [[21, "sire.io.parser.SDF"]], "traj (in module sire.io.parser)": [[21, "sire.io.parser.TRAJ"]], "trr (class in sire.io.parser)": [[21, "sire.io.parser.TRR"]], "xtc (class in sire.io.parser)": [[21, "sire.io.parser.XTC"]], "assign() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.assign"]], "assign() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.assign"]], "assign() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.assign"]], "assign() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.assign"]], "clone() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.clone"]], "clone() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.clone"]], "clone() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.clone"]], "clone() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.clone"]], "construct() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.construct"]], "construct() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.construct"]], "construct() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.construct"]], "construct() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.construct"]], "count() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.count"]], "count() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.count"]], "count() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.count"]], "disable_parallel() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.disable_parallel"]], "enable_parallel() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.enable_parallel"]], "error_report() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.error_report"]], "format_description() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.format_description"]], "format_description() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.format_description"]], "format_description() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.format_description"]], "format_description() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.format_description"]], "format_name() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.format_name"]], "format_name() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.format_name"]], "format_name() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.format_name"]], "format_name() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.format_name"]], "format_suffix() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.format_suffix"]], "format_suffix() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.format_suffix"]], "format_suffix() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.format_suffix"]], "format_suffix() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.format_suffix"]], "get_frame() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.get_frame"]], "get_frame() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.get_frame"]], "get_frame() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.get_frame"]], "get_frame() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.get_frame"]], "has_warnings() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.has_warnings"]], "is_binary_file() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.is_binary_file"]], "is_broken() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.is_broken"]], "is_empty() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.is_empty"]], "is_frame() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.is_frame"]], "is_frame() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.is_frame"]], "is_frame() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.is_frame"]], "is_frame() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.is_frame"]], "is_supplementary() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.is_supplementary"]], "is_text_file() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.is_text_file"]], "is_text_file() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.is_text_file"]], "is_text_file() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.is_text_file"]], "is_topology() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.is_topology"]], "is_topology() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.is_topology"]], "num_atoms() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.num_atoms"]], "num_atoms() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.num_atoms"]], "num_atoms() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.num_atoms"]], "num_atoms() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.num_atoms"]], "num_frames() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.num_frames"]], "num_frames() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.num_frames"]], "num_frames() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.num_frames"]], "num_frames() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.num_frames"]], "num_molecules() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.num_molecules"]], "parse() (sire.io.parser.dcd static method)": [[21, "sire.io.parser.DCD.parse"]], "parse() (sire.io.parser.trr static method)": [[21, "sire.io.parser.TRR.parse"]], "parse() (sire.io.parser.xtc static method)": [[21, "sire.io.parser.XTC.parse"]], "parse_warnings() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.parse_warnings"]], "set_use_parallel() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.set_use_parallel"]], "sire.io.parser": [[21, "module-sire.io.parser"]], "size() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.size"]], "size() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.size"]], "size() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.size"]], "supported_formats() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.supported_formats"]], "to_string() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.to_string"]], "to_string() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.to_string"]], "to_string() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.to_string"]], "to_string() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.to_string"]], "to_system() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.to_system"]], "typename() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.typename"]], "typename() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.typename"]], "typename() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.typename"]], "typename() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.typename"]], "uses_parallel() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.uses_parallel"]], "what() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.what"]], "what() (sire.io.parser.sdf method)": [[21, "sire.io.parser.SDF.what"]], "what() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.what"]], "what() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.what"]], "write_to_file() (sire.io.parser.dcd method)": [[21, "sire.io.parser.DCD.write_to_file"]], "write_to_file() (sire.io.parser.trr method)": [[21, "sire.io.parser.TRR.write_to_file"]], "write_to_file() (sire.io.parser.xtc method)": [[21, "sire.io.parser.XTC.write_to_file"]], "energytrajectory (class in sire.maths)": [[22, "sire.maths.EnergyTrajectory"]], "matrix (class in sire.maths)": [[22, "sire.maths.Matrix"]], "rangenerator (class in sire.maths)": [[22, "sire.maths.RanGenerator"]], "sphere (class in sire.maths)": [[22, "sire.maths.Sphere"]], "torsion (class in sire.maths)": [[22, "sire.maths.Torsion"]], "transform (class in sire.maths)": [[22, "sire.maths.Transform"]], "triangle (class in sire.maths)": [[22, "sire.maths.Triangle"]], "vector (class in sire.maths)": [[22, "sire.maths.Vector"]], "align() (in module sire.maths)": [[22, "sire.maths.align"]], "angle() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.angle"]], "angle() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.angle"]], "angle0() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.angle0"]], "angle1() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.angle1"]], "angle2() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.angle2"]], "apply() (sire.maths.transform method)": [[22, "sire.maths.Transform.apply"]], "assign() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.assign"]], "assign() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.assign"]], "assign() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.assign"]], "assign() (sire.maths.transform method)": [[22, "sire.maths.Transform.assign"]], "at() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.at"]], "at() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.at"]], "at() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.at"]], "checked_offset() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.checked_offset"]], "clone() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.clone"]], "clone() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.clone"]], "clone() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.clone"]], "clone() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.clone"]], "clone() (sire.maths.transform method)": [[22, "sire.maths.Transform.clone"]], "clone() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.clone"]], "column0() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.column0"]], "column1() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.column1"]], "column2() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.column2"]], "count() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.count"]], "count() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.count"]], "count() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.count"]], "covariance() (sire.maths.matrix static method)": [[22, "sire.maths.Matrix.covariance"]], "create_quaternion() (in module sire.maths)": [[22, "sire.maths.create_quaternion"]], "detach() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.detach"]], "determinant() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.determinant"]], "diagonal() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.diagonal"]], "diagonalise() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.diagonalise"]], "energies() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.energies"]], "enforce_symmetric() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.enforce_symmetric"]], "get() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.get"]], "get_alignment() (in module sire.maths)": [[22, "sire.maths.get_alignment"]], "get_principal_axes() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.get_principal_axes"]], "get_state() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.get_state"]], "global() (sire.maths.rangenerator static method)": [[22, "sire.maths.RanGenerator.global"]], "identity() (sire.maths.matrix static method)": [[22, "sire.maths.Matrix.identity"]], "improper_angle() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.improper_angle"]], "inverse() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.inverse"]], "inverse() (sire.maths.transform method)": [[22, "sire.maths.Transform.inverse"]], "is_diagonal() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.is_diagonal"]], "is_empty() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.is_empty"]], "is_identity() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.is_identity"]], "is_null() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.is_null"]], "is_null() (sire.maths.transform method)": [[22, "sire.maths.Transform.is_null"]], "is_symmetric() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.is_symmetric"]], "is_zero() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.is_zero"]], "is_zero() (sire.maths.transform method)": [[22, "sire.maths.Transform.is_zero"]], "kabasch() (in module sire.maths)": [[22, "sire.maths.kabasch"]], "kabasch_fit() (in module sire.maths)": [[22, "sire.maths.kabasch_fit"]], "keys() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.keys"]], "line0() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.line0"]], "line03() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.line03"]], "line1() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.line1"]], "line12() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.line12"]], "line2() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.line2"]], "lock() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.lock"]], "locked_rand() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.locked_rand"]], "locked_rand_norm() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.locked_rand_norm"]], "locked_vector_on_sphere() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.locked_vector_on_sphere"]], "nrand() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.nrand"]], "nrand_norm() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.nrand_norm"]], "nvector_on_sphere() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.nvector_on_sphere"]], "offset() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.offset"]], "pi (in module sire.maths)": [[22, "sire.maths.pi"]], "point() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.point"]], "point() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.point"]], "rand() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.rand"]], "rand53() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.rand53"]], "rand_bool() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.rand_bool"]], "rand_int() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.rand_int"]], "rand_int64() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.rand_int64"]], "rand_norm() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.rand_norm"]], "reverse() (sire.maths.transform method)": [[22, "sire.maths.Transform.reverse"]], "rotation_center() (sire.maths.transform method)": [[22, "sire.maths.Transform.rotation_center"]], "rotation_matrix() (sire.maths.transform method)": [[22, "sire.maths.Transform.rotation_matrix"]], "rotation_quaternion() (sire.maths.transform method)": [[22, "sire.maths.Transform.rotation_quaternion"]], "row0() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.row0"]], "row1() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.row1"]], "row2() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.row2"]], "seed() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.seed"]], "seed_global() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.seed_global"]], "set() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.set"]], "set_state() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.set_state"]], "set_to_identity() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.set_to_identity"]], "single_value_decomposition() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.single_value_decomposition"]], "sire.maths": [[22, "module-sire.maths"]], "size() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.size"]], "svd() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.svd"]], "times() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.times"]], "to_pandas() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.to_pandas"]], "to_string() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.to_string"]], "to_string() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.to_string"]], "to_string() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.to_string"]], "to_string() (sire.maths.transform method)": [[22, "sire.maths.Transform.to_string"]], "to_string() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.to_string"]], "trace() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.trace"]], "translation_delta() (sire.maths.transform method)": [[22, "sire.maths.Transform.translation_delta"]], "transpose() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.transpose"]], "triangle1() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.triangle1"]], "triangle2() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.triangle2"]], "typename() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.typename"]], "typename() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.typename"]], "typename() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.typename"]], "typename() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.typename"]], "typename() (sire.maths.transform method)": [[22, "sire.maths.Transform.typename"]], "typename() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.typename"]], "unlock() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.unlock"]], "vector() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.vector"]], "vector0() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.vector0"]], "vector03() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.vector03"]], "vector1() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.vector1"]], "vector12() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.vector12"]], "vector2() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.vector2"]], "vector_on_sphere() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.vector_on_sphere"]], "what() (sire.maths.energytrajectory method)": [[22, "sire.maths.EnergyTrajectory.what"]], "what() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.what"]], "what() (sire.maths.rangenerator method)": [[22, "sire.maths.RanGenerator.what"]], "what() (sire.maths.torsion method)": [[22, "sire.maths.Torsion.what"]], "what() (sire.maths.transform method)": [[22, "sire.maths.Transform.what"]], "what() (sire.maths.triangle method)": [[22, "sire.maths.Triangle.what"]], "xx() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.xx"]], "xy() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.xy"]], "xz() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.xz"]], "yx() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.yx"]], "yy() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.yy"]], "yz() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.yz"]], "zero() (sire.maths.matrix static method)": [[22, "sire.maths.Matrix.zero"]], "zx() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.zx"]], "zy() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.zy"]], "zz() (sire.maths.matrix method)": [[22, "sire.maths.Matrix.zz"]], "amberangle (class in sire.mm)": [[23, "sire.mm.AmberAngle"]], "amberbond (class in sire.mm)": [[23, "sire.mm.AmberBond"]], "amberdihpart (class in sire.mm)": [[23, "sire.mm.AmberDihPart"]], "amberdihedral (class in sire.mm)": [[23, "sire.mm.AmberDihedral"]], "angle (class in sire.mm)": [[23, "sire.mm.Angle"]], "bond (class in sire.mm)": [[23, "sire.mm.Bond"]], "bondrestraint (class in sire.mm)": [[23, "sire.mm.BondRestraint"]], "bondrestraints (class in sire.mm)": [[23, "sire.mm.BondRestraints"]], "dihedral (class in sire.mm)": [[23, "sire.mm.Dihedral"]], "improper (class in sire.mm)": [[23, "sire.mm.Improper"]], "ljparameter (class in sire.mm)": [[23, "sire.mm.LJParameter"]], "selectorangle (class in sire.mm)": [[23, "sire.mm.SelectorAngle"]], "selectorbond (class in sire.mm)": [[23, "sire.mm.SelectorBond"]], "selectordihedral (class in sire.mm)": [[23, "sire.mm.SelectorDihedral"]], "selectorimproper (class in sire.mm)": [[23, "sire.mm.SelectorImproper"]], "selectormangle (class in sire.mm)": [[23, "sire.mm.SelectorMAngle"]], "selectormbond (class in sire.mm)": [[23, "sire.mm.SelectorMBond"]], "selectormdihedral (class in sire.mm)": [[23, "sire.mm.SelectorMDihedral"]], "selectormimproper (class in sire.mm)": [[23, "sire.mm.SelectorMImproper"]], "a() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.a"]], "add() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.add"]], "add() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.add"]], "add() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.add"]], "add() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.add"]], "add() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.add"]], "add() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.add"]], "add() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.add"]], "add() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.add"]], "add() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.add"]], "apply() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.apply"]], "apply() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.apply"]], "apply() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.apply"]], "apply() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.apply"]], "apply_reduce() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.apply_reduce"]], "apply_reduce() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.apply_reduce"]], "apply_reduce() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.apply_reduce"]], "apply_reduce() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.apply_reduce"]], "assert_contains() (sire.mm.angle method)": [[23, "sire.mm.Angle.assert_contains"]], "assert_contains() (sire.mm.bond method)": [[23, "sire.mm.Bond.assert_contains"]], "assert_contains() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.assert_contains"]], "assert_contains() (sire.mm.improper method)": [[23, "sire.mm.Improper.assert_contains"]], "assert_contains() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.assert_contains"]], "assert_contains() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.assert_contains"]], "assert_contains() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.assert_contains"]], "assert_contains() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.assert_contains"]], "assert_has_metadata() (sire.mm.angle method)": [[23, "sire.mm.Angle.assert_has_metadata"]], "assert_has_metadata() (sire.mm.bond method)": [[23, "sire.mm.Bond.assert_has_metadata"]], "assert_has_metadata() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.assert_has_metadata"]], "assert_has_metadata() (sire.mm.improper method)": [[23, "sire.mm.Improper.assert_has_metadata"]], "assert_has_metadata() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.assert_has_metadata"]], "assert_has_metadata() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.assert_has_metadata"]], "assert_has_metadata() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.assert_has_metadata"]], "assert_has_metadata() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.assert_has_metadata"]], "assert_has_property() (sire.mm.angle method)": [[23, "sire.mm.Angle.assert_has_property"]], "assert_has_property() (sire.mm.bond method)": [[23, "sire.mm.Bond.assert_has_property"]], "assert_has_property() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.assert_has_property"]], "assert_has_property() (sire.mm.improper method)": [[23, "sire.mm.Improper.assert_has_property"]], "assert_has_property() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.assert_has_property"]], "assert_has_property() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.assert_has_property"]], "assert_has_property() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.assert_has_property"]], "assert_has_property() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.assert_has_property"]], "assert_same_molecule() (sire.mm.angle method)": [[23, "sire.mm.Angle.assert_same_molecule"]], "assert_same_molecule() (sire.mm.bond method)": [[23, "sire.mm.Bond.assert_same_molecule"]], "assert_same_molecule() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.assert_same_molecule"]], "assert_same_molecule() (sire.mm.improper method)": [[23, "sire.mm.Improper.assert_same_molecule"]], "assert_same_molecule() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.assert_same_molecule"]], "assert_same_molecule() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.assert_same_molecule"]], "assert_same_molecule() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.assert_same_molecule"]], "assert_same_molecule() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.assert_same_molecule"]], "assign() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.assign"]], "assign() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.assign"]], "assign() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.assign"]], "assign() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.assign"]], "assign() (sire.mm.angle method)": [[23, "sire.mm.Angle.assign"]], "assign() (sire.mm.bond method)": [[23, "sire.mm.Bond.assign"]], "assign() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.assign"]], "assign() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.assign"]], "assign() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.assign"]], "assign() (sire.mm.improper method)": [[23, "sire.mm.Improper.assign"]], "assign() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.assign"]], "assign() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.assign"]], "assign() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.assign"]], "assign() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.assign"]], "assign() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.assign"]], "assign() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.assign"]], "assign() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.assign"]], "assign() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.assign"]], "at() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.at"]], "atom() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.atom"]], "atom() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.atom"]], "atom() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.atom"]], "atom() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.atom"]], "atom0() (sire.mm.angle method)": [[23, "sire.mm.Angle.atom0"]], "atom0() (sire.mm.bond method)": [[23, "sire.mm.Bond.atom0"]], "atom0() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.atom0"]], "atom0() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.atom0"]], "atom0() (sire.mm.improper method)": [[23, "sire.mm.Improper.atom0"]], "atom1() (sire.mm.angle method)": [[23, "sire.mm.Angle.atom1"]], "atom1() (sire.mm.bond method)": [[23, "sire.mm.Bond.atom1"]], "atom1() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.atom1"]], "atom1() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.atom1"]], "atom1() (sire.mm.improper method)": [[23, "sire.mm.Improper.atom1"]], "atom2() (sire.mm.angle method)": [[23, "sire.mm.Angle.atom2"]], "atom2() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.atom2"]], "atom2() (sire.mm.improper method)": [[23, "sire.mm.Improper.atom2"]], "atom3() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.atom3"]], "atom3() (sire.mm.improper method)": [[23, "sire.mm.Improper.atom3"]], "atom_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.atom_restraints"]], "atoms() (sire.mm.angle method)": [[23, "sire.mm.Angle.atoms"]], "atoms() (sire.mm.bond method)": [[23, "sire.mm.Bond.atoms"]], "atoms() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.atoms"]], "atoms() (sire.mm.improper method)": [[23, "sire.mm.Improper.atoms"]], "atoms() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.atoms"]], "atoms() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.atoms"]], "atoms() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.atoms"]], "atoms() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.atoms"]], "atoms0() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.atoms0"]], "atoms1() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.atoms1"]], "b() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.b"]], "centroid_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.centroid_restraints"]], "chain() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.chain"]], "chain() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.chain"]], "chain() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.chain"]], "chain() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.chain"]], "chains() (sire.mm.angle method)": [[23, "sire.mm.Angle.chains"]], "chains() (sire.mm.bond method)": [[23, "sire.mm.Bond.chains"]], "chains() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.chains"]], "chains() (sire.mm.improper method)": [[23, "sire.mm.Improper.chains"]], "chains() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.chains"]], "chains() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.chains"]], "chains() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.chains"]], "chains() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.chains"]], "clone() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.clone"]], "clone() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.clone"]], "clone() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.clone"]], "clone() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.clone"]], "clone() (sire.mm.angle method)": [[23, "sire.mm.Angle.clone"]], "clone() (sire.mm.bond method)": [[23, "sire.mm.Bond.clone"]], "clone() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.clone"]], "clone() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.clone"]], "clone() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.clone"]], "clone() (sire.mm.improper method)": [[23, "sire.mm.Improper.clone"]], "clone() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.clone"]], "clone() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.clone"]], "clone() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.clone"]], "clone() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.clone"]], "clone() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.clone"]], "clone() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.clone"]], "clone() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.clone"]], "clone() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.clone"]], "clone() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.clone"]], "combine() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.combine"]], "combine_arithmetic() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.combine_arithmetic"]], "combine_geometric() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.combine_geometric"]], "combining_rules (sire.mm.ljparameter attribute)": [[23, "sire.mm.LJParameter.combining_rules"]], "const_data() (sire.mm.angle method)": [[23, "sire.mm.Angle.const_data"]], "const_data() (sire.mm.bond method)": [[23, "sire.mm.Bond.const_data"]], "const_data() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.const_data"]], "const_data() (sire.mm.improper method)": [[23, "sire.mm.Improper.const_data"]], "const_data() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.const_data"]], "const_data() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.const_data"]], "const_data() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.const_data"]], "const_data() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.const_data"]], "count() (sire.mm.angle method)": [[23, "sire.mm.Angle.count"]], "count() (sire.mm.bond method)": [[23, "sire.mm.Bond.count"]], "count() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.count"]], "count() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.count"]], "count() (sire.mm.improper method)": [[23, "sire.mm.Improper.count"]], "count() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.count"]], "count() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.count"]], "count() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.count"]], "count() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.count"]], "count() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.count"]], "count() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.count"]], "count() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.count"]], "count() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.count"]], "cursor() (sire.mm.angle method)": [[23, "sire.mm.Angle.cursor"]], "cursor() (sire.mm.bond method)": [[23, "sire.mm.Bond.cursor"]], "cursor() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.cursor"]], "cursor() (sire.mm.improper method)": [[23, "sire.mm.Improper.cursor"]], "cursor() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.cursor"]], "cursor() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.cursor"]], "cursor() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.cursor"]], "cursor() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.cursor"]], "cutgroup() (sire.mm.angle method)": [[23, "sire.mm.Angle.cutgroup"]], "cutgroup() (sire.mm.bond method)": [[23, "sire.mm.Bond.cutgroup"]], "cutgroup() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.cutgroup"]], "cutgroup() (sire.mm.improper method)": [[23, "sire.mm.Improper.cutgroup"]], "cutgroup() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.cutgroup"]], "cutgroup() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.cutgroup"]], "cutgroup() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.cutgroup"]], "cutgroup() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.cutgroup"]], "cutgroup() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.cutgroup"]], "cutgroup() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.cutgroup"]], "cutgroup() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.cutgroup"]], "cutgroup() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.cutgroup"]], "cutgroups() (sire.mm.angle method)": [[23, "sire.mm.Angle.cutgroups"]], "cutgroups() (sire.mm.bond method)": [[23, "sire.mm.Bond.cutgroups"]], "cutgroups() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.cutgroups"]], "cutgroups() (sire.mm.improper method)": [[23, "sire.mm.Improper.cutgroups"]], "cutgroups() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.cutgroups"]], "cutgroups() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.cutgroups"]], "cutgroups() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.cutgroups"]], "cutgroups() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.cutgroups"]], "cutgroups() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.cutgroups"]], "cutgroups() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.cutgroups"]], "cutgroups() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.cutgroups"]], "cutgroups() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.cutgroups"]], "delete_all_frames() (sire.mm.angle method)": [[23, "sire.mm.Angle.delete_all_frames"]], "delete_all_frames() (sire.mm.bond method)": [[23, "sire.mm.Bond.delete_all_frames"]], "delete_all_frames() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.delete_all_frames"]], "delete_all_frames() (sire.mm.improper method)": [[23, "sire.mm.Improper.delete_all_frames"]], "delete_all_frames() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.delete_all_frames"]], "delete_all_frames() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.delete_all_frames"]], "delete_all_frames() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.delete_all_frames"]], "delete_all_frames() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.delete_all_frames"]], "delete_all_frames() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.delete_all_frames"]], "delete_all_frames() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.delete_all_frames"]], "delete_all_frames() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.delete_all_frames"]], "delete_all_frames() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.delete_all_frames"]], "delete_frame() (sire.mm.angle method)": [[23, "sire.mm.Angle.delete_frame"]], "delete_frame() (sire.mm.bond method)": [[23, "sire.mm.Bond.delete_frame"]], "delete_frame() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.delete_frame"]], "delete_frame() (sire.mm.improper method)": [[23, "sire.mm.Improper.delete_frame"]], "delete_frame() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.delete_frame"]], "delete_frame() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.delete_frame"]], "delete_frame() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.delete_frame"]], "delete_frame() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.delete_frame"]], "delete_frame() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.delete_frame"]], "delete_frame() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.delete_frame"]], "delete_frame() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.delete_frame"]], "delete_frame() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.delete_frame"]], "dummy() (sire.mm.ljparameter static method)": [[23, "sire.mm.LJParameter.dummy"]], "dynamics() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.dynamics"]], "dynamics() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.dynamics"]], "dynamics() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.dynamics"]], "dynamics() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.dynamics"]], "energies() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.energies"]], "energies() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.energies"]], "energies() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.energies"]], "energies() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.energies"]], "energies() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.energies"]], "energies() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.energies"]], "energies() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.energies"]], "energies() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.energies"]], "energy() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.energy"]], "energy() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.energy"]], "energy() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.energy"]], "energy() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.energy"]], "energy() (sire.mm.angle method)": [[23, "sire.mm.Angle.energy"]], "energy() (sire.mm.bond method)": [[23, "sire.mm.Bond.energy"]], "energy() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.energy"]], "energy() (sire.mm.improper method)": [[23, "sire.mm.Improper.energy"]], "energy() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.energy"]], "energy() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.energy"]], "energy() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.energy"]], "energy() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.energy"]], "energy() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.energy"]], "energy() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.energy"]], "energy() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.energy"]], "energy() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.energy"]], "epsilon() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.epsilon"]], "evaluate() (sire.mm.angle method)": [[23, "sire.mm.Angle.evaluate"]], "evaluate() (sire.mm.bond method)": [[23, "sire.mm.Bond.evaluate"]], "evaluate() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.evaluate"]], "evaluate() (sire.mm.improper method)": [[23, "sire.mm.Improper.evaluate"]], "evaluate() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.evaluate"]], "evaluate() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.evaluate"]], "evaluate() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.evaluate"]], "evaluate() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.evaluate"]], "evaluate() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.evaluate"]], "evaluate() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.evaluate"]], "evaluate() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.evaluate"]], "evaluate() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.evaluate"]], "extract() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.extract"]], "extract() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.extract"]], "extract() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.extract"]], "extract() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.extract"]], "from_and_b() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.from_and_b"]], "from_r_min_and_epsilon() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.from_r_min_and_epsilon"]], "from_sigma_and_epsilon() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.from_sigma_and_epsilon"]], "get_link() (sire.mm.angle method)": [[23, "sire.mm.Angle.get_link"]], "get_link() (sire.mm.bond method)": [[23, "sire.mm.Bond.get_link"]], "get_link() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.get_link"]], "get_link() (sire.mm.improper method)": [[23, "sire.mm.Improper.get_link"]], "get_link() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.get_link"]], "get_link() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.get_link"]], "get_link() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.get_link"]], "get_link() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.get_link"]], "get_links() (sire.mm.angle method)": [[23, "sire.mm.Angle.get_links"]], "get_links() (sire.mm.bond method)": [[23, "sire.mm.Bond.get_links"]], "get_links() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.get_links"]], "get_links() (sire.mm.improper method)": [[23, "sire.mm.Improper.get_links"]], "get_links() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.get_links"]], "get_links() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.get_links"]], "get_links() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.get_links"]], "get_links() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.get_links"]], "has_atom_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.has_atom_restraints"]], "has_centroid_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.has_centroid_restraints"]], "has_links() (sire.mm.angle method)": [[23, "sire.mm.Angle.has_links"]], "has_links() (sire.mm.bond method)": [[23, "sire.mm.Bond.has_links"]], "has_links() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.has_links"]], "has_links() (sire.mm.improper method)": [[23, "sire.mm.Improper.has_links"]], "has_links() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.has_links"]], "has_links() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.has_links"]], "has_links() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.has_links"]], "has_links() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.has_links"]], "has_metadata() (sire.mm.angle method)": [[23, "sire.mm.Angle.has_metadata"]], "has_metadata() (sire.mm.bond method)": [[23, "sire.mm.Bond.has_metadata"]], "has_metadata() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.has_metadata"]], "has_metadata() (sire.mm.improper method)": [[23, "sire.mm.Improper.has_metadata"]], "has_metadata() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.has_metadata"]], "has_metadata() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.has_metadata"]], "has_metadata() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.has_metadata"]], "has_metadata() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.has_metadata"]], "has_metadata() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.has_metadata"]], "has_metadata() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.has_metadata"]], "has_metadata() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.has_metadata"]], "has_metadata() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.has_metadata"]], "has_property() (sire.mm.angle method)": [[23, "sire.mm.Angle.has_property"]], "has_property() (sire.mm.bond method)": [[23, "sire.mm.Bond.has_property"]], "has_property() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.has_property"]], "has_property() (sire.mm.improper method)": [[23, "sire.mm.Improper.has_property"]], "has_property() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.has_property"]], "has_property() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.has_property"]], "has_property() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.has_property"]], "has_property() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.has_property"]], "has_property() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.has_property"]], "has_property() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.has_property"]], "has_property() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.has_property"]], "has_property() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.has_property"]], "hash() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.hash"]], "hash() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.hash"]], "hash() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.hash"]], "hash() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.hash"]], "id() (sire.mm.angle method)": [[23, "sire.mm.Angle.id"]], "id() (sire.mm.bond method)": [[23, "sire.mm.Bond.id"]], "id() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.id"]], "id() (sire.mm.improper method)": [[23, "sire.mm.Improper.id"]], "ids() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.ids"]], "ids() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.ids"]], "ids() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.ids"]], "ids() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.ids"]], "ids() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.ids"]], "ids() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.ids"]], "ids() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.ids"]], "ids() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.ids"]], "intersection() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.intersection"]], "intersection() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.intersection"]], "intersection() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.intersection"]], "intersection() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.intersection"]], "intersection() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.intersection"]], "intersection() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.intersection"]], "intersection() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.intersection"]], "intersection() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.intersection"]], "invert() (sire.mm.angle method)": [[23, "sire.mm.Angle.invert"]], "invert() (sire.mm.bond method)": [[23, "sire.mm.Bond.invert"]], "invert() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.invert"]], "invert() (sire.mm.improper method)": [[23, "sire.mm.Improper.invert"]], "invert() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.invert"]], "invert() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.invert"]], "invert() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.invert"]], "invert() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.invert"]], "invert() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.invert"]], "invert() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.invert"]], "invert() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.invert"]], "invert() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.invert"]], "is_atom_restraint() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.is_atom_restraint"]], "is_centroid_restraint() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.is_centroid_restraint"]], "is_dummy() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.is_dummy"]], "is_empty() (sire.mm.angle method)": [[23, "sire.mm.Angle.is_empty"]], "is_empty() (sire.mm.bond method)": [[23, "sire.mm.Bond.is_empty"]], "is_empty() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.is_empty"]], "is_empty() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.is_empty"]], "is_empty() (sire.mm.improper method)": [[23, "sire.mm.Improper.is_empty"]], "is_empty() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.is_empty"]], "is_empty() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.is_empty"]], "is_empty() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.is_empty"]], "is_empty() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.is_empty"]], "is_empty() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.is_empty"]], "is_empty() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.is_empty"]], "is_empty() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.is_empty"]], "is_empty() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.is_empty"]], "is_link() (sire.mm.angle method)": [[23, "sire.mm.Angle.is_link"]], "is_link() (sire.mm.bond method)": [[23, "sire.mm.Bond.is_link"]], "is_link() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.is_link"]], "is_link() (sire.mm.improper method)": [[23, "sire.mm.Improper.is_link"]], "is_link() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.is_link"]], "is_link() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.is_link"]], "is_link() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.is_link"]], "is_link() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.is_link"]], "is_null() (sire.mm.angle method)": [[23, "sire.mm.Angle.is_null"]], "is_null() (sire.mm.bond method)": [[23, "sire.mm.Bond.is_null"]], "is_null() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.is_null"]], "is_null() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.is_null"]], "is_null() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.is_null"]], "is_null() (sire.mm.improper method)": [[23, "sire.mm.Improper.is_null"]], "is_null() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.is_null"]], "is_null() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.is_null"]], "is_null() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.is_null"]], "is_null() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.is_null"]], "is_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.is_restraints"]], "is_same_molecule() (sire.mm.angle method)": [[23, "sire.mm.Angle.is_same_molecule"]], "is_same_molecule() (sire.mm.bond method)": [[23, "sire.mm.Bond.is_same_molecule"]], "is_same_molecule() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.is_same_molecule"]], "is_same_molecule() (sire.mm.improper method)": [[23, "sire.mm.Improper.is_same_molecule"]], "is_same_molecule() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.is_same_molecule"]], "is_same_molecule() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.is_same_molecule"]], "is_same_molecule() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.is_same_molecule"]], "is_same_molecule() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.is_same_molecule"]], "is_selector() (sire.mm.angle method)": [[23, "sire.mm.Angle.is_selector"]], "is_selector() (sire.mm.bond method)": [[23, "sire.mm.Bond.is_selector"]], "is_selector() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.is_selector"]], "is_selector() (sire.mm.improper method)": [[23, "sire.mm.Improper.is_selector"]], "is_selector() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.is_selector"]], "is_selector() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.is_selector"]], "is_selector() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.is_selector"]], "is_selector() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.is_selector"]], "is_selector() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.is_selector"]], "is_selector() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.is_selector"]], "is_selector() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.is_selector"]], "is_selector() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.is_selector"]], "k() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.k"]], "k() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.k"]], "k() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.k"]], "k() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.k"]], "length() (sire.mm.bond method)": [[23, "sire.mm.Bond.length"]], "lengths() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.lengths"]], "lengths() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.lengths"]], "load_frame() (sire.mm.angle method)": [[23, "sire.mm.Angle.load_frame"]], "load_frame() (sire.mm.bond method)": [[23, "sire.mm.Bond.load_frame"]], "load_frame() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.load_frame"]], "load_frame() (sire.mm.improper method)": [[23, "sire.mm.Improper.load_frame"]], "load_frame() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.load_frame"]], "load_frame() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.load_frame"]], "load_frame() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.load_frame"]], "load_frame() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.load_frame"]], "load_frame() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.load_frame"]], "load_frame() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.load_frame"]], "load_frame() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.load_frame"]], "load_frame() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.load_frame"]], "measure() (sire.mm.angle method)": [[23, "sire.mm.Angle.measure"]], "measure() (sire.mm.bond method)": [[23, "sire.mm.Bond.measure"]], "measure() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.measure"]], "measure() (sire.mm.improper method)": [[23, "sire.mm.Improper.measure"]], "measures() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.measures"]], "measures() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.measures"]], "measures() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.measures"]], "measures() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.measures"]], "measures() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.measures"]], "measures() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.measures"]], "measures() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.measures"]], "measures() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.measures"]], "metadata_keys() (sire.mm.angle method)": [[23, "sire.mm.Angle.metadata_keys"]], "metadata_keys() (sire.mm.bond method)": [[23, "sire.mm.Bond.metadata_keys"]], "metadata_keys() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.metadata_keys"]], "metadata_keys() (sire.mm.improper method)": [[23, "sire.mm.Improper.metadata_keys"]], "metadata_keys() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.metadata_keys"]], "metadata_keys() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.metadata_keys"]], "metadata_keys() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.metadata_keys"]], "metadata_keys() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.metadata_keys"]], "metadata_keys() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.metadata_keys"]], "metadata_keys() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.metadata_keys"]], "metadata_keys() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.metadata_keys"]], "metadata_keys() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.metadata_keys"]], "metadata_type() (sire.mm.angle method)": [[23, "sire.mm.Angle.metadata_type"]], "metadata_type() (sire.mm.bond method)": [[23, "sire.mm.Bond.metadata_type"]], "metadata_type() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.metadata_type"]], "metadata_type() (sire.mm.improper method)": [[23, "sire.mm.Improper.metadata_type"]], "metadata_type() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.metadata_type"]], "metadata_type() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.metadata_type"]], "metadata_type() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.metadata_type"]], "metadata_type() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.metadata_type"]], "minimisation() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.minimisation"]], "minimisation() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.minimisation"]], "minimisation() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.minimisation"]], "minimisation() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.minimisation"]], "molecule() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.molecule"]], "molecule() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.molecule"]], "molecule() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.molecule"]], "molecule() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.molecule"]], "molecules() (sire.mm.angle method)": [[23, "sire.mm.Angle.molecules"]], "molecules() (sire.mm.bond method)": [[23, "sire.mm.Bond.molecules"]], "molecules() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.molecules"]], "molecules() (sire.mm.improper method)": [[23, "sire.mm.Improper.molecules"]], "molecules() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.molecules"]], "molecules() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.molecules"]], "molecules() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.molecules"]], "molecules() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.molecules"]], "move() (sire.mm.angle method)": [[23, "sire.mm.Angle.move"]], "move() (sire.mm.bond method)": [[23, "sire.mm.Bond.move"]], "move() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.move"]], "move() (sire.mm.improper method)": [[23, "sire.mm.Improper.move"]], "move() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.move"]], "move() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.move"]], "move() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.move"]], "move() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.move"]], "num_atom_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.num_atom_restraints"]], "num_atoms() (sire.mm.angle method)": [[23, "sire.mm.Angle.num_atoms"]], "num_atoms() (sire.mm.bond method)": [[23, "sire.mm.Bond.num_atoms"]], "num_atoms() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.num_atoms"]], "num_atoms() (sire.mm.improper method)": [[23, "sire.mm.Improper.num_atoms"]], "num_atoms() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.num_atoms"]], "num_atoms() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.num_atoms"]], "num_atoms() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.num_atoms"]], "num_atoms() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.num_atoms"]], "num_atoms() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.num_atoms"]], "num_atoms() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.num_atoms"]], "num_atoms() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.num_atoms"]], "num_atoms() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.num_atoms"]], "num_centroid_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.num_centroid_restraints"]], "num_chains() (sire.mm.angle method)": [[23, "sire.mm.Angle.num_chains"]], "num_chains() (sire.mm.bond method)": [[23, "sire.mm.Bond.num_chains"]], "num_chains() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.num_chains"]], "num_chains() (sire.mm.improper method)": [[23, "sire.mm.Improper.num_chains"]], "num_chains() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.num_chains"]], "num_chains() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.num_chains"]], "num_chains() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.num_chains"]], "num_chains() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.num_chains"]], "num_chains() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.num_chains"]], "num_chains() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.num_chains"]], "num_chains() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.num_chains"]], "num_chains() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.num_chains"]], "num_cutgroups() (sire.mm.angle method)": [[23, "sire.mm.Angle.num_cutgroups"]], "num_cutgroups() (sire.mm.bond method)": [[23, "sire.mm.Bond.num_cutgroups"]], "num_cutgroups() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.num_cutgroups"]], "num_cutgroups() (sire.mm.improper method)": [[23, "sire.mm.Improper.num_cutgroups"]], "num_cutgroups() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.num_cutgroups"]], "num_cutgroups() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.num_cutgroups"]], "num_cutgroups() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.num_cutgroups"]], "num_cutgroups() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.num_cutgroups"]], "num_cutgroups() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.num_cutgroups"]], "num_cutgroups() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.num_cutgroups"]], "num_cutgroups() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.num_cutgroups"]], "num_cutgroups() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.num_cutgroups"]], "num_frames() (sire.mm.angle method)": [[23, "sire.mm.Angle.num_frames"]], "num_frames() (sire.mm.bond method)": [[23, "sire.mm.Bond.num_frames"]], "num_frames() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.num_frames"]], "num_frames() (sire.mm.improper method)": [[23, "sire.mm.Improper.num_frames"]], "num_frames() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.num_frames"]], "num_frames() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.num_frames"]], "num_frames() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.num_frames"]], "num_frames() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.num_frames"]], "num_frames() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.num_frames"]], "num_frames() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.num_frames"]], "num_frames() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.num_frames"]], "num_frames() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.num_frames"]], "num_molecules() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.num_molecules"]], "num_molecules() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.num_molecules"]], "num_molecules() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.num_molecules"]], "num_molecules() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.num_molecules"]], "num_residues() (sire.mm.angle method)": [[23, "sire.mm.Angle.num_residues"]], "num_residues() (sire.mm.bond method)": [[23, "sire.mm.Bond.num_residues"]], "num_residues() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.num_residues"]], "num_residues() (sire.mm.improper method)": [[23, "sire.mm.Improper.num_residues"]], "num_residues() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.num_residues"]], "num_residues() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.num_residues"]], "num_residues() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.num_residues"]], "num_residues() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.num_residues"]], "num_residues() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.num_residues"]], "num_residues() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.num_residues"]], "num_residues() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.num_residues"]], "num_residues() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.num_residues"]], "num_restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.num_restraints"]], "num_segments() (sire.mm.angle method)": [[23, "sire.mm.Angle.num_segments"]], "num_segments() (sire.mm.bond method)": [[23, "sire.mm.Bond.num_segments"]], "num_segments() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.num_segments"]], "num_segments() (sire.mm.improper method)": [[23, "sire.mm.Improper.num_segments"]], "num_segments() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.num_segments"]], "num_segments() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.num_segments"]], "num_segments() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.num_segments"]], "num_segments() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.num_segments"]], "num_segments() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.num_segments"]], "num_segments() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.num_segments"]], "num_segments() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.num_segments"]], "num_segments() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.num_segments"]], "num_views() (sire.mm.angle method)": [[23, "sire.mm.Angle.num_views"]], "num_views() (sire.mm.bond method)": [[23, "sire.mm.Bond.num_views"]], "num_views() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.num_views"]], "num_views() (sire.mm.improper method)": [[23, "sire.mm.Improper.num_views"]], "num_views() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.num_views"]], "num_views() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.num_views"]], "num_views() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.num_views"]], "num_views() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.num_views"]], "periodicity() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.periodicity"]], "phase() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.phase"]], "phi() (sire.mm.improper method)": [[23, "sire.mm.Improper.phi"]], "potential() (sire.mm.angle method)": [[23, "sire.mm.Angle.potential"]], "potential() (sire.mm.bond method)": [[23, "sire.mm.Bond.potential"]], "potential() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.potential"]], "potential() (sire.mm.improper method)": [[23, "sire.mm.Improper.potential"]], "potentials() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.potentials"]], "potentials() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.potentials"]], "potentials() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.potentials"]], "potentials() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.potentials"]], "potentials() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.potentials"]], "potentials() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.potentials"]], "potentials() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.potentials"]], "potentials() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.potentials"]], "properties() (sire.mm.angle method)": [[23, "sire.mm.Angle.properties"]], "properties() (sire.mm.bond method)": [[23, "sire.mm.Bond.properties"]], "properties() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.properties"]], "properties() (sire.mm.improper method)": [[23, "sire.mm.Improper.properties"]], "properties() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.properties"]], "properties() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.properties"]], "properties() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.properties"]], "properties() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.properties"]], "properties() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.properties"]], "properties() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.properties"]], "properties() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.properties"]], "properties() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.properties"]], "property_keys() (sire.mm.angle method)": [[23, "sire.mm.Angle.property_keys"]], "property_keys() (sire.mm.bond method)": [[23, "sire.mm.Bond.property_keys"]], "property_keys() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.property_keys"]], "property_keys() (sire.mm.improper method)": [[23, "sire.mm.Improper.property_keys"]], "property_keys() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.property_keys"]], "property_keys() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.property_keys"]], "property_keys() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.property_keys"]], "property_keys() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.property_keys"]], "property_keys() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.property_keys"]], "property_keys() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.property_keys"]], "property_keys() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.property_keys"]], "property_keys() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.property_keys"]], "property_type() (sire.mm.angle method)": [[23, "sire.mm.Angle.property_type"]], "property_type() (sire.mm.bond method)": [[23, "sire.mm.Bond.property_type"]], "property_type() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.property_type"]], "property_type() (sire.mm.improper method)": [[23, "sire.mm.Improper.property_type"]], "property_type() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.property_type"]], "property_type() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.property_type"]], "property_type() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.property_type"]], "property_type() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.property_type"]], "r0() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.r0"]], "r0() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.r0"]], "residue() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.residue"]], "residue() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.residue"]], "residue() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.residue"]], "residue() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.residue"]], "residues() (sire.mm.angle method)": [[23, "sire.mm.Angle.residues"]], "residues() (sire.mm.bond method)": [[23, "sire.mm.Bond.residues"]], "residues() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.residues"]], "residues() (sire.mm.improper method)": [[23, "sire.mm.Improper.residues"]], "residues() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.residues"]], "residues() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.residues"]], "residues() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.residues"]], "residues() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.residues"]], "restraints() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.restraints"]], "rmin() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.rmin"]], "save_frame() (sire.mm.angle method)": [[23, "sire.mm.Angle.save_frame"]], "save_frame() (sire.mm.bond method)": [[23, "sire.mm.Bond.save_frame"]], "save_frame() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.save_frame"]], "save_frame() (sire.mm.improper method)": [[23, "sire.mm.Improper.save_frame"]], "save_frame() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.save_frame"]], "save_frame() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.save_frame"]], "save_frame() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.save_frame"]], "save_frame() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.save_frame"]], "save_frame() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.save_frame"]], "save_frame() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.save_frame"]], "save_frame() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.save_frame"]], "save_frame() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.save_frame"]], "search() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.search"]], "search() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.search"]], "search() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.search"]], "search() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.search"]], "segment() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.segment"]], "segment() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.segment"]], "segment() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.segment"]], "segment() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.segment"]], "segments() (sire.mm.angle method)": [[23, "sire.mm.Angle.segments"]], "segments() (sire.mm.bond method)": [[23, "sire.mm.Bond.segments"]], "segments() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.segments"]], "segments() (sire.mm.improper method)": [[23, "sire.mm.Improper.segments"]], "segments() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.segments"]], "segments() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.segments"]], "segments() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.segments"]], "segments() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.segments"]], "select_all() (sire.mm.angle method)": [[23, "sire.mm.Angle.select_all"]], "select_all() (sire.mm.bond method)": [[23, "sire.mm.Bond.select_all"]], "select_all() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.select_all"]], "select_all() (sire.mm.improper method)": [[23, "sire.mm.Improper.select_all"]], "select_all() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.select_all"]], "select_all() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.select_all"]], "select_all() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.select_all"]], "select_all() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.select_all"]], "select_all_atoms() (sire.mm.angle method)": [[23, "sire.mm.Angle.select_all_atoms"]], "select_all_atoms() (sire.mm.bond method)": [[23, "sire.mm.Bond.select_all_atoms"]], "select_all_atoms() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.select_all_atoms"]], "select_all_atoms() (sire.mm.improper method)": [[23, "sire.mm.Improper.select_all_atoms"]], "select_all_atoms() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.select_all_atoms"]], "select_all_atoms() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.select_all_atoms"]], "select_all_atoms() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.select_all_atoms"]], "select_all_atoms() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.select_all_atoms"]], "select_all_chains() (sire.mm.angle method)": [[23, "sire.mm.Angle.select_all_chains"]], "select_all_chains() (sire.mm.bond method)": [[23, "sire.mm.Bond.select_all_chains"]], "select_all_chains() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.select_all_chains"]], "select_all_chains() (sire.mm.improper method)": [[23, "sire.mm.Improper.select_all_chains"]], "select_all_chains() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.select_all_chains"]], "select_all_chains() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.select_all_chains"]], "select_all_chains() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.select_all_chains"]], "select_all_chains() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.select_all_chains"]], "select_all_cutgroups() (sire.mm.angle method)": [[23, "sire.mm.Angle.select_all_cutgroups"]], "select_all_cutgroups() (sire.mm.bond method)": [[23, "sire.mm.Bond.select_all_cutgroups"]], "select_all_cutgroups() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.select_all_cutgroups"]], "select_all_cutgroups() (sire.mm.improper method)": [[23, "sire.mm.Improper.select_all_cutgroups"]], "select_all_cutgroups() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.select_all_cutgroups"]], "select_all_cutgroups() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.select_all_cutgroups"]], "select_all_cutgroups() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.select_all_cutgroups"]], "select_all_cutgroups() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.select_all_cutgroups"]], "select_all_residues() (sire.mm.angle method)": [[23, "sire.mm.Angle.select_all_residues"]], "select_all_residues() (sire.mm.bond method)": [[23, "sire.mm.Bond.select_all_residues"]], "select_all_residues() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.select_all_residues"]], "select_all_residues() (sire.mm.improper method)": [[23, "sire.mm.Improper.select_all_residues"]], "select_all_residues() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.select_all_residues"]], "select_all_residues() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.select_all_residues"]], "select_all_residues() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.select_all_residues"]], "select_all_residues() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.select_all_residues"]], "select_all_segments() (sire.mm.angle method)": [[23, "sire.mm.Angle.select_all_segments"]], "select_all_segments() (sire.mm.bond method)": [[23, "sire.mm.Bond.select_all_segments"]], "select_all_segments() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.select_all_segments"]], "select_all_segments() (sire.mm.improper method)": [[23, "sire.mm.Improper.select_all_segments"]], "select_all_segments() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.select_all_segments"]], "select_all_segments() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.select_all_segments"]], "select_all_segments() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.select_all_segments"]], "select_all_segments() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.select_all_segments"]], "selected_all() (sire.mm.angle method)": [[23, "sire.mm.Angle.selected_all"]], "selected_all() (sire.mm.bond method)": [[23, "sire.mm.Bond.selected_all"]], "selected_all() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.selected_all"]], "selected_all() (sire.mm.improper method)": [[23, "sire.mm.Improper.selected_all"]], "selected_all() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.selected_all"]], "selected_all() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.selected_all"]], "selected_all() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.selected_all"]], "selected_all() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.selected_all"]], "selection() (sire.mm.angle method)": [[23, "sire.mm.Angle.selection"]], "selection() (sire.mm.bond method)": [[23, "sire.mm.Bond.selection"]], "selection() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.selection"]], "selection() (sire.mm.improper method)": [[23, "sire.mm.Improper.selection"]], "selection() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.selection"]], "selection() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.selection"]], "selection() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.selection"]], "selection() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.selection"]], "selector() (sire.mm.angle method)": [[23, "sire.mm.Angle.selector"]], "selector() (sire.mm.bond method)": [[23, "sire.mm.Bond.selector"]], "selector() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.selector"]], "selector() (sire.mm.improper method)": [[23, "sire.mm.Improper.selector"]], "set_name() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.set_name"]], "sigma() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.sigma"]], "sire.mm": [[23, "module-sire.mm"]], "size() (sire.mm.angle method)": [[23, "sire.mm.Angle.size"]], "size() (sire.mm.bond method)": [[23, "sire.mm.Bond.size"]], "size() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.size"]], "size() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.size"]], "size() (sire.mm.improper method)": [[23, "sire.mm.Improper.size"]], "size() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.size"]], "size() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.size"]], "size() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.size"]], "size() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.size"]], "size() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.size"]], "size() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.size"]], "size() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.size"]], "size() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.size"]], "sizes() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.sizes"]], "sizes() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.sizes"]], "sizes() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.sizes"]], "sizes() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.sizes"]], "sizes() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.sizes"]], "sizes() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.sizes"]], "smarts() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.smarts"]], "smarts() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.smarts"]], "smarts() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.smarts"]], "smarts() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.smarts"]], "smiles() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.smiles"]], "smiles() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.smiles"]], "smiles() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.smiles"]], "smiles() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.smiles"]], "sqrt_epsilon() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.sqrt_epsilon"]], "sqrt_sigma() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.sqrt_sigma"]], "terms() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.terms"]], "theta() (sire.mm.improper method)": [[23, "sire.mm.Improper.theta"]], "theta0() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.theta0"]], "to_expression() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.to_expression"]], "to_expression() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.to_expression"]], "to_expression() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.to_expression"]], "to_list() (sire.mm.angle method)": [[23, "sire.mm.Angle.to_list"]], "to_list() (sire.mm.bond method)": [[23, "sire.mm.Bond.to_list"]], "to_list() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.to_list"]], "to_list() (sire.mm.improper method)": [[23, "sire.mm.Improper.to_list"]], "to_list() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.to_list"]], "to_list() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.to_list"]], "to_list() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.to_list"]], "to_list() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.to_list"]], "to_list() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.to_list"]], "to_list() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.to_list"]], "to_list() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.to_list"]], "to_list() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.to_list"]], "to_molecule_group() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.to_molecule_group"]], "to_molecule_group() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.to_molecule_group"]], "to_molecule_group() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.to_molecule_group"]], "to_molecule_group() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.to_molecule_group"]], "to_molecules() (sire.mm.angle method)": [[23, "sire.mm.Angle.to_molecules"]], "to_molecules() (sire.mm.bond method)": [[23, "sire.mm.Bond.to_molecules"]], "to_molecules() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.to_molecules"]], "to_molecules() (sire.mm.improper method)": [[23, "sire.mm.Improper.to_molecules"]], "to_molecules() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.to_molecules"]], "to_molecules() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.to_molecules"]], "to_molecules() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.to_molecules"]], "to_molecules() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.to_molecules"]], "to_molecules() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.to_molecules"]], "to_molecules() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.to_molecules"]], "to_molecules() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.to_molecules"]], "to_molecules() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.to_molecules"]], "to_select_result() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.to_select_result"]], "to_select_result() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.to_select_result"]], "to_select_result() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.to_select_result"]], "to_select_result() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.to_select_result"]], "to_selector() (sire.mm.angle method)": [[23, "sire.mm.Angle.to_selector"]], "to_selector() (sire.mm.bond method)": [[23, "sire.mm.Bond.to_selector"]], "to_selector() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.to_selector"]], "to_selector() (sire.mm.improper method)": [[23, "sire.mm.Improper.to_selector"]], "to_selector() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.to_selector"]], "to_selector() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.to_selector"]], "to_selector() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.to_selector"]], "to_selector() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.to_selector"]], "to_string() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.to_string"]], "to_string() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.to_string"]], "to_string() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.to_string"]], "to_string() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.to_string"]], "to_string() (sire.mm.angle method)": [[23, "sire.mm.Angle.to_string"]], "to_string() (sire.mm.bond method)": [[23, "sire.mm.Bond.to_string"]], "to_string() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.to_string"]], "to_string() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.to_string"]], "to_string() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.to_string"]], "to_string() (sire.mm.improper method)": [[23, "sire.mm.Improper.to_string"]], "to_string() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.to_string"]], "to_string() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.to_string"]], "to_string() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.to_string"]], "to_string() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.to_string"]], "to_string() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.to_string"]], "to_string() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.to_string"]], "to_string() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.to_string"]], "to_string() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.to_string"]], "to_string() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.to_string"]], "trajectory() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.trajectory"]], "trajectory() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.trajectory"]], "trajectory() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.trajectory"]], "trajectory() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.trajectory"]], "typename() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.typename"]], "typename() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.typename"]], "typename() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.typename"]], "typename() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.typename"]], "typename() (sire.mm.angle method)": [[23, "sire.mm.Angle.typename"]], "typename() (sire.mm.bond method)": [[23, "sire.mm.Bond.typename"]], "typename() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.typename"]], "typename() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.typename"]], "typename() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.typename"]], "typename() (sire.mm.improper method)": [[23, "sire.mm.Improper.typename"]], "typename() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.typename"]], "typename() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.typename"]], "typename() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.typename"]], "typename() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.typename"]], "typename() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.typename"]], "typename() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.typename"]], "typename() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.typename"]], "typename() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.typename"]], "typename() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.typename"]], "update() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.update"]], "update() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.update"]], "update() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.update"]], "update() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.update"]], "view() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.view"]], "view() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.view"]], "view() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.view"]], "view() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.view"]], "view() (sire.mm.selectormangle method)": [[23, "sire.mm.SelectorMAngle.view"]], "view() (sire.mm.selectormbond method)": [[23, "sire.mm.SelectorMBond.view"]], "view() (sire.mm.selectormdihedral method)": [[23, "sire.mm.SelectorMDihedral.view"]], "view() (sire.mm.selectormimproper method)": [[23, "sire.mm.SelectorMImproper.view"]], "what() (sire.mm.amberangle method)": [[23, "sire.mm.AmberAngle.what"]], "what() (sire.mm.amberbond method)": [[23, "sire.mm.AmberBond.what"]], "what() (sire.mm.amberdihpart method)": [[23, "sire.mm.AmberDihPart.what"]], "what() (sire.mm.amberdihedral method)": [[23, "sire.mm.AmberDihedral.what"]], "what() (sire.mm.angle method)": [[23, "sire.mm.Angle.what"]], "what() (sire.mm.bond method)": [[23, "sire.mm.Bond.what"]], "what() (sire.mm.bondrestraint method)": [[23, "sire.mm.BondRestraint.what"]], "what() (sire.mm.bondrestraints method)": [[23, "sire.mm.BondRestraints.what"]], "what() (sire.mm.dihedral method)": [[23, "sire.mm.Dihedral.what"]], "what() (sire.mm.improper method)": [[23, "sire.mm.Improper.what"]], "what() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.what"]], "what() (sire.mm.selectorangle method)": [[23, "sire.mm.SelectorAngle.what"]], "what() (sire.mm.selectorbond method)": [[23, "sire.mm.SelectorBond.what"]], "what() (sire.mm.selectordihedral method)": [[23, "sire.mm.SelectorDihedral.what"]], "what() (sire.mm.selectorimproper method)": [[23, "sire.mm.SelectorImproper.what"]], "zero_l_j() (sire.mm.ljparameter method)": [[23, "sire.mm.LJParameter.zero_l_j"]], "atom (class in sire.mol)": [[24, "sire.mol.Atom"]], "atomidx (class in sire.mol)": [[24, "sire.mol.AtomIdx"]], "atommapping (class in sire.mol)": [[24, "sire.mol.AtomMapping"]], "atommatch (class in sire.mol)": [[24, "sire.mol.AtomMatch"]], "atommatchm (class in sire.mol)": [[24, "sire.mol.AtomMatchM"]], "atomname (class in sire.mol)": [[24, "sire.mol.AtomName"]], "atomnum (class in sire.mol)": [[24, "sire.mol.AtomNum"]], "bondorder (class in sire.mol)": [[24, "sire.mol.BondOrder"]], "chain (class in sire.mol)": [[24, "sire.mol.Chain"]], "chainidx (class in sire.mol)": [[24, "sire.mol.ChainIdx"]], "chainname (class in sire.mol)": [[24, "sire.mol.ChainName"]], "cursor (class in sire.mol)": [[24, "sire.mol.Cursor"]], "cursors (class in sire.mol)": [[24, "sire.mol.Cursors"]], "cursorsm (class in sire.mol)": [[24, "sire.mol.CursorsM"]], "dynamics (class in sire.mol)": [[24, "sire.mol.Dynamics"]], "element (class in sire.mol)": [[24, "sire.mol.Element"]], "minimisation (class in sire.mol)": [[24, "sire.mol.Minimisation"]], "molidx (class in sire.mol)": [[24, "sire.mol.MolIdx"]], "molname (class in sire.mol)": [[24, "sire.mol.MolName"]], "molnum (class in sire.mol)": [[24, "sire.mol.MolNum"]], "molecule (class in sire.mol)": [[24, "sire.mol.Molecule"]], "residx (class in sire.mol)": [[24, "sire.mol.ResIdx"]], "resname (class in sire.mol)": [[24, "sire.mol.ResName"]], "resnum (class in sire.mol)": [[24, "sire.mol.ResNum"]], "residue (class in sire.mol)": [[24, "sire.mol.Residue"]], "segidx (class in sire.mol)": [[24, "sire.mol.SegIdx"]], "segname (class in sire.mol)": [[24, "sire.mol.SegName"]], "segment (class in sire.mol)": [[24, "sire.mol.Segment"]], "selectormol (class in sire.mol)": [[24, "sire.mol.SelectorMol"]], "stereochemistry (class in sire.mol)": [[24, "sire.mol.Stereochemistry"]], "trajectoryiterator (class in sire.mol)": [[24, "sire.mol.TrajectoryIterator"]], "actinide() (sire.mol.element method)": [[24, "sire.mol.Element.actinide"]], "align() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.align"]], "alkali_earth_metal() (sire.mol.element method)": [[24, "sire.mol.Element.alkali_earth_metal"]], "alkali_metal() (sire.mol.element method)": [[24, "sire.mol.Element.alkali_metal"]], "angle() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.angle"]], "angle() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.angle"]], "angle() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.angle"]], "angles() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.angles"]], "angles() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.angles"]], "angles() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.angles"]], "append() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.append"]], "apply() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.apply"]], "apply() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.apply"]], "apply() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.apply"]], "apply() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.apply"]], "apply() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.apply"]], "apply_reduce() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.apply_reduce"]], "aromatic_bond() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.aromatic_bond"]], "assert_contains() (sire.mol.atom method)": [[24, "sire.mol.Atom.assert_contains"]], "assert_contains() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.assert_contains"]], "assert_contains() (sire.mol.chain method)": [[24, "sire.mol.Chain.assert_contains"]], "assert_contains() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.assert_contains"]], "assert_contains_metadata() (sire.mol.atom method)": [[24, "sire.mol.Atom.assert_contains_metadata"]], "assert_contains_metadata() (sire.mol.chain method)": [[24, "sire.mol.Chain.assert_contains_metadata"]], "assert_contains_metadata() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.assert_contains_metadata"]], "assert_contains_metadata() (sire.mol.residue method)": [[24, "sire.mol.Residue.assert_contains_metadata"]], "assert_contains_metadata() (sire.mol.segment method)": [[24, "sire.mol.Segment.assert_contains_metadata"]], "assert_contains_property() (sire.mol.atom method)": [[24, "sire.mol.Atom.assert_contains_property"]], "assert_contains_property() (sire.mol.chain method)": [[24, "sire.mol.Chain.assert_contains_property"]], "assert_contains_property() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.assert_contains_property"]], "assert_contains_property() (sire.mol.residue method)": [[24, "sire.mol.Residue.assert_contains_property"]], "assert_contains_property() (sire.mol.segment method)": [[24, "sire.mol.Segment.assert_contains_property"]], "assert_has_metadata() (sire.mol.atom method)": [[24, "sire.mol.Atom.assert_has_metadata"]], "assert_has_metadata() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.assert_has_metadata"]], "assert_has_metadata() (sire.mol.chain method)": [[24, "sire.mol.Chain.assert_has_metadata"]], "assert_has_metadata() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.assert_has_metadata"]], "assert_has_property() (sire.mol.atom method)": [[24, "sire.mol.Atom.assert_has_property"]], "assert_has_property() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.assert_has_property"]], "assert_has_property() (sire.mol.chain method)": [[24, "sire.mol.Chain.assert_has_property"]], "assert_has_property() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.assert_has_property"]], "assert_same_molecule() (sire.mol.atom method)": [[24, "sire.mol.Atom.assert_same_molecule"]], "assert_same_molecule() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.assert_same_molecule"]], "assert_same_molecule() (sire.mol.chain method)": [[24, "sire.mol.Chain.assert_same_molecule"]], "assert_same_molecule() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.assert_same_molecule"]], "assign() (sire.mol.atom method)": [[24, "sire.mol.Atom.assign"]], "assign() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.assign"]], "assign() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.assign"]], "assign() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.assign"]], "assign() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.assign"]], "assign() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.assign"]], "assign() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.assign"]], "assign() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.assign"]], "assign() (sire.mol.chain method)": [[24, "sire.mol.Chain.assign"]], "assign() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.assign"]], "assign() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.assign"]], "assign() (sire.mol.element method)": [[24, "sire.mol.Element.assign"]], "assign() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.assign"]], "assign() (sire.mol.molname method)": [[24, "sire.mol.MolName.assign"]], "assign() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.assign"]], "assign() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.assign"]], "assign() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.assign"]], "assign() (sire.mol.resname method)": [[24, "sire.mol.ResName.assign"]], "assign() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.assign"]], "assign() (sire.mol.residue method)": [[24, "sire.mol.Residue.assign"]], "assign() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.assign"]], "assign() (sire.mol.segname method)": [[24, "sire.mol.SegName.assign"]], "assign() (sire.mol.segment method)": [[24, "sire.mol.Segment.assign"]], "assign() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.assign"]], "assign() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.assign"]], "atom() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.atom"]], "atom() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.atom"]], "atom() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.atom"]], "atom() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.atom"]], "atom() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.atom"]], "atom_idxs() (sire.mol.chain method)": [[24, "sire.mol.Chain.atom_idxs"]], "atom_idxs() (sire.mol.residue method)": [[24, "sire.mol.Residue.atom_idxs"]], "atom_idxs() (sire.mol.segment method)": [[24, "sire.mol.Segment.atom_idxs"]], "atoms() (sire.mol.atom method)": [[24, "sire.mol.Atom.atoms"]], "atoms() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.atoms"]], "atoms() (sire.mol.chain method)": [[24, "sire.mol.Chain.atoms"]], "atoms() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.atoms"]], "atoms() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.atoms"]], "atoms() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.atoms"]], "atoms() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.atoms"]], "atoms() (sire.mol.residue method)": [[24, "sire.mol.Residue.atoms"]], "atoms() (sire.mol.segment method)": [[24, "sire.mol.Segment.atoms"]], "atoms0() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.atoms0"]], "atoms1() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.atoms1"]], "biological() (sire.mol.element method)": [[24, "sire.mol.Element.biological"]], "biological_element() (sire.mol.element method)": [[24, "sire.mol.Element.biological_element"]], "blue() (sire.mol.element method)": [[24, "sire.mol.Element.blue"]], "bond() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.bond"]], "bond() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.bond"]], "bond() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.bond"]], "bond_order_radius() (sire.mol.element method)": [[24, "sire.mol.Element.bond_order_radius"]], "bonds() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.bonds"]], "bonds() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.bonds"]], "bonds() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.bonds"]], "cg_atom_idx() (sire.mol.atom method)": [[24, "sire.mol.Atom.cg_atom_idx"]], "chain() (sire.mol.atom method)": [[24, "sire.mol.Atom.chain"]], "chain() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.chain"]], "chain() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.chain"]], "chain() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.chain"]], "chain() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.chain"]], "chain() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.chain"]], "chains() (sire.mol.atom method)": [[24, "sire.mol.Atom.chains"]], "chains() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.chains"]], "chains() (sire.mol.chain method)": [[24, "sire.mol.Chain.chains"]], "chains() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.chains"]], "chains() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.chains"]], "chains() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.chains"]], "chains() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.chains"]], "chains() (sire.mol.residue method)": [[24, "sire.mol.Residue.chains"]], "chains() (sire.mol.segment method)": [[24, "sire.mol.Segment.chains"]], "clone() (sire.mol.atom method)": [[24, "sire.mol.Atom.clone"]], "clone() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.clone"]], "clone() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.clone"]], "clone() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.clone"]], "clone() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.clone"]], "clone() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.clone"]], "clone() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.clone"]], "clone() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.clone"]], "clone() (sire.mol.chain method)": [[24, "sire.mol.Chain.clone"]], "clone() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.clone"]], "clone() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.clone"]], "clone() (sire.mol.element method)": [[24, "sire.mol.Element.clone"]], "clone() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.clone"]], "clone() (sire.mol.molname method)": [[24, "sire.mol.MolName.clone"]], "clone() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.clone"]], "clone() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.clone"]], "clone() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.clone"]], "clone() (sire.mol.resname method)": [[24, "sire.mol.ResName.clone"]], "clone() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.clone"]], "clone() (sire.mol.residue method)": [[24, "sire.mol.Residue.clone"]], "clone() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.clone"]], "clone() (sire.mol.segname method)": [[24, "sire.mol.SegName.clone"]], "clone() (sire.mol.segment method)": [[24, "sire.mol.Segment.clone"]], "clone() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.clone"]], "clone() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.clone"]], "color() (sire.mol.element method)": [[24, "sire.mol.Element.color"]], "color_name() (sire.mol.element method)": [[24, "sire.mol.Element.color_name"]], "commit() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.commit"]], "commit() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.commit"]], "commit() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.commit"]], "commit() (sire.mol.minimisation method)": [[24, "sire.mol.Minimisation.commit"]], "const_data() (sire.mol.atom method)": [[24, "sire.mol.Atom.const_data"]], "const_data() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.const_data"]], "const_data() (sire.mol.chain method)": [[24, "sire.mol.Chain.const_data"]], "const_data() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.const_data"]], "constraint() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.constraint"]], "contains() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.contains"]], "contains() (sire.mol.chain method)": [[24, "sire.mol.Chain.contains"]], "contains() (sire.mol.residue method)": [[24, "sire.mol.Residue.contains"]], "contains() (sire.mol.segment method)": [[24, "sire.mol.Segment.contains"]], "contains() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.contains"]], "count() (sire.mol.atom method)": [[24, "sire.mol.Atom.count"]], "count() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.count"]], "count() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.count"]], "count() (sire.mol.chain method)": [[24, "sire.mol.Chain.count"]], "count() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.count"]], "count() (sire.mol.residue method)": [[24, "sire.mol.Residue.count"]], "count() (sire.mol.segment method)": [[24, "sire.mol.Segment.count"]], "count() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.count"]], "covalent_radius() (sire.mol.element method)": [[24, "sire.mol.Element.covalent_radius"]], "current() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.current"]], "current_energy() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.current_energy"]], "current_kinetic_energy() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.current_kinetic_energy"]], "current_potential_energy() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.current_potential_energy"]], "current_space() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.current_space"]], "current_step() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.current_step"]], "current_time() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.current_time"]], "cursor() (sire.mol.atom method)": [[24, "sire.mol.Atom.cursor"]], "cursor() (sire.mol.chain method)": [[24, "sire.mol.Chain.cursor"]], "cursor() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.cursor"]], "cursor() (sire.mol.residue method)": [[24, "sire.mol.Residue.cursor"]], "cursor() (sire.mol.segment method)": [[24, "sire.mol.Segment.cursor"]], "cutgroup() (sire.mol.atom method)": [[24, "sire.mol.Atom.cutgroup"]], "cutgroup() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.cutgroup"]], "cutgroup() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.cutgroup"]], "cutgroup() (sire.mol.chain method)": [[24, "sire.mol.Chain.cutgroup"]], "cutgroup() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.cutgroup"]], "cutgroup() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.cutgroup"]], "cutgroups() (sire.mol.atom method)": [[24, "sire.mol.Atom.cutgroups"]], "cutgroups() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.cutgroups"]], "cutgroups() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.cutgroups"]], "cutgroups() (sire.mol.chain method)": [[24, "sire.mol.Chain.cutgroups"]], "cutgroups() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.cutgroups"]], "cutgroups() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.cutgroups"]], "delete() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.delete"]], "delete() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.delete"]], "delete() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.delete"]], "delete_all_frames() (sire.mol.atom method)": [[24, "sire.mol.Atom.delete_all_frames"]], "delete_all_frames() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.delete_all_frames"]], "delete_all_frames() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.delete_all_frames"]], "delete_all_frames() (sire.mol.chain method)": [[24, "sire.mol.Chain.delete_all_frames"]], "delete_all_frames() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.delete_all_frames"]], "delete_all_frames() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.delete_all_frames"]], "delete_frame() (sire.mol.atom method)": [[24, "sire.mol.Atom.delete_frame"]], "delete_frame() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.delete_frame"]], "delete_frame() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.delete_frame"]], "delete_frame() (sire.mol.chain method)": [[24, "sire.mol.Chain.delete_frame"]], "delete_frame() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.delete_frame"]], "delete_frame() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.delete_frame"]], "delete_frame() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.delete_frame"]], "delete_frame() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.delete_frame"]], "delete_frame() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.delete_frame"]], "dihedral() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.dihedral"]], "dihedral() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.dihedral"]], "dihedral() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.dihedral"]], "dihedrals() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.dihedrals"]], "dihedrals() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.dihedrals"]], "dihedrals() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.dihedrals"]], "double_bond() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.double_bond"]], "down() (sire.mol.stereochemistry static method)": [[24, "sire.mol.Stereochemistry.down"]], "dynamics() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.dynamics"]], "edit() (sire.mol.atom method)": [[24, "sire.mol.Atom.edit"]], "edit() (sire.mol.chain method)": [[24, "sire.mol.Chain.edit"]], "edit() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.edit"]], "edit() (sire.mol.residue method)": [[24, "sire.mol.Residue.edit"]], "edit() (sire.mol.segment method)": [[24, "sire.mol.Segment.edit"]], "elapsed_time() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.elapsed_time"]], "element_with_mass() (sire.mol.element method)": [[24, "sire.mol.Element.element_with_mass"]], "energies() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.energies"]], "energy() (sire.mol.atom method)": [[24, "sire.mol.Atom.energy"]], "energy() (sire.mol.chain method)": [[24, "sire.mol.Chain.energy"]], "energy() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.energy"]], "energy() (sire.mol.residue method)": [[24, "sire.mol.Residue.energy"]], "energy() (sire.mol.segment method)": [[24, "sire.mol.Segment.energy"]], "energy() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.energy"]], "energy_trajectory() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.energy_trajectory"]], "ensemble() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.ensemble"]], "evaluate() (sire.mol.atom method)": [[24, "sire.mol.Atom.evaluate"]], "evaluate() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.evaluate"]], "evaluate() (sire.mol.chain method)": [[24, "sire.mol.Chain.evaluate"]], "evaluate() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.evaluate"]], "evaluate() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.evaluate"]], "evaluate() (sire.mol.residue method)": [[24, "sire.mol.Residue.evaluate"]], "evaluate() (sire.mol.segment method)": [[24, "sire.mol.Segment.evaluate"]], "evaluate() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.evaluate"]], "extract() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.extract"]], "extract() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.extract"]], "find() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.find"]], "find() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.find"]], "first() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.first"]], "frame_indexes() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.frame_indexes"]], "from_rdkit() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.from_rdkit"]], "from_rdkit() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.from_rdkit"]], "from_s_d_f() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.from_s_d_f"]], "from_s_d_f() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.from_s_d_f"]], "get() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.get"]], "get() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.get"]], "get() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.get"]], "get_alignment() (in module sire.mol)": [[24, "sire.mol.get_alignment"]], "get_index() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.get_index"]], "get_lambda() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.get_lambda"]], "get_link() (sire.mol.atom method)": [[24, "sire.mol.Atom.get_link"]], "get_link() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.get_link"]], "get_link() (sire.mol.chain method)": [[24, "sire.mol.Chain.get_link"]], "get_link() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.get_link"]], "get_links() (sire.mol.atom method)": [[24, "sire.mol.Atom.get_links"]], "get_links() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.get_links"]], "get_links() (sire.mol.chain method)": [[24, "sire.mol.Chain.get_links"]], "get_links() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.get_links"]], "get_name() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.get_name"]], "get_number() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.get_number"]], "get_schedule() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.get_schedule"]], "get_unique_number() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.get_unique_number"]], "green() (sire.mol.element method)": [[24, "sire.mol.Element.green"]], "group() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.group"]], "group() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.group"]], "group() (sire.mol.element method)": [[24, "sire.mol.Element.group"]], "groups() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.groups"]], "groups() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.groups"]], "halogen() (sire.mol.element method)": [[24, "sire.mol.Element.halogen"]], "has_links() (sire.mol.atom method)": [[24, "sire.mol.Atom.has_links"]], "has_links() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.has_links"]], "has_links() (sire.mol.chain method)": [[24, "sire.mol.Chain.has_links"]], "has_links() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.has_links"]], "has_metadata() (sire.mol.atom method)": [[24, "sire.mol.Atom.has_metadata"]], "has_metadata() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.has_metadata"]], "has_metadata() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.has_metadata"]], "has_metadata() (sire.mol.chain method)": [[24, "sire.mol.Chain.has_metadata"]], "has_metadata() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.has_metadata"]], "has_metadata() (sire.mol.residue method)": [[24, "sire.mol.Residue.has_metadata"]], "has_metadata() (sire.mol.segment method)": [[24, "sire.mol.Segment.has_metadata"]], "has_property() (sire.mol.atom method)": [[24, "sire.mol.Atom.has_property"]], "has_property() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.has_property"]], "has_property() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.has_property"]], "has_property() (sire.mol.chain method)": [[24, "sire.mol.Chain.has_property"]], "has_property() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.has_property"]], "has_property() (sire.mol.residue method)": [[24, "sire.mol.Residue.has_property"]], "has_property() (sire.mol.segment method)": [[24, "sire.mol.Segment.has_property"]], "hash() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.hash"]], "hash() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.hash"]], "hash() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.hash"]], "hash() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.hash"]], "hash() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.hash"]], "hash() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.hash"]], "hash() (sire.mol.molname method)": [[24, "sire.mol.MolName.hash"]], "hash() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.hash"]], "hash() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.hash"]], "hash() (sire.mol.resname method)": [[24, "sire.mol.ResName.hash"]], "hash() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.hash"]], "hash() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.hash"]], "hash() (sire.mol.segname method)": [[24, "sire.mol.SegName.hash"]], "hex_color() (sire.mol.element method)": [[24, "sire.mol.Element.hex_color"]], "id() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.id"]], "ids() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.ids"]], "ids() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.ids"]], "improper() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.improper"]], "improper() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.improper"]], "improper() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.improper"]], "impropers() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.impropers"]], "impropers() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.impropers"]], "impropers() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.impropers"]], "index (sire.mol.cursor property)": [[24, "sire.mol.Cursor.index"]], "index() (sire.mol.atom method)": [[24, "sire.mol.Atom.index"]], "index() (sire.mol.chain method)": [[24, "sire.mol.Chain.index"]], "index() (sire.mol.residue method)": [[24, "sire.mol.Residue.index"]], "index() (sire.mol.segment method)": [[24, "sire.mol.Segment.index"]], "indexes() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.indexes"]], "indexes() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.indexes"]], "info() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.info"]], "info() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.info"]], "intersection() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.intersection"]], "intersects() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.intersects"]], "intersects() (sire.mol.chain method)": [[24, "sire.mol.Chain.intersects"]], "intersects() (sire.mol.residue method)": [[24, "sire.mol.Residue.intersects"]], "intersects() (sire.mol.segment method)": [[24, "sire.mol.Segment.intersects"]], "invert() (sire.mol.atom method)": [[24, "sire.mol.Atom.invert"]], "invert() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.invert"]], "invert() (sire.mol.chain method)": [[24, "sire.mol.Chain.invert"]], "invert() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.invert"]], "invert() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.invert"]], "invert() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.invert"]], "invert() (sire.mol.residue method)": [[24, "sire.mol.Residue.invert"]], "invert() (sire.mol.segment method)": [[24, "sire.mol.Segment.invert"]], "is_angle() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_angle"]], "is_atom() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_atom"]], "is_bond() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_bond"]], "is_chain() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_chain"]], "is_defined() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.is_defined"]], "is_defined() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.is_defined"]], "is_dihedral() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_dihedral"]], "is_double() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.is_double"]], "is_down() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.is_down"]], "is_empty() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_empty"]], "is_empty() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.is_empty"]], "is_empty() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.is_empty"]], "is_empty() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.is_empty"]], "is_empty() (sire.mol.chain method)": [[24, "sire.mol.Chain.is_empty"]], "is_empty() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.is_empty"]], "is_empty() (sire.mol.residue method)": [[24, "sire.mol.Residue.is_empty"]], "is_empty() (sire.mol.segment method)": [[24, "sire.mol.Segment.is_empty"]], "is_empty() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.is_empty"]], "is_improper() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_improper"]], "is_internal() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_internal"]], "is_link() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_link"]], "is_link() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.is_link"]], "is_link() (sire.mol.chain method)": [[24, "sire.mol.Chain.is_link"]], "is_link() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.is_link"]], "is_molecule() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_molecule"]], "is_not_stereo() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.is_not_stereo"]], "is_null() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_null"]], "is_null() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.is_null"]], "is_null() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.is_null"]], "is_null() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.is_null"]], "is_null() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.is_null"]], "is_null() (sire.mol.chain method)": [[24, "sire.mol.Chain.is_null"]], "is_null() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.is_null"]], "is_null() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.is_null"]], "is_null() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.is_null"]], "is_null() (sire.mol.molname method)": [[24, "sire.mol.MolName.is_null"]], "is_null() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.is_null"]], "is_null() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.is_null"]], "is_null() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.is_null"]], "is_null() (sire.mol.resname method)": [[24, "sire.mol.ResName.is_null"]], "is_null() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.is_null"]], "is_null() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.is_null"]], "is_null() (sire.mol.segname method)": [[24, "sire.mol.SegName.is_null"]], "is_perturbable() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.is_perturbable"]], "is_residue() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_residue"]], "is_same_editor() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_same_editor"]], "is_same_editor() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.is_same_editor"]], "is_same_molecule() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_same_molecule"]], "is_same_molecule() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.is_same_molecule"]], "is_same_molecule() (sire.mol.chain method)": [[24, "sire.mol.Chain.is_same_molecule"]], "is_same_molecule() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.is_same_molecule"]], "is_segment() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.is_segment"]], "is_selector() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_selector"]], "is_selector() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.is_selector"]], "is_selector() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.is_selector"]], "is_selector() (sire.mol.chain method)": [[24, "sire.mol.Chain.is_selector"]], "is_selector() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.is_selector"]], "is_selector() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.is_selector"]], "is_single() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.is_single"]], "is_triple() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.is_triple"]], "is_up() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.is_up"]], "is_water() (in module sire.mol)": [[24, "sire.mol.is_water"]], "is_within_chain() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_within_chain"]], "is_within_chain() (sire.mol.residue method)": [[24, "sire.mol.Residue.is_within_chain"]], "is_within_residue() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_within_residue"]], "is_within_segment() (sire.mol.atom method)": [[24, "sire.mol.Atom.is_within_segment"]], "isromatic() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.isromatic"]], "join() (sire.mol.molecule static method)": [[24, "sire.mol.Molecule.join"]], "lanthanide() (sire.mol.element method)": [[24, "sire.mol.Element.lanthanide"]], "load_frame() (sire.mol.atom method)": [[24, "sire.mol.Atom.load_frame"]], "load_frame() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.load_frame"]], "load_frame() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.load_frame"]], "load_frame() (sire.mol.chain method)": [[24, "sire.mol.Chain.load_frame"]], "load_frame() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.load_frame"]], "load_frame() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.load_frame"]], "load_frame() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.load_frame"]], "load_frame() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.load_frame"]], "load_frame() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.load_frame"]], "make_whole() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.make_whole"]], "make_whole() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.make_whole"]], "make_whole() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.make_whole"]], "map() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.map"]], "map() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.map"]], "map() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.map"]], "map() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.map"]], "map() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.map"]], "map() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.map"]], "map() (sire.mol.molname method)": [[24, "sire.mol.MolName.map"]], "map() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.map"]], "map() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.map"]], "map() (sire.mol.resname method)": [[24, "sire.mol.ResName.map"]], "map() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.map"]], "map() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.map"]], "map() (sire.mol.segname method)": [[24, "sire.mol.SegName.map"]], "mass() (sire.mol.element method)": [[24, "sire.mol.Element.mass"]], "max_bonds() (sire.mol.element method)": [[24, "sire.mol.Element.max_bonds"]], "metadata() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.metadata"]], "metadata_keys() (sire.mol.atom method)": [[24, "sire.mol.Atom.metadata_keys"]], "metadata_keys() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.metadata_keys"]], "metadata_keys() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.metadata_keys"]], "metadata_keys() (sire.mol.chain method)": [[24, "sire.mol.Chain.metadata_keys"]], "metadata_keys() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.metadata_keys"]], "metadata_keys() (sire.mol.residue method)": [[24, "sire.mol.Residue.metadata_keys"]], "metadata_keys() (sire.mol.segment method)": [[24, "sire.mol.Segment.metadata_keys"]], "metadata_type() (sire.mol.atom method)": [[24, "sire.mol.Atom.metadata_type"]], "metadata_type() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.metadata_type"]], "metadata_type() (sire.mol.chain method)": [[24, "sire.mol.Chain.metadata_type"]], "metadata_type() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.metadata_type"]], "minimisation() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.minimisation"]], "minimise() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.minimise"]], "mol_nums() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.mol_nums"]], "molecule() (sire.mol.atom method)": [[24, "sire.mol.Atom.molecule"]], "molecule() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.molecule"]], "molecule() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.molecule"]], "molecule() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.molecule"]], "molecule() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.molecule"]], "molecule() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.molecule"]], "molecules() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.molecules"]], "molecules() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.molecules"]], "move() (sire.mol.atom method)": [[24, "sire.mol.Atom.move"]], "move() (sire.mol.chain method)": [[24, "sire.mol.Chain.move"]], "move() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.move"]], "move() (sire.mol.residue method)": [[24, "sire.mol.Residue.move"]], "move() (sire.mol.segment method)": [[24, "sire.mol.Segment.move"]], "name (sire.mol.cursor property)": [[24, "sire.mol.Cursor.name"]], "name() (sire.mol.atom method)": [[24, "sire.mol.Atom.name"]], "name() (sire.mol.chain method)": [[24, "sire.mol.Chain.name"]], "name() (sire.mol.element method)": [[24, "sire.mol.Element.name"]], "name() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.name"]], "name() (sire.mol.residue method)": [[24, "sire.mol.Residue.name"]], "name() (sire.mol.segment method)": [[24, "sire.mol.Segment.name"]], "names() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.names"]], "names() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.names"]], "noble_gas() (sire.mol.element method)": [[24, "sire.mol.Element.noble_gas"]], "not_stereo() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.not_stereo"]], "null() (sire.mol.atomidx static method)": [[24, "sire.mol.AtomIdx.null"]], "null() (sire.mol.chainidx static method)": [[24, "sire.mol.ChainIdx.null"]], "null() (sire.mol.molidx static method)": [[24, "sire.mol.MolIdx.null"]], "null() (sire.mol.residx static method)": [[24, "sire.mol.ResIdx.null"]], "null() (sire.mol.segidx static method)": [[24, "sire.mol.SegIdx.null"]], "num_atoms() (sire.mol.atom method)": [[24, "sire.mol.Atom.num_atoms"]], "num_atoms() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_atoms"]], "num_atoms() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_atoms"]], "num_atoms() (sire.mol.chain method)": [[24, "sire.mol.Chain.num_atoms"]], "num_atoms() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.num_atoms"]], "num_atoms() (sire.mol.residue method)": [[24, "sire.mol.Residue.num_atoms"]], "num_atoms() (sire.mol.segment method)": [[24, "sire.mol.Segment.num_atoms"]], "num_atoms() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.num_atoms"]], "num_chains() (sire.mol.atom method)": [[24, "sire.mol.Atom.num_chains"]], "num_chains() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_chains"]], "num_chains() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_chains"]], "num_chains() (sire.mol.chain method)": [[24, "sire.mol.Chain.num_chains"]], "num_chains() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.num_chains"]], "num_chains() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.num_chains"]], "num_cutgroups() (sire.mol.atom method)": [[24, "sire.mol.Atom.num_cutgroups"]], "num_cutgroups() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_cutgroups"]], "num_cutgroups() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_cutgroups"]], "num_cutgroups() (sire.mol.chain method)": [[24, "sire.mol.Chain.num_cutgroups"]], "num_cutgroups() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.num_cutgroups"]], "num_cutgroups() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.num_cutgroups"]], "num_frames() (sire.mol.atom method)": [[24, "sire.mol.Atom.num_frames"]], "num_frames() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_frames"]], "num_frames() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_frames"]], "num_frames() (sire.mol.chain method)": [[24, "sire.mol.Chain.num_frames"]], "num_frames() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.num_frames"]], "num_frames() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.num_frames"]], "num_frames() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.num_frames"]], "num_frames() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.num_frames"]], "num_frames() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.num_frames"]], "num_groups() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_groups"]], "num_groups() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_groups"]], "num_molecules() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_molecules"]], "num_molecules() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.num_molecules"]], "num_protons() (sire.mol.element method)": [[24, "sire.mol.Element.num_protons"]], "num_residues() (sire.mol.atom method)": [[24, "sire.mol.Atom.num_residues"]], "num_residues() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_residues"]], "num_residues() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_residues"]], "num_residues() (sire.mol.chain method)": [[24, "sire.mol.Chain.num_residues"]], "num_residues() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.num_residues"]], "num_residues() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.num_residues"]], "num_segments() (sire.mol.atom method)": [[24, "sire.mol.Atom.num_segments"]], "num_segments() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_segments"]], "num_segments() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.num_segments"]], "num_segments() (sire.mol.chain method)": [[24, "sire.mol.Chain.num_segments"]], "num_segments() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.num_segments"]], "num_segments() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.num_segments"]], "num_views() (sire.mol.atom method)": [[24, "sire.mol.Atom.num_views"]], "num_views() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.num_views"]], "num_views() (sire.mol.chain method)": [[24, "sire.mol.Chain.num_views"]], "num_views() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.num_views"]], "number (sire.mol.cursor property)": [[24, "sire.mol.Cursor.number"]], "number() (sire.mol.atom method)": [[24, "sire.mol.Atom.number"]], "number() (sire.mol.chain method)": [[24, "sire.mol.Chain.number"]], "number() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.number"]], "number() (sire.mol.residue method)": [[24, "sire.mol.Residue.number"]], "number() (sire.mol.segment method)": [[24, "sire.mol.Segment.number"]], "numbers() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.numbers"]], "numbers() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.numbers"]], "parent() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.parent"]], "parent() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.parent"]], "period() (sire.mol.element method)": [[24, "sire.mol.Element.period"]], "perturbation() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.perturbation"]], "platform() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.platform"]], "properties() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.properties"]], "properties() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.properties"]], "property() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.property"]], "property_as_property() (sire.mol.atom method)": [[24, "sire.mol.Atom.property_as_property"]], "property_as_property() (sire.mol.chain method)": [[24, "sire.mol.Chain.property_as_property"]], "property_as_property() (sire.mol.residue method)": [[24, "sire.mol.Residue.property_as_property"]], "property_as_property() (sire.mol.segment method)": [[24, "sire.mol.Segment.property_as_property"]], "property_as_variant() (sire.mol.atom method)": [[24, "sire.mol.Atom.property_as_variant"]], "property_as_variant() (sire.mol.chain method)": [[24, "sire.mol.Chain.property_as_variant"]], "property_as_variant() (sire.mol.residue method)": [[24, "sire.mol.Residue.property_as_variant"]], "property_as_variant() (sire.mol.segment method)": [[24, "sire.mol.Segment.property_as_variant"]], "property_keys() (sire.mol.atom method)": [[24, "sire.mol.Atom.property_keys"]], "property_keys() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.property_keys"]], "property_keys() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.property_keys"]], "property_keys() (sire.mol.chain method)": [[24, "sire.mol.Chain.property_keys"]], "property_keys() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.property_keys"]], "property_keys() (sire.mol.residue method)": [[24, "sire.mol.Residue.property_keys"]], "property_keys() (sire.mol.segment method)": [[24, "sire.mol.Segment.property_keys"]], "property_type() (sire.mol.atom method)": [[24, "sire.mol.Atom.property_type"]], "property_type() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.property_type"]], "property_type() (sire.mol.chain method)": [[24, "sire.mol.Chain.property_type"]], "property_type() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.property_type"]], "rare_earth() (sire.mol.element method)": [[24, "sire.mol.Element.rare_earth"]], "red() (sire.mol.element method)": [[24, "sire.mol.Element.red"]], "renumber() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.renumber"]], "res_idxs() (sire.mol.chain method)": [[24, "sire.mol.Chain.res_idxs"]], "residue() (sire.mol.atom method)": [[24, "sire.mol.Atom.residue"]], "residue() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.residue"]], "residue() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.residue"]], "residue() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.residue"]], "residue() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.residue"]], "residue() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.residue"]], "residues() (sire.mol.atom method)": [[24, "sire.mol.Atom.residues"]], "residues() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.residues"]], "residues() (sire.mol.chain method)": [[24, "sire.mol.Chain.residues"]], "residues() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.residues"]], "residues() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.residues"]], "residues() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.residues"]], "residues() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.residues"]], "residues() (sire.mol.residue method)": [[24, "sire.mol.Residue.residues"]], "residues() (sire.mol.segment method)": [[24, "sire.mol.Segment.residues"]], "rmsd() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.rmsd"]], "rotate() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.rotate"]], "rotate() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.rotate"]], "rotate() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.rotate"]], "run() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.run"]], "run() (sire.mol.minimisation method)": [[24, "sire.mol.Minimisation.run"]], "save_frame() (sire.mol.atom method)": [[24, "sire.mol.Atom.save_frame"]], "save_frame() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.save_frame"]], "save_frame() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.save_frame"]], "save_frame() (sire.mol.chain method)": [[24, "sire.mol.Chain.save_frame"]], "save_frame() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.save_frame"]], "save_frame() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.save_frame"]], "save_frame() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.save_frame"]], "save_frame() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.save_frame"]], "save_frame() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.save_frame"]], "search() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.search"]], "search() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.search"]], "segment() (sire.mol.atom method)": [[24, "sire.mol.Atom.segment"]], "segment() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.segment"]], "segment() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.segment"]], "segment() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.segment"]], "segment() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.segment"]], "segment() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.segment"]], "segments() (sire.mol.atom method)": [[24, "sire.mol.Atom.segments"]], "segments() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.segments"]], "segments() (sire.mol.chain method)": [[24, "sire.mol.Chain.segments"]], "segments() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.segments"]], "segments() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.segments"]], "segments() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.segments"]], "segments() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.segments"]], "segments() (sire.mol.residue method)": [[24, "sire.mol.Residue.segments"]], "segments() (sire.mol.segment method)": [[24, "sire.mol.Segment.segments"]], "select_all() (sire.mol.atom method)": [[24, "sire.mol.Atom.select_all"]], "select_all() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.select_all"]], "select_all() (sire.mol.chain method)": [[24, "sire.mol.Chain.select_all"]], "select_all() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.select_all"]], "select_all_atoms() (sire.mol.atom method)": [[24, "sire.mol.Atom.select_all_atoms"]], "select_all_atoms() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.select_all_atoms"]], "select_all_atoms() (sire.mol.chain method)": [[24, "sire.mol.Chain.select_all_atoms"]], "select_all_atoms() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.select_all_atoms"]], "select_all_chains() (sire.mol.atom method)": [[24, "sire.mol.Atom.select_all_chains"]], "select_all_chains() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.select_all_chains"]], "select_all_chains() (sire.mol.chain method)": [[24, "sire.mol.Chain.select_all_chains"]], "select_all_chains() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.select_all_chains"]], "select_all_cutgroups() (sire.mol.atom method)": [[24, "sire.mol.Atom.select_all_cutgroups"]], "select_all_cutgroups() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.select_all_cutgroups"]], "select_all_cutgroups() (sire.mol.chain method)": [[24, "sire.mol.Chain.select_all_cutgroups"]], "select_all_cutgroups() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.select_all_cutgroups"]], "select_all_residues() (sire.mol.atom method)": [[24, "sire.mol.Atom.select_all_residues"]], "select_all_residues() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.select_all_residues"]], "select_all_residues() (sire.mol.chain method)": [[24, "sire.mol.Chain.select_all_residues"]], "select_all_residues() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.select_all_residues"]], "select_all_segments() (sire.mol.atom method)": [[24, "sire.mol.Atom.select_all_segments"]], "select_all_segments() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.select_all_segments"]], "select_all_segments() (sire.mol.chain method)": [[24, "sire.mol.Chain.select_all_segments"]], "select_all_segments() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.select_all_segments"]], "selected_all() (sire.mol.atom method)": [[24, "sire.mol.Atom.selected_all"]], "selected_all() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.selected_all"]], "selected_all() (sire.mol.chain method)": [[24, "sire.mol.Chain.selected_all"]], "selected_all() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.selected_all"]], "selected_all() (sire.mol.residue method)": [[24, "sire.mol.Residue.selected_all"]], "selected_all() (sire.mol.segment method)": [[24, "sire.mol.Segment.selected_all"]], "selection() (sire.mol.atom method)": [[24, "sire.mol.Atom.selection"]], "selection() (sire.mol.chain method)": [[24, "sire.mol.Chain.selection"]], "selection() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.selection"]], "selection() (sire.mol.residue method)": [[24, "sire.mol.Residue.selection"]], "selection() (sire.mol.segment method)": [[24, "sire.mol.Segment.selection"]], "selection_to_atoms() (in module sire.mol)": [[24, "sire.mol.selection_to_atoms"]], "selector() (sire.mol.atom method)": [[24, "sire.mol.Atom.selector"]], "selector() (sire.mol.chain method)": [[24, "sire.mol.Chain.selector"]], "selector() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.selector"]], "selector() (sire.mol.residue method)": [[24, "sire.mol.Residue.selector"]], "selector() (sire.mol.segment method)": [[24, "sire.mol.Segment.selector"]], "set() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.set"]], "set() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.set"]], "set() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.set"]], "set_ensemble() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.set_ensemble"]], "set_lambda() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.set_lambda"]], "set_name() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.set_name"]], "set_number() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.set_number"]], "set_schedule() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.set_schedule"]], "single_bond() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.single_bond"]], "sire.mol": [[24, "module-sire.mol"]], "size() (sire.mol.atom method)": [[24, "sire.mol.Atom.size"]], "size() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.size"]], "size() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.size"]], "size() (sire.mol.chain method)": [[24, "sire.mol.Chain.size"]], "size() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.size"]], "size() (sire.mol.residue method)": [[24, "sire.mol.Residue.size"]], "size() (sire.mol.segment method)": [[24, "sire.mol.Segment.size"]], "size() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.size"]], "smarts() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.smarts"]], "smiles() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.smiles"]], "smooth() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.smooth"]], "step_speed() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.step_speed"]], "swap() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.swap"]], "symbol() (sire.mol.element method)": [[24, "sire.mol.Element.symbol"]], "time_speed() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.time_speed"]], "timestep() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.timestep"]], "to_list() (sire.mol.atom method)": [[24, "sire.mol.Atom.to_list"]], "to_list() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.to_list"]], "to_list() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.to_list"]], "to_list() (sire.mol.chain method)": [[24, "sire.mol.Chain.to_list"]], "to_list() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.to_list"]], "to_list() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.to_list"]], "to_molecule_group() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.to_molecule_group"]], "to_molecule_group() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.to_molecule_group"]], "to_molecules() (sire.mol.atom method)": [[24, "sire.mol.Atom.to_molecules"]], "to_molecules() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.to_molecules"]], "to_molecules() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.to_molecules"]], "to_molecules() (sire.mol.chain method)": [[24, "sire.mol.Chain.to_molecules"]], "to_molecules() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.to_molecules"]], "to_molecules() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.to_molecules"]], "to_rdkit() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.to_rdkit"]], "to_rdkit() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.to_rdkit"]], "to_s_d_f() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.to_s_d_f"]], "to_s_d_f() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.to_s_d_f"]], "to_select_result() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.to_select_result"]], "to_select_result() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.to_select_result"]], "to_selector() (sire.mol.atom method)": [[24, "sire.mol.Atom.to_selector"]], "to_selector() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.to_selector"]], "to_selector() (sire.mol.chain method)": [[24, "sire.mol.Chain.to_selector"]], "to_selector() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.to_selector"]], "to_selector() (sire.mol.residue method)": [[24, "sire.mol.Residue.to_selector"]], "to_selector() (sire.mol.segment method)": [[24, "sire.mol.Segment.to_selector"]], "to_string() (sire.mol.atom method)": [[24, "sire.mol.Atom.to_string"]], "to_string() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.to_string"]], "to_string() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.to_string"]], "to_string() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.to_string"]], "to_string() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.to_string"]], "to_string() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.to_string"]], "to_string() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.to_string"]], "to_string() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.to_string"]], "to_string() (sire.mol.chain method)": [[24, "sire.mol.Chain.to_string"]], "to_string() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.to_string"]], "to_string() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.to_string"]], "to_string() (sire.mol.element method)": [[24, "sire.mol.Element.to_string"]], "to_string() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.to_string"]], "to_string() (sire.mol.molname method)": [[24, "sire.mol.MolName.to_string"]], "to_string() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.to_string"]], "to_string() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.to_string"]], "to_string() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.to_string"]], "to_string() (sire.mol.resname method)": [[24, "sire.mol.ResName.to_string"]], "to_string() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.to_string"]], "to_string() (sire.mol.residue method)": [[24, "sire.mol.Residue.to_string"]], "to_string() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.to_string"]], "to_string() (sire.mol.segname method)": [[24, "sire.mol.SegName.to_string"]], "to_string() (sire.mol.segment method)": [[24, "sire.mol.Segment.to_string"]], "to_string() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.to_string"]], "to_string() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.to_string"]], "to_unit() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.to_unit"]], "trajectory() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.trajectory"]], "transform() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.transform"]], "transform() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.transform"]], "transform() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.transform"]], "transition_metal() (sire.mol.element method)": [[24, "sire.mol.Element.transition_metal"]], "translate() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.translate"]], "translate() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.translate"]], "translate() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.translate"]], "triple_bond() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.triple_bond"]], "type() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.type"]], "typename() (sire.mol.atom method)": [[24, "sire.mol.Atom.typename"]], "typename() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.typename"]], "typename() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.typename"]], "typename() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.typename"]], "typename() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.typename"]], "typename() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.typename"]], "typename() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.typename"]], "typename() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.typename"]], "typename() (sire.mol.chain method)": [[24, "sire.mol.Chain.typename"]], "typename() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.typename"]], "typename() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.typename"]], "typename() (sire.mol.element method)": [[24, "sire.mol.Element.typename"]], "typename() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.typename"]], "typename() (sire.mol.molname method)": [[24, "sire.mol.MolName.typename"]], "typename() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.typename"]], "typename() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.typename"]], "typename() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.typename"]], "typename() (sire.mol.resname method)": [[24, "sire.mol.ResName.typename"]], "typename() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.typename"]], "typename() (sire.mol.residue method)": [[24, "sire.mol.Residue.typename"]], "typename() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.typename"]], "typename() (sire.mol.segname method)": [[24, "sire.mol.SegName.typename"]], "typename() (sire.mol.segment method)": [[24, "sire.mol.Segment.typename"]], "typename() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.typename"]], "typename() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.typename"]], "undefined() (sire.mol.stereochemistry static method)": [[24, "sire.mol.Stereochemistry.undefined"]], "undefined_bond() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.undefined_bond"]], "up() (sire.mol.stereochemistry static method)": [[24, "sire.mol.Stereochemistry.up"]], "update() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.update"]], "update() (sire.mol.chain method)": [[24, "sire.mol.Chain.update"]], "update() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.update"]], "value() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.value"]], "value() (sire.mol.stereochemistry method)": [[24, "sire.mol.Stereochemistry.value"]], "value_as_double() (sire.mol.bondorder method)": [[24, "sire.mol.BondOrder.value_as_double"]], "vdw_radius() (sire.mol.element method)": [[24, "sire.mol.Element.vdw_radius"]], "version() (sire.mol.molecule method)": [[24, "sire.mol.Molecule.version"]], "view() (sire.mol.cursor method)": [[24, "sire.mol.Cursor.view"]], "view() (sire.mol.cursors method)": [[24, "sire.mol.Cursors.view"]], "view() (sire.mol.cursorsm method)": [[24, "sire.mol.CursorsM.view"]], "view() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.view"]], "walltime() (sire.mol.dynamics method)": [[24, "sire.mol.Dynamics.walltime"]], "what() (sire.mol.atomidx method)": [[24, "sire.mol.AtomIdx.what"]], "what() (sire.mol.atommapping method)": [[24, "sire.mol.AtomMapping.what"]], "what() (sire.mol.atommatch method)": [[24, "sire.mol.AtomMatch.what"]], "what() (sire.mol.atommatchm method)": [[24, "sire.mol.AtomMatchM.what"]], "what() (sire.mol.atomname method)": [[24, "sire.mol.AtomName.what"]], "what() (sire.mol.atomnum method)": [[24, "sire.mol.AtomNum.what"]], "what() (sire.mol.chainidx method)": [[24, "sire.mol.ChainIdx.what"]], "what() (sire.mol.chainname method)": [[24, "sire.mol.ChainName.what"]], "what() (sire.mol.element method)": [[24, "sire.mol.Element.what"]], "what() (sire.mol.molidx method)": [[24, "sire.mol.MolIdx.what"]], "what() (sire.mol.molname method)": [[24, "sire.mol.MolName.what"]], "what() (sire.mol.molnum method)": [[24, "sire.mol.MolNum.what"]], "what() (sire.mol.residx method)": [[24, "sire.mol.ResIdx.what"]], "what() (sire.mol.resname method)": [[24, "sire.mol.ResName.what"]], "what() (sire.mol.resnum method)": [[24, "sire.mol.ResNum.what"]], "what() (sire.mol.segidx method)": [[24, "sire.mol.SegIdx.what"]], "what() (sire.mol.segname method)": [[24, "sire.mol.SegName.what"]], "what() (sire.mol.selectormol method)": [[24, "sire.mol.SelectorMol.what"]], "wrap() (sire.mol.trajectoryiterator method)": [[24, "sire.mol.TrajectoryIterator.wrap"]], "perturbation (class in sire.morph)": [[25, "sire.morph.Perturbation"]], "commit() (sire.morph.perturbation method)": [[25, "sire.morph.Perturbation.commit"]], "link_to_perturbed() (sire.morph.perturbation method)": [[25, "sire.morph.Perturbation.link_to_perturbed"]], "link_to_reference() (sire.morph.perturbation method)": [[25, "sire.morph.Perturbation.link_to_reference"]], "replica_exchange() (in module sire.morph)": [[25, "sire.morph.replica_exchange"]], "set_lambda() (sire.morph.perturbation method)": [[25, "sire.morph.Perturbation.set_lambda"]], "shrink_ghost_atoms() (in module sire.morph)": [[25, "sire.morph.shrink_ghost_atoms"]], "sire.morph": [[25, "module-sire.morph"]], "view() (sire.morph.perturbation method)": [[25, "sire.morph.Perturbation.view"]], "bond() (in module sire.restraints)": [[26, "sire.restraints.bond"]], "boresch() (in module sire.restraints)": [[26, "sire.restraints.boresch"]], "distance() (in module sire.restraints)": [[26, "sire.restraints.distance"]], "positional() (in module sire.restraints)": [[26, "sire.restraints.positional"]], "sire.restraints": [[26, "module-sire.restraints"]], "approx_equal() (in module sire.search)": [[27, "sire.search.approx_equal"]], "approx_greater() (in module sire.search)": [[27, "sire.search.approx_greater"]], "approx_greater_equal() (in module sire.search)": [[27, "sire.search.approx_greater_equal"]], "approx_less() (in module sire.search)": [[27, "sire.search.approx_less"]], "approx_less_equal() (in module sire.search)": [[27, "sire.search.approx_less_equal"]], "approx_not_equal() (in module sire.search)": [[27, "sire.search.approx_not_equal"]], "delete_all_tokens() (in module sire.search)": [[27, "sire.search.delete_all_tokens"]], "delete_token() (in module sire.search)": [[27, "sire.search.delete_token"]], "get_approx_epsilon() (in module sire.search)": [[27, "sire.search.get_approx_epsilon"]], "get_min_protein_residues() (in module sire.search)": [[27, "sire.search.get_min_protein_residues"]], "get_protein_residue_names() (in module sire.search)": [[27, "sire.search.get_protein_residue_names"]], "get_token() (in module sire.search)": [[27, "sire.search.get_token"]], "has_token() (in module sire.search)": [[27, "sire.search.has_token"]], "set_approx_epsilon() (in module sire.search)": [[27, "sire.search.set_approx_epsilon"]], "set_min_protein_residues() (in module sire.search)": [[27, "sire.search.set_min_protein_residues"]], "set_protein_residue_names() (in module sire.search)": [[27, "sire.search.set_protein_residue_names"]], "set_token() (in module sire.search)": [[27, "sire.search.set_token"]], "sire.search": [[27, "module-sire.search"]], "atomid() (in module sire)": [[28, "sire.atomid"]], "chainid() (in module sire)": [[28, "sire.chainid"]], "expand() (in module sire)": [[28, "sire.expand"]], "get_max_num_threads() (in module sire)": [[28, "sire.get_max_num_threads"]], "load() (in module sire)": [[28, "sire.load"]], "load_test_files() (in module sire)": [[28, "sire.load_test_files"]], "match_atoms() (in module sire)": [[28, "sire.match_atoms"]], "measure() (in module sire)": [[28, "sire.measure"]], "minimum_distance() (in module sire)": [[28, "sire.minimum_distance"]], "molid() (in module sire)": [[28, "sire.molid"]], "save() (in module sire)": [[28, "sire.save"]], "save_to_string() (in module sire)": [[28, "sire.save_to_string"]], "segid() (in module sire)": [[28, "sire.segid"]], "set_default_num_threads() (in module sire)": [[28, "sire.set_default_num_threads"]], "set_max_num_threads() (in module sire)": [[28, "sire.set_max_num_threads"]], "sire": [[28, "module-sire"]], "smarts() (in module sire)": [[28, "sire.smarts"]], "smiles() (in module sire)": [[28, "sire.smiles"]], "supported_formats() (in module sire)": [[28, "sire.supported_formats"]], "tutorial_url (in module sire)": [[28, "sire.tutorial_url"]], "u() (in module sire)": [[28, "sire.u"]], "use_mixed_api() (in module sire)": [[28, "sire.use_mixed_api"]], "use_new_api() (in module sire)": [[28, "sire.use_new_api"]], "use_old_api() (in module sire)": [[28, "sire.use_old_api"]], "get_data_header() (in module sire.stream)": [[30, "sire.stream.get_data_header"]], "get_header_property() (in module sire.stream)": [[30, "sire.stream.get_header_property"]], "load() (in module sire.stream)": [[30, "sire.stream.load"]], "save() (in module sire.stream)": [[30, "sire.stream.save"]], "set_header_property() (in module sire.stream)": [[30, "sire.stream.set_header_property"]], "sire.stream": [[30, "module-sire.stream"]], "forcefieldinfo (class in sire.system)": [[31, "sire.system.ForceFieldInfo"]], "system (class in sire.system)": [[31, "sire.system.System"]], "add() (sire.system.system method)": [[31, "sire.system.System.add"]], "add_shared_property() (sire.system.system method)": [[31, "sire.system.System.add_shared_property"]], "angle() (sire.system.system method)": [[31, "sire.system.System.angle"]], "angles() (sire.system.system method)": [[31, "sire.system.System.angles"]], "apply() (sire.system.system method)": [[31, "sire.system.System.apply"]], "apply_reduce() (sire.system.system method)": [[31, "sire.system.System.apply_reduce"]], "atom() (sire.system.system method)": [[31, "sire.system.System.atom"]], "atoms() (sire.system.system method)": [[31, "sire.system.System.atoms"]], "bond() (sire.system.system method)": [[31, "sire.system.System.bond"]], "bonds() (sire.system.system method)": [[31, "sire.system.System.bonds"]], "chain() (sire.system.system method)": [[31, "sire.system.System.chain"]], "chains() (sire.system.system method)": [[31, "sire.system.System.chains"]], "charge() (sire.system.system method)": [[31, "sire.system.System.charge"]], "clear_energy_trajectory() (sire.system.system method)": [[31, "sire.system.System.clear_energy_trajectory"]], "clone() (sire.system.system method)": [[31, "sire.system.System.clone"]], "coordinates() (sire.system.system method)": [[31, "sire.system.System.coordinates"]], "count() (sire.system.system method)": [[31, "sire.system.System.count"]], "cursor() (sire.system.system method)": [[31, "sire.system.System.cursor"]], "delete_all_frames() (sire.system.system method)": [[31, "sire.system.System.delete_all_frames"]], "delete_frame() (sire.system.system method)": [[31, "sire.system.System.delete_frame"]], "dihedral() (sire.system.system method)": [[31, "sire.system.System.dihedral"]], "dihedrals() (sire.system.system method)": [[31, "sire.system.System.dihedrals"]], "dynamics() (sire.system.system method)": [[31, "sire.system.System.dynamics"]], "energies() (sire.system.system method)": [[31, "sire.system.System.energies"]], "energy() (sire.system.system method)": [[31, "sire.system.System.energy"]], "energy_trajectory() (sire.system.system method)": [[31, "sire.system.System.energy_trajectory"]], "evaluate() (sire.system.system method)": [[31, "sire.system.System.evaluate"]], "find() (sire.system.system method)": [[31, "sire.system.System.find"]], "has_property() (sire.system.system method)": [[31, "sire.system.System.has_property"]], "improper() (sire.system.system method)": [[31, "sire.system.System.improper"]], "impropers() (sire.system.system method)": [[31, "sire.system.System.impropers"]], "is_system() (sire.system.system static method)": [[31, "sire.system.System.is_system"]], "load_frame() (sire.system.system method)": [[31, "sire.system.System.load_frame"]], "make_whole() (sire.system.system method)": [[31, "sire.system.System.make_whole"]], "mass() (sire.system.system method)": [[31, "sire.system.System.mass"]], "minimisation() (sire.system.system method)": [[31, "sire.system.System.minimisation"]], "molecule() (sire.system.system method)": [[31, "sire.system.System.molecule"]], "molecules() (sire.system.system method)": [[31, "sire.system.System.molecules"]], "names() (sire.system.system method)": [[31, "sire.system.System.names"]], "num_atoms() (sire.system.system method)": [[31, "sire.system.System.num_atoms"]], "num_chains() (sire.system.system method)": [[31, "sire.system.System.num_chains"]], "num_frames() (sire.system.system method)": [[31, "sire.system.System.num_frames"]], "num_molecules() (sire.system.system method)": [[31, "sire.system.System.num_molecules"]], "num_residues() (sire.system.system method)": [[31, "sire.system.System.num_residues"]], "num_segments() (sire.system.system method)": [[31, "sire.system.System.num_segments"]], "numbers() (sire.system.system method)": [[31, "sire.system.System.numbers"]], "properties() (sire.system.system method)": [[31, "sire.system.System.properties"]], "property() (sire.system.system method)": [[31, "sire.system.System.property"]], "property_keys() (sire.system.system method)": [[31, "sire.system.System.property_keys"]], "remove() (sire.system.system method)": [[31, "sire.system.System.remove"]], "remove_all_shared_properties() (sire.system.system method)": [[31, "sire.system.System.remove_all_shared_properties"]], "remove_shared_property() (sire.system.system method)": [[31, "sire.system.System.remove_shared_property"]], "residue() (sire.system.system method)": [[31, "sire.system.System.residue"]], "residues() (sire.system.system method)": [[31, "sire.system.System.residues"]], "save_frame() (sire.system.system method)": [[31, "sire.system.System.save_frame"]], "segment() (sire.system.system method)": [[31, "sire.system.System.segment"]], "segments() (sire.system.system method)": [[31, "sire.system.System.segments"]], "set_energy_trajectory() (sire.system.system method)": [[31, "sire.system.System.set_energy_trajectory"]], "set_property() (sire.system.system method)": [[31, "sire.system.System.set_property"]], "set_shared_property() (sire.system.system method)": [[31, "sire.system.System.set_shared_property"]], "set_space() (sire.system.system method)": [[31, "sire.system.System.set_space"]], "set_time() (sire.system.system method)": [[31, "sire.system.System.set_time"]], "shared_properties() (sire.system.system method)": [[31, "sire.system.System.shared_properties"]], "sire.system": [[31, "module-sire.system"]], "size() (sire.system.system method)": [[31, "sire.system.System.size"]], "smarts() (sire.system.system method)": [[31, "sire.system.System.smarts"]], "smiles() (sire.system.system method)": [[31, "sire.system.System.smiles"]], "space() (sire.system.system method)": [[31, "sire.system.System.space"]], "time() (sire.system.system method)": [[31, "sire.system.System.time"]], "to_molecule_group() (sire.system.system method)": [[31, "sire.system.System.to_molecule_group"]], "trajectory() (sire.system.system method)": [[31, "sire.system.System.trajectory"]], "update() (sire.system.system method)": [[31, "sire.system.System.update"]], "view() (sire.system.system method)": [[31, "sire.system.System.view"]], "view2d() (sire.system.system method)": [[31, "sire.system.System.view2d"]], "angle() (in module sire.units)": [[32, "sire.units.angle"]], "angstrom (in module sire.units)": [[32, "sire.units.angstrom"]], "clear_default_units() (in module sire.units)": [[32, "sire.units.clear_default_units"]], "convert() (in module sire.units)": [[32, "sire.units.convert"]], "length() (in module sire.units)": [[32, "sire.units.length"]], "picometer (in module sire.units)": [[32, "sire.units.picometer"]], "set_default_unit() (in module sire.units)": [[32, "sire.units.set_default_unit"]], "set_default_units() (in module sire.units)": [[32, "sire.units.set_default_units"]], "set_energy_unit() (in module sire.units)": [[32, "sire.units.set_energy_unit"]], "set_internal_units() (in module sire.units)": [[32, "sire.units.set_internal_units"]], "set_length_unit() (in module sire.units)": [[32, "sire.units.set_length_unit"]], "set_mass_unit() (in module sire.units)": [[32, "sire.units.set_mass_unit"]], "set_quantity_unit() (in module sire.units)": [[32, "sire.units.set_quantity_unit"]], "set_si_units() (in module sire.units)": [[32, "sire.units.set_si_units"]], "set_time_unit() (in module sire.units)": [[32, "sire.units.set_time_unit"]], "sire.units": [[32, "module-sire.units"]], "console (class in sire.utils)": [[33, "sire.utils.Console"]], "nullprofiler (class in sire.utils)": [[33, "sire.utils.NullProfiler"]], "profiler (class in sire.utils)": [[33, "sire.utils.Profiler"]], "table (class in sire.utils)": [[33, "sire.utils.Table"]], "add_column() (sire.utils.table method)": [[33, "sire.utils.Table.add_column"]], "add_row() (sire.utils.table method)": [[33, "sire.utils.Table.add_row"]], "assert_imported() (in module sire.utils)": [[33, "sire.utils.assert_imported"]], "child_total() (sire.utils.profiler method)": [[33, "sire.utils.Profiler.child_total"]], "debug() (sire.utils.console static method)": [[33, "sire.utils.Console.debug"]], "debugging_enabled() (sire.utils.console static method)": [[33, "sire.utils.Console.debugging_enabled"]], "error() (sire.utils.console static method)": [[33, "sire.utils.Console.error"]], "have_imported() (in module sire.utils)": [[33, "sire.utils.have_imported"]], "info() (sire.utils.console static method)": [[33, "sire.utils.Console.info"]], "is_null() (sire.utils.profiler method)": [[33, "sire.utils.Profiler.is_null"]], "name() (sire.utils.profiler method)": [[33, "sire.utils.Profiler.name"]], "panel() (sire.utils.console static method)": [[33, "sire.utils.Console.panel"]], "print() (sire.utils.console static method)": [[33, "sire.utils.Console.print"]], "print_exception() (sire.utils.console static method)": [[33, "sire.utils.Console.print_exception"]], "redirect_output() (sire.utils.console static method)": [[33, "sire.utils.Console.redirect_output"]], "rule() (sire.utils.console static method)": [[33, "sire.utils.Console.rule"]], "save() (sire.utils.console static method)": [[33, "sire.utils.Console.save"]], "set_debugging_enabled() (sire.utils.console static method)": [[33, "sire.utils.Console.set_debugging_enabled"]], "set_theme() (sire.utils.console static method)": [[33, "sire.utils.Console.set_theme"]], "sire.utils": [[33, "module-sire.utils"]], "start() (sire.utils.profiler method)": [[33, "sire.utils.Profiler.start"]], "stop() (sire.utils.profiler method)": [[33, "sire.utils.Profiler.stop"]], "supports_emojis() (sire.utils.console static method)": [[33, "sire.utils.Console.supports_emojis"]], "to_string() (sire.utils.table method)": [[33, "sire.utils.Table.to_string"]], "total() (sire.utils.profiler method)": [[33, "sire.utils.Profiler.total"]], "try_import() (in module sire.utils)": [[33, "sire.utils.try_import"]], "try_import_from() (in module sire.utils)": [[33, "sire.utils.try_import_from"]], "warning() (sire.utils.console static method)": [[33, "sire.utils.Console.warning"]], "cartesian (class in sire.vol)": [[34, "sire.vol.Cartesian"]], "coordgroup (class in sire.vol)": [[34, "sire.vol.CoordGroup"]], "periodicbox (class in sire.vol)": [[34, "sire.vol.PeriodicBox"]], "triclinicbox (class in sire.vol)": [[34, "sire.vol.TriclinicBox"]], "aabox() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.aabox"]], "alpha() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.alpha"]], "assert_same_size() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.assert_same_size"]], "assert_valid_index() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.assert_valid_index"]], "assign() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.assign"]], "assign() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.assign"]], "assign() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.assign"]], "assign() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.assign"]], "beta() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.beta"]], "beyond() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.beyond"]], "beyond() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.beyond"]], "beyond() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.beyond"]], "box_matrix() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.box_matrix"]], "box_matrix() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.box_matrix"]], "box_matrix() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.box_matrix"]], "calc_angle() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_angle"]], "calc_angle() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_angle"]], "calc_angle() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_angle"]], "calc_dihedral() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_dihedral"]], "calc_dihedral() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_dihedral"]], "calc_dihedral() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_dihedral"]], "calc_dist() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_dist"]], "calc_dist() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_dist"]], "calc_dist() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_dist"]], "calc_dist2() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_dist2"]], "calc_dist2() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_dist2"]], "calc_dist2() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_dist2"]], "calc_dist_vector() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_dist_vector"]], "calc_dist_vector() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_dist_vector"]], "calc_dist_vector() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_dist_vector"]], "calc_dist_vectors() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_dist_vectors"]], "calc_dist_vectors() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_dist_vectors"]], "calc_dist_vectors() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_dist_vectors"]], "calc_inv_dist() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_inv_dist"]], "calc_inv_dist() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_inv_dist"]], "calc_inv_dist() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_inv_dist"]], "calc_inv_dist2() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.calc_inv_dist2"]], "calc_inv_dist2() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.calc_inv_dist2"]], "calc_inv_dist2() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.calc_inv_dist2"]], "cell_matrix() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.cell_matrix"]], "change_volume() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.change_volume"]], "change_volume() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.change_volume"]], "clone() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.clone"]], "clone() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.clone"]], "clone() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.clone"]], "clone() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.clone"]], "cubic() (sire.vol.triclinicbox static method)": [[34, "sire.vol.TriclinicBox.cubic"]], "dimensions() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.dimensions"]], "edit() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.edit"]], "gamma() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.gamma"]], "get_box_center() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.get_box_center"]], "get_box_center() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.get_box_center"]], "get_box_center() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.get_box_center"]], "get_copies_within() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.get_copies_within"]], "get_copies_within() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.get_copies_within"]], "get_copies_within() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.get_copies_within"]], "get_images_within() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.get_images_within"]], "get_images_within() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.get_images_within"]], "get_images_within() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.get_images_within"]], "get_minimum_image() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.get_minimum_image"]], "get_minimum_image() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.get_minimum_image"]], "get_minimum_image() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.get_minimum_image"]], "get_random_point() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.get_random_point"]], "get_random_point() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.get_random_point"]], "get_random_point() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.get_random_point"]], "is_cartesian() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.is_cartesian"]], "is_cartesian() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.is_cartesian"]], "is_cartesian() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.is_cartesian"]], "is_empty() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.is_empty"]], "is_periodic() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.is_periodic"]], "is_periodic() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.is_periodic"]], "is_periodic() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.is_periodic"]], "is_reduced() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.is_reduced"]], "is_rotated() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.is_rotated"]], "make_whole() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.make_whole"]], "make_whole() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.make_whole"]], "max_coords() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.max_coords"]], "maximum_cutoff() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.maximum_cutoff"]], "maximum_cutoff() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.maximum_cutoff"]], "maybe_different() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.maybe_different"]], "min_coords() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.min_coords"]], "minimum_distance() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.minimum_distance"]], "minimum_distance() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.minimum_distance"]], "minimum_distance() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.minimum_distance"]], "reduce() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.reduce"]], "rhombic_dodecahedron_hexagon() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.rhombic_dodecahedron_hexagon"]], "rhombic_dodecahedron_square() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.rhombic_dodecahedron_square"]], "rotate() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.rotate"]], "rotation_matrix() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.rotation_matrix"]], "set_dimensions() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.set_dimensions"]], "set_volume() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.set_volume"]], "set_volume() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.set_volume"]], "set_volume() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.set_volume"]], "sire.vol": [[34, "module-sire.vol"]], "to_string() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.to_string"]], "to_string() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.to_string"]], "to_string() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.to_string"]], "to_string() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.to_string"]], "to_vector() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.to_vector"]], "truncated_octahedron() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.truncated_octahedron"]], "typename() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.typename"]], "typename() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.typename"]], "typename() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.typename"]], "typename() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.typename"]], "vector0() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.vector0"]], "vector1() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.vector1"]], "vector2() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.vector2"]], "volume() (sire.vol.cartesian method)": [[34, "sire.vol.Cartesian.volume"]], "volume() (sire.vol.periodicbox method)": [[34, "sire.vol.PeriodicBox.volume"]], "volume() (sire.vol.triclinicbox method)": [[34, "sire.vol.TriclinicBox.volume"]], "what() (sire.vol.coordgroup method)": [[34, "sire.vol.CoordGroup.what"]]}})